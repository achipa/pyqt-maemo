/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:10 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 194 "/home/maemo/python-qt4-4.7/sip/QtNetwork/qabstractnetworkcache.sip"
#include <qabstractnetworkcache.h>
#line 39 "sipQtNetworkQAbstractNetworkCache.cpp"

#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtNetworkQAbstractNetworkCache.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 46 "sipQtNetworkQAbstractNetworkCache.cpp"
#line 154 "/home/maemo/python-qt4-4.7/sip/QtNetwork/qabstractnetworkcache.sip"
#include <qabstractnetworkcache.h>
#line 49 "sipQtNetworkQAbstractNetworkCache.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 52 "sipQtNetworkQAbstractNetworkCache.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 55 "sipQtNetworkQAbstractNetworkCache.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 58 "sipQtNetworkQAbstractNetworkCache.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 61 "sipQtNetworkQAbstractNetworkCache.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 64 "sipQtNetworkQAbstractNetworkCache.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 67 "sipQtNetworkQAbstractNetworkCache.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 70 "sipQtNetworkQAbstractNetworkCache.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 73 "sipQtNetworkQAbstractNetworkCache.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 76 "sipQtNetworkQAbstractNetworkCache.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 79 "sipQtNetworkQAbstractNetworkCache.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 82 "sipQtNetworkQAbstractNetworkCache.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 85 "sipQtNetworkQAbstractNetworkCache.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 88 "sipQtNetworkQAbstractNetworkCache.cpp"


class sipQAbstractNetworkCache : public QAbstractNetworkCache
{
public:
    sipQAbstractNetworkCache(QObject *);
    virtual ~sipQAbstractNetworkCache();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QNetworkCacheMetaData metaData(const QUrl&);
    void updateMetaData(const QNetworkCacheMetaData&);
    QIODevice * data(const QUrl&);
    bool remove(const QUrl&);
    qint64 cacheSize() const;
    QIODevice * prepare(const QNetworkCacheMetaData&);
    void insert(QIODevice *);
    void clear();
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractNetworkCache(const sipQAbstractNetworkCache &);
    sipQAbstractNetworkCache &operator = (const sipQAbstractNetworkCache &);

    char sipPyMethods[15];
};

sipQAbstractNetworkCache::sipQAbstractNetworkCache(QObject *a0): QAbstractNetworkCache(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractNetworkCache::~sipQAbstractNetworkCache()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQAbstractNetworkCache::metaObject() const
{
    return sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QAbstractNetworkCache);
}

int sipQAbstractNetworkCache::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QAbstractNetworkCache::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QAbstractNetworkCache,_c,_id,_a);

    return _id;
}

void *sipQAbstractNetworkCache::qt_metacast(const char *_clname)
{
    return (sip_QtNetwork_qt_metacast && sip_QtNetwork_qt_metacast(sipPySelf,sipType_QAbstractNetworkCache,_clname)) ? this : QAbstractNetworkCache::qt_metacast(_clname);
}

QNetworkCacheMetaData sipQAbstractNetworkCache::metaData(const QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QAbstractNetworkCache,sipName_metaData);

    if (!meth)
        return QNetworkCacheMetaData();

    extern QNetworkCacheMetaData sipVH_QtNetwork_10(sip_gilstate_t,PyObject *,const QUrl&);

    return sipVH_QtNetwork_10(sipGILState,meth,a0);
}

void sipQAbstractNetworkCache::updateMetaData(const QNetworkCacheMetaData& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_QAbstractNetworkCache,sipName_updateMetaData);

    if (!meth)
        return;

    extern void sipVH_QtNetwork_9(sip_gilstate_t,PyObject *,const QNetworkCacheMetaData&);

    sipVH_QtNetwork_9(sipGILState,meth,a0);
}

QIODevice * sipQAbstractNetworkCache::data(const QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,sipName_QAbstractNetworkCache,sipName_data);

    if (!meth)
        return 0;

    extern QIODevice * sipVH_QtNetwork_8(sip_gilstate_t,PyObject *,const QUrl&);

    return sipVH_QtNetwork_8(sipGILState,meth,a0);
}

bool sipQAbstractNetworkCache::remove(const QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,sipName_QAbstractNetworkCache,sipName_remove);

    if (!meth)
        return 0;

    extern bool sipVH_QtNetwork_7(sip_gilstate_t,PyObject *,const QUrl&);

    return sipVH_QtNetwork_7(sipGILState,meth,a0);
}

qint64 sipQAbstractNetworkCache::cacheSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,sipName_QAbstractNetworkCache,sipName_cacheSize);

    if (!meth)
        return 0;

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState,meth);
}

QIODevice * sipQAbstractNetworkCache::prepare(const QNetworkCacheMetaData& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,sipName_QAbstractNetworkCache,sipName_prepare);

    if (!meth)
        return 0;

    extern QIODevice * sipVH_QtNetwork_6(sip_gilstate_t,PyObject *,const QNetworkCacheMetaData&);

    return sipVH_QtNetwork_6(sipGILState,meth,a0);
}

void sipQAbstractNetworkCache::insert(QIODevice *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,sipName_QAbstractNetworkCache,sipName_insert);

    if (!meth)
        return;

    extern void sipVH_QtNetwork_5(sip_gilstate_t,PyObject *,QIODevice *);

    sipVH_QtNetwork_5(sipGILState,meth,a0);
}

void sipQAbstractNetworkCache::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,sipName_QAbstractNetworkCache,sipName_clear);

    if (!meth)
        return;

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

bool sipQAbstractNetworkCache::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQAbstractNetworkCache::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQAbstractNetworkCache::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQAbstractNetworkCache::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQAbstractNetworkCache::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQAbstractNetworkCache::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQAbstractNetworkCache::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_metaData, "QAbstractNetworkCache.metaData(QUrl) -> QNetworkCacheMetaData");

extern "C" {static PyObject *meth_QAbstractNetworkCache_metaData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_metaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QUrl * a0;
        QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QUrl, &a0))
        {
            QNetworkCacheMetaData *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_metaData);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QNetworkCacheMetaData(sipCpp->metaData(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QNetworkCacheMetaData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_metaData, doc_QAbstractNetworkCache_metaData);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_updateMetaData, "QAbstractNetworkCache.updateMetaData(QNetworkCacheMetaData)");

extern "C" {static PyObject *meth_QAbstractNetworkCache_updateMetaData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_updateMetaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QNetworkCacheMetaData * a0;
        QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QNetworkCacheMetaData, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_updateMetaData);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->updateMetaData(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_updateMetaData, doc_QAbstractNetworkCache_updateMetaData);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_data, "QAbstractNetworkCache.data(QUrl) -> QIODevice");

extern "C" {static PyObject *meth_QAbstractNetworkCache_data(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QUrl * a0;
        QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QUrl, &a0))
        {
            QIODevice *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_data);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->data(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_data, doc_QAbstractNetworkCache_data);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_remove, "QAbstractNetworkCache.remove(QUrl) -> bool");

extern "C" {static PyObject *meth_QAbstractNetworkCache_remove(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QUrl * a0;
        QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QUrl, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_remove);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->remove(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_remove, doc_QAbstractNetworkCache_remove);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_cacheSize, "QAbstractNetworkCache.cacheSize() -> int");

extern "C" {static PyObject *meth_QAbstractNetworkCache_cacheSize(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_cacheSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp))
        {
            qint64 sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_cacheSize);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cacheSize();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_cacheSize, doc_QAbstractNetworkCache_cacheSize);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_prepare, "QAbstractNetworkCache.prepare(QNetworkCacheMetaData) -> QIODevice");

extern "C" {static PyObject *meth_QAbstractNetworkCache_prepare(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_prepare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QNetworkCacheMetaData * a0;
        QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QNetworkCacheMetaData, &a0))
        {
            QIODevice *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_prepare);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->prepare(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_prepare, doc_QAbstractNetworkCache_prepare);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_insert, "QAbstractNetworkCache.insert(QIODevice)");

extern "C" {static PyObject *meth_QAbstractNetworkCache_insert(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QIODevice * a0;
        QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QIODevice, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_insert);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->insert(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_insert, doc_QAbstractNetworkCache_insert);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_clear, "QAbstractNetworkCache.clear()");

extern "C" {static PyObject *meth_QAbstractNetworkCache_clear(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_clear);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_clear, doc_QAbstractNetworkCache_clear);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QAbstractNetworkCache(void *, const sipTypeDef *);}
static void *cast_QAbstractNetworkCache(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QAbstractNetworkCache)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QAbstractNetworkCache *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractNetworkCache(void *, int);}
static void release_QAbstractNetworkCache(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQAbstractNetworkCache *>(sipCppV);
    else
        delete reinterpret_cast<QAbstractNetworkCache *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QAbstractNetworkCache(sipSimpleWrapper *);}
static void dealloc_QAbstractNetworkCache(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAbstractNetworkCache *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAbstractNetworkCache(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QAbstractNetworkCache(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QAbstractNetworkCache(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractNetworkCache *sipCpp = 0;

    {
        QObject * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQAbstractNetworkCache(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractNetworkCache[] = {{129, 0, 1}};


static PyMethodDef methods_QAbstractNetworkCache[] = {
    {SIP_MLNAME_CAST(sipName_cacheSize), meth_QAbstractNetworkCache_cacheSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_cacheSize)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QAbstractNetworkCache_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_clear)},
    {SIP_MLNAME_CAST(sipName_data), meth_QAbstractNetworkCache_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_data)},
    {SIP_MLNAME_CAST(sipName_insert), meth_QAbstractNetworkCache_insert, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_insert)},
    {SIP_MLNAME_CAST(sipName_metaData), meth_QAbstractNetworkCache_metaData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_metaData)},
    {SIP_MLNAME_CAST(sipName_prepare), meth_QAbstractNetworkCache_prepare, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_prepare)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QAbstractNetworkCache_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_remove)},
    {SIP_MLNAME_CAST(sipName_updateMetaData), meth_QAbstractNetworkCache_updateMetaData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_updateMetaData)}
};

PyDoc_STRVAR(doc_QAbstractNetworkCache, "\1QAbstractNetworkCache(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtNetwork_QAbstractNetworkCache = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QAbstractNetworkCache,
        {0}
    },
    {
        sipNameNr_QAbstractNetworkCache,
        {0, 0, 1},
        8, methods_QAbstractNetworkCache,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractNetworkCache,
    -1,
    -1,
    supers_QAbstractNetworkCache,
    0,
    init_QAbstractNetworkCache,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractNetworkCache,
    0,
    0,
    0,
    release_QAbstractNetworkCache,
    cast_QAbstractNetworkCache,
    0,
    0,
    0
},
    &QAbstractNetworkCache::staticMetaObject,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:10 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 39 "/home/maemo/python-qt4-4.7/sip/QtNetwork/qnetworkreply.sip"
#include <qnetworkreply.h>
#line 39 "sipQtNetworkQNetworkReply.cpp"

#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtNetworkQNetworkReply.cpp"
#line 39 "/home/maemo/python-qt4-4.7/sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 46 "sipQtNetworkQNetworkReply.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 49 "sipQtNetworkQNetworkReply.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 52 "sipQtNetworkQNetworkReply.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 55 "sipQtNetworkQNetworkReply.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 58 "sipQtNetworkQNetworkReply.cpp"
#line 39 "/home/maemo/python-qt4-4.7/sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 61 "sipQtNetworkQNetworkReply.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 64 "sipQtNetworkQNetworkReply.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtNetwork/qsslerror.sip"
#include <qsslerror.h>
#line 67 "sipQtNetworkQNetworkReply.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtNetwork/qsslconfiguration.sip"
#include <qsslconfiguration.h>
#line 70 "sipQtNetworkQNetworkReply.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 73 "sipQtNetworkQNetworkReply.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 76 "sipQtNetworkQNetworkReply.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 79 "sipQtNetworkQNetworkReply.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 82 "sipQtNetworkQNetworkReply.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 85 "sipQtNetworkQNetworkReply.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 88 "sipQtNetworkQNetworkReply.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 91 "sipQtNetworkQNetworkReply.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 94 "sipQtNetworkQNetworkReply.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 97 "sipQtNetworkQNetworkReply.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 100 "sipQtNetworkQNetworkReply.cpp"


class sipQNetworkReply : public QNetworkReply
{
public:
    sipQNetworkReply(QObject *);
    virtual ~sipQNetworkReply();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void abort();
    void close();
    bool isSequential() const;
    void setReadBufferSize(qint64);
    void ignoreSslErrors();
    qint64 writeData(const char *,PY_LONG_LONG);
    bool open(QIODevice::OpenMode);
    qint64 pos() const;
    qint64 size() const;
    bool seek(qint64);
    bool atEnd() const;
    bool reset();
    qint64 bytesAvailable() const;
    qint64 bytesToWrite() const;
    bool canReadLine() const;
    bool waitForReadyRead(int);
    bool waitForBytesWritten(int);
    qint64 readData(char *,qint64);
    qint64 readLineData(char *,qint64);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNetworkReply(const sipQNetworkReply &);
    sipQNetworkReply &operator = (const sipQNetworkReply &);

    char sipPyMethods[26];
};

sipQNetworkReply::sipQNetworkReply(QObject *a0): QNetworkReply(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkReply::~sipQNetworkReply()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQNetworkReply::metaObject() const
{
    return sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QNetworkReply);
}

int sipQNetworkReply::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QNetworkReply::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QNetworkReply,_c,_id,_a);

    return _id;
}

void *sipQNetworkReply::qt_metacast(const char *_clname)
{
    return (sip_QtNetwork_qt_metacast && sip_QtNetwork_qt_metacast(sipPySelf,sipType_QNetworkReply,_clname)) ? this : QNetworkReply::qt_metacast(_clname);
}

void sipQNetworkReply::abort()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QNetworkReply,sipName_abort);

    if (!meth)
        return;

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQNetworkReply::close()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_close);

    if (!meth)
    {
        QNetworkReply::close();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

bool sipQNetworkReply::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_isSequential);

    if (!meth)
        return QNetworkReply::isSequential();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

void sipQNetworkReply::setReadBufferSize(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_setReadBufferSize);

    if (!meth)
    {
        QNetworkReply::setReadBufferSize(a0);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t,PyObject *,PY_LONG_LONG);

    sipVH_QtNetwork_2(sipGILState,meth,a0);
}

void sipQNetworkReply::ignoreSslErrors()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_ignoreSslErrors);

    if (!meth)
    {
        QNetworkReply::ignoreSslErrors();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

qint64 sipQNetworkReply::writeData(const char *a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_writeData);

    if (!meth)
        return QNetworkReply::writeData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,const char *,PY_LONG_LONG);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[20]))(sipGILState,meth,a0,a1);
}

bool sipQNetworkReply::open(QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_open);

    if (!meth)
        return QIODevice::open(a0);

    typedef bool (*sipVH_QtCore_15)(sip_gilstate_t,PyObject *,QIODevice::OpenMode);

    return ((sipVH_QtCore_15)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[15]))(sipGILState,meth,a0);
}

qint64 sipQNetworkReply::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_pos);

    if (!meth)
        return QIODevice::pos();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState,meth);
}

qint64 sipQNetworkReply::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_size);

    if (!meth)
        return QIODevice::size();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState,meth);
}

bool sipQNetworkReply::seek(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_seek);

    if (!meth)
        return QIODevice::seek(a0);

    typedef bool (*sipVH_QtCore_32)(sip_gilstate_t,PyObject *,PY_LONG_LONG);

    return ((sipVH_QtCore_32)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[32]))(sipGILState,meth,a0);
}

bool sipQNetworkReply::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_atEnd);

    if (!meth)
        return QIODevice::atEnd();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

bool sipQNetworkReply::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_reset);

    if (!meth)
        return QIODevice::reset();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

qint64 sipQNetworkReply::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_bytesAvailable);

    if (!meth)
        return QIODevice::bytesAvailable();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState,meth);
}

qint64 sipQNetworkReply::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_bytesToWrite);

    if (!meth)
        return QIODevice::bytesToWrite();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState,meth);
}

bool sipQNetworkReply::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_canReadLine);

    if (!meth)
        return QIODevice::canReadLine();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

bool sipQNetworkReply::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_waitForReadyRead);

    if (!meth)
        return QIODevice::waitForReadyRead(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtCore_23)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[23]))(sipGILState,meth,a0);
}

bool sipQNetworkReply::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_waitForBytesWritten);

    if (!meth)
        return QIODevice::waitForBytesWritten(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtCore_23)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[23]))(sipGILState,meth,a0);
}

qint64 sipQNetworkReply::readData(char *a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,sipName_QNetworkReply,sipName_readData);

    if (!meth)
        return 0;

    typedef PY_LONG_LONG (*sipVH_QtCore_31)(sip_gilstate_t,PyObject *,char *,PY_LONG_LONG);

    return ((sipVH_QtCore_31)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[31]))(sipGILState,meth,a0,a1);
}

qint64 sipQNetworkReply::readLineData(char *a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_readLineData);

    if (!meth)
        return QIODevice::readLineData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_21)(sip_gilstate_t,PyObject *,char *,PY_LONG_LONG);

    return ((sipVH_QtCore_21)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[21]))(sipGILState,meth,a0,a1);
}

bool sipQNetworkReply::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQNetworkReply::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQNetworkReply::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQNetworkReply::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQNetworkReply::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQNetworkReply::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQNetworkReply::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QNetworkReply_abort, "QNetworkReply.abort()");

extern "C" {static PyObject *meth_QNetworkReply_abort(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QNetworkReply, sipName_abort);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->abort();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_abort, doc_QNetworkReply_abort);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_close, "QNetworkReply.close()");

extern "C" {static PyObject *meth_QNetworkReply_close(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QNetworkReply::close() : sipCpp->close());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_close, doc_QNetworkReply_close);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_isSequential, "QNetworkReply.isSequential() -> bool");

extern "C" {static PyObject *meth_QNetworkReply_isSequential(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_isSequential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QNetworkReply::isSequential() : sipCpp->isSequential());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_isSequential, doc_QNetworkReply_isSequential);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_readBufferSize, "QNetworkReply.readBufferSize() -> int");

extern "C" {static PyObject *meth_QNetworkReply_readBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_readBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->readBufferSize();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_readBufferSize, doc_QNetworkReply_readBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_setReadBufferSize, "QNetworkReply.setReadBufferSize(int)");

extern "C" {static PyObject *meth_QNetworkReply_setReadBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setReadBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QNetworkReply, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QNetworkReply::setReadBufferSize(a0) : sipCpp->setReadBufferSize(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setReadBufferSize, doc_QNetworkReply_setReadBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_manager, "QNetworkReply.manager() -> QNetworkAccessManager");

extern "C" {static PyObject *meth_QNetworkReply_manager(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_manager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QNetworkAccessManager *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->manager();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkAccessManager,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_manager, doc_QNetworkReply_manager);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_operation, "QNetworkReply.operation() -> QNetworkAccessManager.Operation");

extern "C" {static PyObject *meth_QNetworkReply_operation(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_operation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QNetworkAccessManager::Operation sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->operation();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QNetworkAccessManager_Operation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_operation, doc_QNetworkReply_operation);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_request, "QNetworkReply.request() -> QNetworkRequest");

extern "C" {static PyObject *meth_QNetworkReply_request(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_request(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QNetworkRequest *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QNetworkRequest(sipCpp->request());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QNetworkRequest,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_request, doc_QNetworkReply_request);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_error, "QNetworkReply.error() -> QNetworkReply.NetworkError");

extern "C" {static PyObject *meth_QNetworkReply_error(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QNetworkReply::NetworkError sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->error();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QNetworkReply_NetworkError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_error, doc_QNetworkReply_error);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_url, "QNetworkReply.url() -> QUrl");

extern "C" {static PyObject *meth_QNetworkReply_url(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QUrl *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(sipCpp->url());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_url, doc_QNetworkReply_url);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_header, "QNetworkReply.header(QNetworkRequest.KnownHeaders) -> QVariant");

extern "C" {static PyObject *meth_QNetworkReply_header(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_header(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkRequest::KnownHeaders a0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkRequest_KnownHeaders, &a0))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->header(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_header, doc_QNetworkReply_header);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_hasRawHeader, "QNetworkReply.hasRawHeader(QByteArray) -> bool");

extern "C" {static PyObject *meth_QNetworkReply_hasRawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_hasRawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasRawHeader(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_hasRawHeader, doc_QNetworkReply_hasRawHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_rawHeaderList, "QNetworkReply.rawHeaderList() -> list-of-QByteArray");

extern "C" {static PyObject *meth_QNetworkReply_rawHeaderList(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_rawHeaderList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QList<QByteArray> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QByteArray>(sipCpp->rawHeaderList());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_rawHeaderList, doc_QNetworkReply_rawHeaderList);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_rawHeader, "QNetworkReply.rawHeader(QByteArray) -> QByteArray");

extern "C" {static PyObject *meth_QNetworkReply_rawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_rawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->rawHeader(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_rawHeader, doc_QNetworkReply_rawHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_attribute, "QNetworkReply.attribute(QNetworkRequest.Attribute) -> QVariant");

extern "C" {static PyObject *meth_QNetworkReply_attribute(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_attribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkRequest::Attribute a0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkRequest_Attribute, &a0))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->attribute(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_attribute, doc_QNetworkReply_attribute);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_sslConfiguration, "QNetworkReply.sslConfiguration() -> QSslConfiguration");

extern "C" {static PyObject *meth_QNetworkReply_sslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_sslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QSslConfiguration *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSslConfiguration(sipCpp->sslConfiguration());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSslConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_sslConfiguration, doc_QNetworkReply_sslConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_setSslConfiguration, "QNetworkReply.setSslConfiguration(QSslConfiguration)");

extern "C" {static PyObject *meth_QNetworkReply_setSslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setSslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration * a0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QSslConfiguration, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSslConfiguration(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setSslConfiguration, doc_QNetworkReply_setSslConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_ignoreSslErrors, "QNetworkReply.ignoreSslErrors()\n"
    "QNetworkReply.ignoreSslErrors(list-of-QSslError)");

extern "C" {static PyObject *meth_QNetworkReply_ignoreSslErrors(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_ignoreSslErrors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QNetworkReply::ignoreSslErrors() : sipCpp->ignoreSslErrors());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QList<QSslError> * a0;
        int a0State = 0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QList_0100QSslError,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ignoreSslErrors(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QSslError> *>(a0),sipType_QList_0100QSslError,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_ignoreSslErrors, doc_QNetworkReply_ignoreSslErrors);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_writeData, "QNetworkReply.writeData(str) -> int");

extern "C" {static PyObject *meth_QNetworkReply_writeData(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_writeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const char * a0;
        SIP_SSIZE_T a1;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pk", &sipSelf, sipType_QNetworkReply, &sipCpp, &a0, &a1))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QNetworkReply::writeData(a0,(PY_LONG_LONG)a1) : sipCpp->writeData(a0,(PY_LONG_LONG)a1));
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_writeData, doc_QNetworkReply_writeData);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_setOperation, "QNetworkReply.setOperation(QNetworkAccessManager.Operation)");

extern "C" {static PyObject *meth_QNetworkReply_setOperation(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setOperation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkAccessManager::Operation a0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkAccessManager_Operation, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOperation(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setOperation, doc_QNetworkReply_setOperation);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_setRequest, "QNetworkReply.setRequest(QNetworkRequest)");

extern "C" {static PyObject *meth_QNetworkReply_setRequest(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setRequest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest * a0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkRequest, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRequest(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setRequest, doc_QNetworkReply_setRequest);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_setError, "QNetworkReply.setError(QNetworkReply.NetworkError, QString)");

extern "C" {static PyObject *meth_QNetworkReply_setError(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply::NetworkError a0;
        const QString * a1;
        int a1State = 0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkReply_NetworkError, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setError(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setError, doc_QNetworkReply_setError);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_setUrl, "QNetworkReply.setUrl(QUrl)");

extern "C" {static PyObject *meth_QNetworkReply_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl * a0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUrl(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setUrl, doc_QNetworkReply_setUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_setHeader, "QNetworkReply.setHeader(QNetworkRequest.KnownHeaders, QVariant)");

extern "C" {static PyObject *meth_QNetworkReply_setHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkRequest::KnownHeaders a0;
        const QVariant * a1;
        int a1State = 0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkRequest_KnownHeaders, &a0, sipType_QVariant,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHeader(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setHeader, doc_QNetworkReply_setHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_setRawHeader, "QNetworkReply.setRawHeader(QByteArray, QByteArray)");

extern "C" {static PyObject *meth_QNetworkReply_setRawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setRawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;
        const QByteArray * a1;
        int a1State = 0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1J1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRawHeader(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setRawHeader, doc_QNetworkReply_setRawHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_setAttribute, "QNetworkReply.setAttribute(QNetworkRequest.Attribute, QVariant)");

extern "C" {static PyObject *meth_QNetworkReply_setAttribute(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkRequest::Attribute a0;
        const QVariant * a1;
        int a1State = 0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkRequest_Attribute, &a0, sipType_QVariant,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAttribute(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setAttribute, doc_QNetworkReply_setAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_isFinished, "QNetworkReply.isFinished() -> bool");

extern "C" {static PyObject *meth_QNetworkReply_isFinished(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_isFinished(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isFinished();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_isFinished, doc_QNetworkReply_isFinished);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_isRunning, "QNetworkReply.isRunning() -> bool");

extern "C" {static PyObject *meth_QNetworkReply_isRunning(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_isRunning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRunning();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_isRunning, doc_QNetworkReply_isRunning);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QNetworkReply(void *, const sipTypeDef *);}
static void *cast_QNetworkReply(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QNetworkReply)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QIODevice)->ctd_cast((QIODevice *)(QNetworkReply *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkReply(void *, int);}
static void release_QNetworkReply(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQNetworkReply *>(sipCppV);
    else
        delete reinterpret_cast<QNetworkReply *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QNetworkReply(sipSimpleWrapper *);}
static void dealloc_QNetworkReply(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQNetworkReply *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QNetworkReply(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QNetworkReply(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QNetworkReply(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQNetworkReply *sipCpp = 0;

    {
        QObject * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQNetworkReply(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNetworkReply[] = {{77, 0, 1}};


static PyMethodDef methods_QNetworkReply[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QNetworkReply_abort, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_abort)},
    {SIP_MLNAME_CAST(sipName_attribute), meth_QNetworkReply_attribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_attribute)},
    {SIP_MLNAME_CAST(sipName_close), meth_QNetworkReply_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_close)},
    {SIP_MLNAME_CAST(sipName_error), meth_QNetworkReply_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_error)},
    {SIP_MLNAME_CAST(sipName_hasRawHeader), meth_QNetworkReply_hasRawHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_hasRawHeader)},
    {SIP_MLNAME_CAST(sipName_header), meth_QNetworkReply_header, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_header)},
    {SIP_MLNAME_CAST(sipName_ignoreSslErrors), meth_QNetworkReply_ignoreSslErrors, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_ignoreSslErrors)},
    {SIP_MLNAME_CAST(sipName_isFinished), meth_QNetworkReply_isFinished, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_isFinished)},
    {SIP_MLNAME_CAST(sipName_isRunning), meth_QNetworkReply_isRunning, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_isRunning)},
    {SIP_MLNAME_CAST(sipName_isSequential), meth_QNetworkReply_isSequential, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_isSequential)},
    {SIP_MLNAME_CAST(sipName_manager), meth_QNetworkReply_manager, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_manager)},
    {SIP_MLNAME_CAST(sipName_operation), meth_QNetworkReply_operation, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_operation)},
    {SIP_MLNAME_CAST(sipName_rawHeader), meth_QNetworkReply_rawHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_rawHeader)},
    {SIP_MLNAME_CAST(sipName_rawHeaderList), meth_QNetworkReply_rawHeaderList, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_rawHeaderList)},
    {SIP_MLNAME_CAST(sipName_readBufferSize), meth_QNetworkReply_readBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_readBufferSize)},
    {SIP_MLNAME_CAST(sipName_request), meth_QNetworkReply_request, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_request)},
    {SIP_MLNAME_CAST(sipName_setAttribute), meth_QNetworkReply_setAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setAttribute)},
    {SIP_MLNAME_CAST(sipName_setError), meth_QNetworkReply_setError, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setError)},
    {SIP_MLNAME_CAST(sipName_setHeader), meth_QNetworkReply_setHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setHeader)},
    {SIP_MLNAME_CAST(sipName_setOperation), meth_QNetworkReply_setOperation, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setOperation)},
    {SIP_MLNAME_CAST(sipName_setRawHeader), meth_QNetworkReply_setRawHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setRawHeader)},
    {SIP_MLNAME_CAST(sipName_setReadBufferSize), meth_QNetworkReply_setReadBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setReadBufferSize)},
    {SIP_MLNAME_CAST(sipName_setRequest), meth_QNetworkReply_setRequest, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setRequest)},
    {SIP_MLNAME_CAST(sipName_setSslConfiguration), meth_QNetworkReply_setSslConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setSslConfiguration)},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QNetworkReply_setUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setUrl)},
    {SIP_MLNAME_CAST(sipName_sslConfiguration), meth_QNetworkReply_sslConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_sslConfiguration)},
    {SIP_MLNAME_CAST(sipName_url), meth_QNetworkReply_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_url)},
    {SIP_MLNAME_CAST(sipName_writeData), meth_QNetworkReply_writeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_writeData)}
};

static sipEnumMemberDef enummembers_QNetworkReply[] = {
    {sipName_AuthenticationRequiredError, QNetworkReply::AuthenticationRequiredError, 58},
    {sipName_ConnectionRefusedError, QNetworkReply::ConnectionRefusedError, 58},
    {sipName_ContentAccessDenied, QNetworkReply::ContentAccessDenied, 58},
    {sipName_ContentNotFoundError, QNetworkReply::ContentNotFoundError, 58},
    {sipName_ContentOperationNotPermittedError, QNetworkReply::ContentOperationNotPermittedError, 58},
    {sipName_ContentReSendError, QNetworkReply::ContentReSendError, 58},
    {sipName_HostNotFoundError, QNetworkReply::HostNotFoundError, 58},
    {sipName_NoError, QNetworkReply::NoError, 58},
    {sipName_OperationCanceledError, QNetworkReply::OperationCanceledError, 58},
    {sipName_ProtocolFailure, QNetworkReply::ProtocolFailure, 58},
    {sipName_ProtocolInvalidOperationError, QNetworkReply::ProtocolInvalidOperationError, 58},
    {sipName_ProtocolUnknownError, QNetworkReply::ProtocolUnknownError, 58},
    {sipName_ProxyAuthenticationRequiredError, QNetworkReply::ProxyAuthenticationRequiredError, 58},
    {sipName_ProxyConnectionClosedError, QNetworkReply::ProxyConnectionClosedError, 58},
    {sipName_ProxyConnectionRefusedError, QNetworkReply::ProxyConnectionRefusedError, 58},
    {sipName_ProxyNotFoundError, QNetworkReply::ProxyNotFoundError, 58},
    {sipName_ProxyTimeoutError, QNetworkReply::ProxyTimeoutError, 58},
    {sipName_RemoteHostClosedError, QNetworkReply::RemoteHostClosedError, 58},
    {sipName_SslHandshakeFailedError, QNetworkReply::SslHandshakeFailedError, 58},
    {sipName_TimeoutError, QNetworkReply::TimeoutError, 58},
    {sipName_UnknownContentError, QNetworkReply::UnknownContentError, 58},
    {sipName_UnknownNetworkError, QNetworkReply::UnknownNetworkError, 58},
    {sipName_UnknownProxyError, QNetworkReply::UnknownProxyError, 58},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QNetworkReply[] = {
    {"downloadProgress(qint64,qint64)", "\1QNetworkReply.downloadProgress(int, int)", 0},
    {"uploadProgress(qint64,qint64)", "\1QNetworkReply.uploadProgress(int, int)", 0},
    {"sslErrors(const QList<QSslError>&)", "\1QNetworkReply.sslErrors(list-of-QSslError)", 0},
    {"finished()", "\1QNetworkReply.finished()", 0},
    {"metaDataChanged()", "\1QNetworkReply.metaDataChanged()", 0},
    {"error(QNetworkReply::NetworkError)", "\1QNetworkReply.error(QNetworkReply.NetworkError)", &methods_QNetworkReply[3]},
    {0, 0, 0}
};

PyDoc_STRVAR(doc_QNetworkReply, "\1QNetworkReply(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtNetwork_QNetworkReply = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QNetworkReply,
        {0}
    },
    {
        sipNameNr_QNetworkReply,
        {0, 0, 1},
        28, methods_QNetworkReply,
        23, enummembers_QNetworkReply,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QNetworkReply,
    -1,
    -1,
    supers_QNetworkReply,
    0,
    init_QNetworkReply,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QNetworkReply,
    0,
    0,
    0,
    release_QNetworkReply,
    cast_QNetworkReply,
    0,
    0,
    0
},
    &QNetworkReply::staticMetaObject,
    0,
    pyqt4_signals_QNetworkReply
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:21 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSql.h"

#line 37 "/home/maemo/python-qt4-4.7/sip/QtSql/qsqltablemodel.sip"
#include <qsqltablemodel.h>
#line 39 "sipQtSqlQSqlTableModel.cpp"

#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtSqlQSqlTableModel.cpp"
#line 49 "/home/maemo/python-qt4-4.7/sip/QtSql/qsqldatabase.sip"
#include <qsqldatabase.h>
#line 46 "sipQtSqlQSqlTableModel.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 49 "sipQtSqlQSqlTableModel.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtSql/qsqlquery.sip"
#include <qsqlquery.h>
#line 52 "sipQtSqlQSqlTableModel.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtSql/qsqlindex.sip"
#include <qsqlindex.h>
#line 55 "sipQtSqlQSqlTableModel.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 58 "sipQtSqlQSqlTableModel.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtSql/qsqlrecord.sip"
#include <qsqlrecord.h>
#line 61 "sipQtSqlQSqlTableModel.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 64 "sipQtSqlQSqlTableModel.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 67 "sipQtSqlQSqlTableModel.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 70 "sipQtSqlQSqlTableModel.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtSql/qsqlerror.sip"
#include <qsqlerror.h>
#line 73 "sipQtSqlQSqlTableModel.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 76 "sipQtSqlQSqlTableModel.cpp"
#line 149 "/home/maemo/python-qt4-4.7/sip/QtCore/qhash.sip"
#include <qmap.h>
#line 79 "sipQtSqlQSqlTableModel.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 82 "sipQtSqlQSqlTableModel.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 85 "sipQtSqlQSqlTableModel.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 88 "sipQtSqlQSqlTableModel.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 91 "sipQtSqlQSqlTableModel.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 94 "sipQtSqlQSqlTableModel.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 97 "sipQtSqlQSqlTableModel.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 100 "sipQtSqlQSqlTableModel.cpp"
#line 149 "/home/maemo/python-qt4-4.7/sip/QtCore/qmap.sip"
#include <qmap.h>
#line 103 "sipQtSqlQSqlTableModel.cpp"
#line 131 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 106 "sipQtSqlQSqlTableModel.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 109 "sipQtSqlQSqlTableModel.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 112 "sipQtSqlQSqlTableModel.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 115 "sipQtSqlQSqlTableModel.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 118 "sipQtSqlQSqlTableModel.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 121 "sipQtSqlQSqlTableModel.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 124 "sipQtSqlQSqlTableModel.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 127 "sipQtSqlQSqlTableModel.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 130 "sipQtSqlQSqlTableModel.cpp"


class sipQSqlTableModel : public QSqlTableModel
{
public:
    sipQSqlTableModel(QObject *,QSqlDatabase);
    virtual ~sipQSqlTableModel();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool select();
    void setTable(const QString&);
    Qt::ItemFlags flags(const QModelIndex&) const;
    QVariant data(const QModelIndex&,int) const;
    bool setData(const QModelIndex&,const QVariant&,int);
    QVariant headerData(int,Qt::Orientation,int) const;
    void clear();
    void setEditStrategy(QSqlTableModel::EditStrategy);
    void sort(int,Qt::SortOrder);
    void setSort(int,Qt::SortOrder);
    void setFilter(const QString&);
    int rowCount(const QModelIndex&) const;
    bool removeColumns(int,int,const QModelIndex&);
    bool removeRows(int,int,const QModelIndex&);
    bool insertRows(int,int,const QModelIndex&);
    void revertRow(int);
    bool submit();
    void revert();
    bool updateRowInTable(int,const QSqlRecord&);
    bool insertRowIntoTable(const QSqlRecord&);
    bool deleteRowFromTable(int);
    QString orderByClause() const;
    QString selectStatement() const;
    int columnCount(const QModelIndex&) const;
    bool setHeaderData(int,Qt::Orientation,const QVariant&,int);
    bool insertColumns(int,int,const QModelIndex&);
    void fetchMore(const QModelIndex&);
    bool canFetchMore(const QModelIndex&) const;
    void queryChange();
    QModelIndex index(int,int,const QModelIndex&) const;
    bool dropMimeData(const QMimeData *,Qt::DropAction,int,int,const QModelIndex&);
    QMap<int,QVariant> itemData(const QModelIndex&) const;
    bool setItemData(const QModelIndex&,const QMap<int,QVariant>&);
    QStringList mimeTypes() const;
    QMimeData * mimeData(const QModelIndexList&) const;
    Qt::DropActions supportedDropActions() const;
    QModelIndex buddy(const QModelIndex&) const;
    QModelIndexList match(const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags) const;
    QSize span(const QModelIndex&) const;
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSqlTableModel(const sipQSqlTableModel &);
    sipQSqlTableModel &operator = (const sipQSqlTableModel &);

    char sipPyMethods[46];
};

sipQSqlTableModel::sipQSqlTableModel(QObject *a0,QSqlDatabase a1): QSqlTableModel(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSqlTableModel::~sipQSqlTableModel()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQSqlTableModel::metaObject() const
{
    return sip_QtSql_qt_metaobject(sipPySelf,sipType_QSqlTableModel);
}

int sipQSqlTableModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QSqlTableModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtSql_qt_metacall(sipPySelf,sipType_QSqlTableModel,_c,_id,_a);

    return _id;
}

void *sipQSqlTableModel::qt_metacast(const char *_clname)
{
    return (sip_QtSql_qt_metacast && sip_QtSql_qt_metacast(sipPySelf,sipType_QSqlTableModel,_clname)) ? this : QSqlTableModel::qt_metacast(_clname);
}

bool sipQSqlTableModel::select()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_select);

    if (!meth)
        return QSqlTableModel::select();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSql_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

void sipQSqlTableModel::setTable(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_setTable);

    if (!meth)
    {
        QSqlTableModel::setTable(a0);
        return;
    }

    typedef void (*sipVH_QtCore_33)(sip_gilstate_t,PyObject *,const QString&);

    ((sipVH_QtCore_33)(sipModuleAPI_QtSql_QtCore->em_virthandlers[33]))(sipGILState,meth,a0);
}

Qt::ItemFlags sipQSqlTableModel::flags(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_flags);

    if (!meth)
        return QSqlTableModel::flags(a0);

    typedef Qt::ItemFlags (*sipVH_QtCore_50)(sip_gilstate_t,PyObject *,const QModelIndex&);

    return ((sipVH_QtCore_50)(sipModuleAPI_QtSql_QtCore->em_virthandlers[50]))(sipGILState,meth,a0);
}

QVariant sipQSqlTableModel::data(const QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_data);

    if (!meth)
        return QSqlTableModel::data(a0,a1);

    typedef QVariant (*sipVH_QtCore_60)(sip_gilstate_t,PyObject *,const QModelIndex&,int);

    return ((sipVH_QtCore_60)(sipModuleAPI_QtSql_QtCore->em_virthandlers[60]))(sipGILState,meth,a0,a1);
}

bool sipQSqlTableModel::setData(const QModelIndex& a0,const QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_setData);

    if (!meth)
        return QSqlTableModel::setData(a0,a1,a2);

    typedef bool (*sipVH_QtCore_59)(sip_gilstate_t,PyObject *,const QModelIndex&,const QVariant&,int);

    return ((sipVH_QtCore_59)(sipModuleAPI_QtSql_QtCore->em_virthandlers[59]))(sipGILState,meth,a0,a1,a2);
}

QVariant sipQSqlTableModel::headerData(int a0,Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_headerData);

    if (!meth)
        return QSqlTableModel::headerData(a0,a1,a2);

    typedef QVariant (*sipVH_QtCore_58)(sip_gilstate_t,PyObject *,int,Qt::Orientation,int);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtSql_QtCore->em_virthandlers[58]))(sipGILState,meth,a0,a1,a2);
}

void sipQSqlTableModel::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_clear);

    if (!meth)
    {
        QSqlTableModel::clear();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtSql_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQSqlTableModel::setEditStrategy(QSqlTableModel::EditStrategy a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_setEditStrategy);

    if (!meth)
    {
        QSqlTableModel::setEditStrategy(a0);
        return;
    }

    extern void sipVH_QtSql_2(sip_gilstate_t,PyObject *,QSqlTableModel::EditStrategy);

    sipVH_QtSql_2(sipGILState,meth,a0);
}

void sipQSqlTableModel::sort(int a0,Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_sort);

    if (!meth)
    {
        QSqlTableModel::sort(a0,a1);
        return;
    }

    typedef void (*sipVH_QtCore_49)(sip_gilstate_t,PyObject *,int,Qt::SortOrder);

    ((sipVH_QtCore_49)(sipModuleAPI_QtSql_QtCore->em_virthandlers[49]))(sipGILState,meth,a0,a1);
}

void sipQSqlTableModel::setSort(int a0,Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_setSort);

    if (!meth)
    {
        QSqlTableModel::setSort(a0,a1);
        return;
    }

    typedef void (*sipVH_QtCore_49)(sip_gilstate_t,PyObject *,int,Qt::SortOrder);

    ((sipVH_QtCore_49)(sipModuleAPI_QtSql_QtCore->em_virthandlers[49]))(sipGILState,meth,a0,a1);
}

void sipQSqlTableModel::setFilter(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_setFilter);

    if (!meth)
    {
        QSqlTableModel::setFilter(a0);
        return;
    }

    typedef void (*sipVH_QtCore_33)(sip_gilstate_t,PyObject *,const QString&);

    ((sipVH_QtCore_33)(sipModuleAPI_QtSql_QtCore->em_virthandlers[33]))(sipGILState,meth,a0);
}

int sipQSqlTableModel::rowCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_rowCount);

    if (!meth)
        return QSqlTableModel::rowCount(a0);

    typedef int (*sipVH_QtCore_43)(sip_gilstate_t,PyObject *,const QModelIndex&);

    return ((sipVH_QtCore_43)(sipModuleAPI_QtSql_QtCore->em_virthandlers[43]))(sipGILState,meth,a0);
}

bool sipQSqlTableModel::removeColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_removeColumns);

    if (!meth)
        return QSqlTableModel::removeColumns(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t,PyObject *,int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_QtSql_QtCore->em_virthandlers[52]))(sipGILState,meth,a0,a1,a2);
}

bool sipQSqlTableModel::removeRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_removeRows);

    if (!meth)
        return QSqlTableModel::removeRows(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t,PyObject *,int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_QtSql_QtCore->em_virthandlers[52]))(sipGILState,meth,a0,a1,a2);
}

bool sipQSqlTableModel::insertRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_insertRows);

    if (!meth)
        return QSqlTableModel::insertRows(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t,PyObject *,int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_QtSql_QtCore->em_virthandlers[52]))(sipGILState,meth,a0,a1,a2);
}

void sipQSqlTableModel::revertRow(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_revertRow);

    if (!meth)
    {
        QSqlTableModel::revertRow(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtSql_QtCore->em_virthandlers[4]))(sipGILState,meth,a0);
}

bool sipQSqlTableModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_submit);

    if (!meth)
        return QSqlTableModel::submit();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSql_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

void sipQSqlTableModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_revert);

    if (!meth)
    {
        QSqlTableModel::revert();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtSql_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

bool sipQSqlTableModel::updateRowInTable(int a0,const QSqlRecord& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_updateRowInTable);

    if (!meth)
        return QSqlTableModel::updateRowInTable(a0,a1);

    extern bool sipVH_QtSql_1(sip_gilstate_t,PyObject *,int,const QSqlRecord&);

    return sipVH_QtSql_1(sipGILState,meth,a0,a1);
}

bool sipQSqlTableModel::insertRowIntoTable(const QSqlRecord& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_insertRowIntoTable);

    if (!meth)
        return QSqlTableModel::insertRowIntoTable(a0);

    extern bool sipVH_QtSql_0(sip_gilstate_t,PyObject *,const QSqlRecord&);

    return sipVH_QtSql_0(sipGILState,meth,a0);
}

bool sipQSqlTableModel::deleteRowFromTable(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_deleteRowFromTable);

    if (!meth)
        return QSqlTableModel::deleteRowFromTable(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtCore_23)(sipModuleAPI_QtSql_QtCore->em_virthandlers[23]))(sipGILState,meth,a0);
}

QString sipQSqlTableModel::orderByClause() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_orderByClause);

    if (!meth)
        return QSqlTableModel::orderByClause();

    typedef QString (*sipVH_QtCore_62)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_62)(sipModuleAPI_QtSql_QtCore->em_virthandlers[62]))(sipGILState,meth);
}

QString sipQSqlTableModel::selectStatement() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_selectStatement);

    if (!meth)
        return QSqlTableModel::selectStatement();

    typedef QString (*sipVH_QtCore_62)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_62)(sipModuleAPI_QtSql_QtCore->em_virthandlers[62]))(sipGILState,meth);
}

int sipQSqlTableModel::columnCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_columnCount);

    if (!meth)
        return QSqlQueryModel::columnCount(a0);

    typedef int (*sipVH_QtCore_43)(sip_gilstate_t,PyObject *,const QModelIndex&);

    return ((sipVH_QtCore_43)(sipModuleAPI_QtSql_QtCore->em_virthandlers[43]))(sipGILState,meth,a0);
}

bool sipQSqlTableModel::setHeaderData(int a0,Qt::Orientation a1,const QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_setHeaderData);

    if (!meth)
        return QSqlQueryModel::setHeaderData(a0,a1,a2,a3);

    typedef bool (*sipVH_QtCore_57)(sip_gilstate_t,PyObject *,int,Qt::Orientation,const QVariant&,int);

    return ((sipVH_QtCore_57)(sipModuleAPI_QtSql_QtCore->em_virthandlers[57]))(sipGILState,meth,a0,a1,a2,a3);
}

bool sipQSqlTableModel::insertColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_insertColumns);

    if (!meth)
        return QSqlQueryModel::insertColumns(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t,PyObject *,int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_QtSql_QtCore->em_virthandlers[52]))(sipGILState,meth,a0,a1,a2);
}

void sipQSqlTableModel::fetchMore(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_fetchMore);

    if (!meth)
    {
        QSqlQueryModel::fetchMore(a0);
        return;
    }

    typedef void (*sipVH_QtCore_51)(sip_gilstate_t,PyObject *,const QModelIndex&);

    ((sipVH_QtCore_51)(sipModuleAPI_QtSql_QtCore->em_virthandlers[51]))(sipGILState,meth,a0);
}

bool sipQSqlTableModel::canFetchMore(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_canFetchMore);

    if (!meth)
        return QSqlQueryModel::canFetchMore(a0);

    typedef bool (*sipVH_QtCore_42)(sip_gilstate_t,PyObject *,const QModelIndex&);

    return ((sipVH_QtCore_42)(sipModuleAPI_QtSql_QtCore->em_virthandlers[42]))(sipGILState,meth,a0);
}

void sipQSqlTableModel::queryChange()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_queryChange);

    if (!meth)
    {
        QSqlQueryModel::queryChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtSql_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

QModelIndex sipQSqlTableModel::index(int a0,int a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_index);

    if (!meth)
        return QAbstractTableModel::index(a0,a1,a2);

    typedef QModelIndex (*sipVH_QtCore_46)(sip_gilstate_t,PyObject *,int,int,const QModelIndex&);

    return ((sipVH_QtCore_46)(sipModuleAPI_QtSql_QtCore->em_virthandlers[46]))(sipGILState,meth,a0,a1,a2);
}

bool sipQSqlTableModel::dropMimeData(const QMimeData *a0,Qt::DropAction a1,int a2,int a3,const QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_dropMimeData);

    if (!meth)
        return QAbstractTableModel::dropMimeData(a0,a1,a2,a3,a4);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t,PyObject *,const QMimeData *,Qt::DropAction,int,int,const QModelIndex&);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtSql_QtCore->em_virthandlers[45]))(sipGILState,meth,a0,a1,a2,a3,a4);
}

QMap<int,QVariant> sipQSqlTableModel::itemData(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_itemData);

    if (!meth)
        return QAbstractItemModel::itemData(a0);

    typedef QMap<int,QVariant> (*sipVH_QtCore_56)(sip_gilstate_t,PyObject *,const QModelIndex&);

    return ((sipVH_QtCore_56)(sipModuleAPI_QtSql_QtCore->em_virthandlers[56]))(sipGILState,meth,a0);
}

bool sipQSqlTableModel::setItemData(const QModelIndex& a0,const QMap<int,QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_setItemData);

    if (!meth)
        return QAbstractItemModel::setItemData(a0,a1);

    typedef bool (*sipVH_QtCore_55)(sip_gilstate_t,PyObject *,const QModelIndex&,const QMap<int,QVariant>&);

    return ((sipVH_QtCore_55)(sipModuleAPI_QtSql_QtCore->em_virthandlers[55]))(sipGILState,meth,a0,a1);
}

QStringList sipQSqlTableModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_mimeTypes);

    if (!meth)
        return QAbstractItemModel::mimeTypes();

    typedef QStringList (*sipVH_QtCore_27)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_27)(sipModuleAPI_QtSql_QtCore->em_virthandlers[27]))(sipGILState,meth);
}

QMimeData * sipQSqlTableModel::mimeData(const QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_mimeData);

    if (!meth)
        return QAbstractItemModel::mimeData(a0);

    typedef QMimeData * (*sipVH_QtCore_54)(sip_gilstate_t,PyObject *,const QList<QModelIndex>&);

    return ((sipVH_QtCore_54)(sipModuleAPI_QtSql_QtCore->em_virthandlers[54]))(sipGILState,meth,a0);
}

Qt::DropActions sipQSqlTableModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!meth)
        return QAbstractItemModel::supportedDropActions();

    typedef Qt::DropActions (*sipVH_QtCore_53)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_53)(sipModuleAPI_QtSql_QtCore->em_virthandlers[53]))(sipGILState,meth);
}

QModelIndex sipQSqlTableModel::buddy(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_buddy);

    if (!meth)
        return QAbstractItemModel::buddy(a0);

    typedef QModelIndex (*sipVH_QtCore_44)(sip_gilstate_t,PyObject *,const QModelIndex&);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtSql_QtCore->em_virthandlers[44]))(sipGILState,meth,a0);
}

QModelIndexList sipQSqlTableModel::match(const QModelIndex& a0,int a1,const QVariant& a2,int a3,Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_match);

    if (!meth)
        return QAbstractItemModel::match(a0,a1,a2,a3,a4);

    typedef QList<QModelIndex> (*sipVH_QtCore_48)(sip_gilstate_t,PyObject *,const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags);

    return ((sipVH_QtCore_48)(sipModuleAPI_QtSql_QtCore->em_virthandlers[48]))(sipGILState,meth,a0,a1,a2,a3,a4);
}

QSize sipQSqlTableModel::span(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_span);

    if (!meth)
        return QAbstractItemModel::span(a0);

    typedef QSize (*sipVH_QtCore_47)(sip_gilstate_t,PyObject *,const QModelIndex&);

    return ((sipVH_QtCore_47)(sipModuleAPI_QtSql_QtCore->em_virthandlers[47]))(sipGILState,meth,a0);
}

bool sipQSqlTableModel::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtSql_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQSqlTableModel::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtSql_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQSqlTableModel::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtSql_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQSqlTableModel::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtSql_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQSqlTableModel::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtSql_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQSqlTableModel::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtSql_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQSqlTableModel::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtSql_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QSqlTableModel_select, "QSqlTableModel.select() -> bool");

extern "C" {static PyObject *meth_QSqlTableModel_select(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_select(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlTableModel, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlTableModel::select() : sipCpp->select());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_select, doc_QSqlTableModel_select);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_setTable, "QSqlTableModel.setTable(QString)");

extern "C" {static PyObject *meth_QSqlTableModel_setTable(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_setTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlTableModel, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QSqlTableModel::setTable(*a0) : sipCpp->setTable(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_setTable, doc_QSqlTableModel_setTable);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_tableName, "QSqlTableModel.tableName() -> QString");

extern "C" {static PyObject *meth_QSqlTableModel_tableName(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_tableName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlTableModel, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->tableName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_tableName, doc_QSqlTableModel_tableName);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_flags, "QSqlTableModel.flags(QModelIndex) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QSqlTableModel_flags(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSqlTableModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            Qt::ItemFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::ItemFlags((sipSelfWasArg ? sipCpp->QSqlTableModel::flags(*a0) : sipCpp->flags(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_flags, doc_QSqlTableModel_flags);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_data, "QSqlTableModel.data(QModelIndex, int role=Qt.DisplayRole) -> QVariant");

extern "C" {static PyObject *meth_QSqlTableModel_data(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_data(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        int a1 = Qt::DisplayRole;
        QSqlTableModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_QSqlTableModel, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QSqlTableModel::data(*a0,a1) : sipCpp->data(*a0,a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_data, doc_QSqlTableModel_data);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_setData, "QSqlTableModel.setData(QModelIndex, QVariant, int role=Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QSqlTableModel_setData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_setData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        const QVariant * a1;
        int a1State = 0;
        int a2 = Qt::EditRole;
        QSqlTableModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1|i", &sipSelf, sipType_QSqlTableModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QVariant,&a1, &a1State, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlTableModel::setData(*a0,*a1,a2) : sipCpp->setData(*a0,*a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_setData, doc_QSqlTableModel_setData);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_headerData, "QSqlTableModel.headerData(int, Qt.Orientation, int role=Qt.DisplayRole) -> QVariant");

extern "C" {static PyObject *meth_QSqlTableModel_headerData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_headerData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::Orientation a1;
        int a2 = Qt::DisplayRole;
        QSqlTableModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiE|i", &sipSelf, sipType_QSqlTableModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, &a2))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QSqlTableModel::headerData(a0,a1,a2) : sipCpp->headerData(a0,a1,a2)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_headerData, doc_QSqlTableModel_headerData);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_isDirty, "QSqlTableModel.isDirty(QModelIndex) -> bool");

extern "C" {static PyObject *meth_QSqlTableModel_isDirty(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_isDirty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex * a0;
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSqlTableModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDirty(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_isDirty, doc_QSqlTableModel_isDirty);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_clear, "QSqlTableModel.clear()");

extern "C" {static PyObject *meth_QSqlTableModel_clear(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlTableModel, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QSqlTableModel::clear() : sipCpp->clear());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_clear, doc_QSqlTableModel_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_setEditStrategy, "QSqlTableModel.setEditStrategy(QSqlTableModel.EditStrategy)");

extern "C" {static PyObject *meth_QSqlTableModel_setEditStrategy(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_setEditStrategy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlTableModel::EditStrategy a0;
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSqlTableModel, &sipCpp, sipType_QSqlTableModel_EditStrategy, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QSqlTableModel::setEditStrategy(a0) : sipCpp->setEditStrategy(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_setEditStrategy, doc_QSqlTableModel_setEditStrategy);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_editStrategy, "QSqlTableModel.editStrategy() -> QSqlTableModel.EditStrategy");

extern "C" {static PyObject *meth_QSqlTableModel_editStrategy(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_editStrategy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlTableModel, &sipCpp))
        {
            QSqlTableModel::EditStrategy sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->editStrategy();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QSqlTableModel_EditStrategy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_editStrategy, doc_QSqlTableModel_editStrategy);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_primaryKey, "QSqlTableModel.primaryKey() -> QSqlIndex");

extern "C" {static PyObject *meth_QSqlTableModel_primaryKey(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_primaryKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlTableModel, &sipCpp))
        {
            QSqlIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSqlIndex(sipCpp->primaryKey());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSqlIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_primaryKey, doc_QSqlTableModel_primaryKey);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_database, "QSqlTableModel.database() -> QSqlDatabase");

extern "C" {static PyObject *meth_QSqlTableModel_database(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_database(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlTableModel, &sipCpp))
        {
            QSqlDatabase *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSqlDatabase(sipCpp->database());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSqlDatabase,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_database, doc_QSqlTableModel_database);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_fieldIndex, "QSqlTableModel.fieldIndex(QString) -> int");

extern "C" {static PyObject *meth_QSqlTableModel_fieldIndex(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_fieldIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlTableModel, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fieldIndex(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_fieldIndex, doc_QSqlTableModel_fieldIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_sort, "QSqlTableModel.sort(int, Qt.SortOrder)");

extern "C" {static PyObject *meth_QSqlTableModel_sort(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_sort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::SortOrder a1;
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QSqlTableModel, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QSqlTableModel::sort(a0,a1) : sipCpp->sort(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_sort, doc_QSqlTableModel_sort);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_setSort, "QSqlTableModel.setSort(int, Qt.SortOrder)");

extern "C" {static PyObject *meth_QSqlTableModel_setSort(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_setSort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::SortOrder a1;
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QSqlTableModel, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QSqlTableModel::setSort(a0,a1) : sipCpp->setSort(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_setSort, doc_QSqlTableModel_setSort);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_filter, "QSqlTableModel.filter() -> QString");

extern "C" {static PyObject *meth_QSqlTableModel_filter(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_filter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlTableModel, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->filter());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_filter, doc_QSqlTableModel_filter);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_setFilter, "QSqlTableModel.setFilter(QString)");

extern "C" {static PyObject *meth_QSqlTableModel_setFilter(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_setFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlTableModel, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QSqlTableModel::setFilter(*a0) : sipCpp->setFilter(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_setFilter, doc_QSqlTableModel_setFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_rowCount, "QSqlTableModel.rowCount(QModelIndex parent=QModelIndex()) -> int");

extern "C" {static PyObject *meth_QSqlTableModel_rowCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_rowCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex& a0def = QModelIndex();
        const QModelIndex * a0 = &a0def;
        QSqlTableModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QSqlTableModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlTableModel::rowCount(*a0) : sipCpp->rowCount(*a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_rowCount, doc_QSqlTableModel_rowCount);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_removeColumns, "QSqlTableModel.removeColumns(int, int, QModelIndex parent=QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QSqlTableModel_removeColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_removeColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex * a2 = &a2def;
        QSqlTableModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QSqlTableModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlTableModel::removeColumns(a0,a1,*a2) : sipCpp->removeColumns(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_removeColumns, doc_QSqlTableModel_removeColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_removeRows, "QSqlTableModel.removeRows(int, int, QModelIndex parent=QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QSqlTableModel_removeRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_removeRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex * a2 = &a2def;
        QSqlTableModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QSqlTableModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlTableModel::removeRows(a0,a1,*a2) : sipCpp->removeRows(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_removeRows, doc_QSqlTableModel_removeRows);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_insertRows, "QSqlTableModel.insertRows(int, int, QModelIndex parent=QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QSqlTableModel_insertRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_insertRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex * a2 = &a2def;
        QSqlTableModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QSqlTableModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlTableModel::insertRows(a0,a1,*a2) : sipCpp->insertRows(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_insertRows, doc_QSqlTableModel_insertRows);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_insertRecord, "QSqlTableModel.insertRecord(int, QSqlRecord) -> bool");

extern "C" {static PyObject *meth_QSqlTableModel_insertRecord(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_insertRecord(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QSqlRecord * a1;
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QSqlTableModel, &sipCpp, &a0, sipType_QSqlRecord, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->insertRecord(a0,*a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_insertRecord, doc_QSqlTableModel_insertRecord);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_setRecord, "QSqlTableModel.setRecord(int, QSqlRecord) -> bool");

extern "C" {static PyObject *meth_QSqlTableModel_setRecord(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_setRecord(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QSqlRecord * a1;
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QSqlTableModel, &sipCpp, &a0, sipType_QSqlRecord, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setRecord(a0,*a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_setRecord, doc_QSqlTableModel_setRecord);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_revertRow, "QSqlTableModel.revertRow(int)");

extern "C" {static PyObject *meth_QSqlTableModel_revertRow(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_revertRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSqlTableModel, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QSqlTableModel::revertRow(a0) : sipCpp->revertRow(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_revertRow, doc_QSqlTableModel_revertRow);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_submit, "QSqlTableModel.submit() -> bool");

extern "C" {static PyObject *meth_QSqlTableModel_submit(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_submit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlTableModel, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlTableModel::submit() : sipCpp->submit());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_submit, doc_QSqlTableModel_submit);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_revert, "QSqlTableModel.revert()");

extern "C" {static PyObject *meth_QSqlTableModel_revert(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_revert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlTableModel, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QSqlTableModel::revert() : sipCpp->revert());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_revert, doc_QSqlTableModel_revert);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_submitAll, "QSqlTableModel.submitAll() -> bool");

extern "C" {static PyObject *meth_QSqlTableModel_submitAll(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_submitAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlTableModel, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->submitAll();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_submitAll, doc_QSqlTableModel_submitAll);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_revertAll, "QSqlTableModel.revertAll()");

extern "C" {static PyObject *meth_QSqlTableModel_revertAll(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_revertAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlTableModel, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->revertAll();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_revertAll, doc_QSqlTableModel_revertAll);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_updateRowInTable, "QSqlTableModel.updateRowInTable(int, QSqlRecord) -> bool");

extern "C" {static PyObject *meth_QSqlTableModel_updateRowInTable(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_updateRowInTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QSqlRecord * a1;
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piJ9", &sipSelf, sipType_QSqlTableModel, &sipCpp, &a0, sipType_QSqlRecord, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlTableModel::updateRowInTable(a0,*a1) : sipCpp->updateRowInTable(a0,*a1));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_updateRowInTable, doc_QSqlTableModel_updateRowInTable);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_insertRowIntoTable, "QSqlTableModel.insertRowIntoTable(QSqlRecord) -> bool");

extern "C" {static PyObject *meth_QSqlTableModel_insertRowIntoTable(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_insertRowIntoTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSqlRecord * a0;
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QSqlTableModel, &sipCpp, sipType_QSqlRecord, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlTableModel::insertRowIntoTable(*a0) : sipCpp->insertRowIntoTable(*a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_insertRowIntoTable, doc_QSqlTableModel_insertRowIntoTable);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_deleteRowFromTable, "QSqlTableModel.deleteRowFromTable(int) -> bool");

extern "C" {static PyObject *meth_QSqlTableModel_deleteRowFromTable(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_deleteRowFromTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QSqlTableModel, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlTableModel::deleteRowFromTable(a0) : sipCpp->deleteRowFromTable(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_deleteRowFromTable, doc_QSqlTableModel_deleteRowFromTable);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_orderByClause, "QSqlTableModel.orderByClause() -> QString");

extern "C" {static PyObject *meth_QSqlTableModel_orderByClause(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_orderByClause(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlTableModel, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((sipSelfWasArg ? sipCpp->QSqlTableModel::orderByClause() : sipCpp->orderByClause()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_orderByClause, doc_QSqlTableModel_orderByClause);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_selectStatement, "QSqlTableModel.selectStatement() -> QString");

extern "C" {static PyObject *meth_QSqlTableModel_selectStatement(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_selectStatement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlTableModel, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((sipSelfWasArg ? sipCpp->QSqlTableModel::selectStatement() : sipCpp->selectStatement()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_selectStatement, doc_QSqlTableModel_selectStatement);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_setPrimaryKey, "QSqlTableModel.setPrimaryKey(QSqlIndex)");

extern "C" {static PyObject *meth_QSqlTableModel_setPrimaryKey(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_setPrimaryKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlIndex * a0;
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QSqlTableModel, &sipCpp, sipType_QSqlIndex, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPrimaryKey(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_setPrimaryKey, doc_QSqlTableModel_setPrimaryKey);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_setQuery, "QSqlTableModel.setQuery(QSqlQuery)");

extern "C" {static PyObject *meth_QSqlTableModel_setQuery(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_setQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlQuery * a0;
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QSqlTableModel, &sipCpp, sipType_QSqlQuery, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setQuery(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_setQuery, doc_QSqlTableModel_setQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlTableModel_indexInQuery, "QSqlTableModel.indexInQuery(QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QSqlTableModel_indexInQuery(PyObject *, PyObject *);}
static PyObject *meth_QSqlTableModel_indexInQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex * a0;
        QSqlTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QSqlTableModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->indexInQuery(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlTableModel, sipName_indexInQuery, doc_QSqlTableModel_indexInQuery);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSqlTableModel(void *, const sipTypeDef *);}
static void *cast_QSqlTableModel(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSqlTableModel)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QSqlQueryModel)->ctd_cast((QSqlQueryModel *)(QSqlTableModel *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSqlTableModel(void *, int);}
static void release_QSqlTableModel(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSqlTableModel *>(sipCppV);
    else
        delete reinterpret_cast<QSqlTableModel *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QSqlTableModel(sipSimpleWrapper *);}
static void dealloc_QSqlTableModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSqlTableModel *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSqlTableModel(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QSqlTableModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QSqlTableModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSqlTableModel *sipCpp = 0;

    {
        QObject * a0 = 0;
        QSqlDatabase a1def = QSqlDatabase();
        QSqlDatabase * a1 = &a1def;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_db,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JHJ9", sipType_QObject, &a0, sipOwner, sipType_QSqlDatabase, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSqlTableModel(a0,*a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSqlTableModel[] = {{19, 255, 1}};


static PyMethodDef methods_QSqlTableModel[] = {
    {SIP_MLNAME_CAST(sipName_clear), meth_QSqlTableModel_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_clear)},
    {SIP_MLNAME_CAST(sipName_data), (PyCFunction)meth_QSqlTableModel_data, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlTableModel_data)},
    {SIP_MLNAME_CAST(sipName_database), meth_QSqlTableModel_database, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_database)},
    {SIP_MLNAME_CAST(sipName_deleteRowFromTable), meth_QSqlTableModel_deleteRowFromTable, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_deleteRowFromTable)},
    {SIP_MLNAME_CAST(sipName_editStrategy), meth_QSqlTableModel_editStrategy, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_editStrategy)},
    {SIP_MLNAME_CAST(sipName_fieldIndex), meth_QSqlTableModel_fieldIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_fieldIndex)},
    {SIP_MLNAME_CAST(sipName_filter), meth_QSqlTableModel_filter, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_filter)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QSqlTableModel_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_flags)},
    {SIP_MLNAME_CAST(sipName_headerData), (PyCFunction)meth_QSqlTableModel_headerData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlTableModel_headerData)},
    {SIP_MLNAME_CAST(sipName_indexInQuery), meth_QSqlTableModel_indexInQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_indexInQuery)},
    {SIP_MLNAME_CAST(sipName_insertRecord), meth_QSqlTableModel_insertRecord, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_insertRecord)},
    {SIP_MLNAME_CAST(sipName_insertRowIntoTable), meth_QSqlTableModel_insertRowIntoTable, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_insertRowIntoTable)},
    {SIP_MLNAME_CAST(sipName_insertRows), (PyCFunction)meth_QSqlTableModel_insertRows, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlTableModel_insertRows)},
    {SIP_MLNAME_CAST(sipName_isDirty), meth_QSqlTableModel_isDirty, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_isDirty)},
    {SIP_MLNAME_CAST(sipName_orderByClause), meth_QSqlTableModel_orderByClause, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_orderByClause)},
    {SIP_MLNAME_CAST(sipName_primaryKey), meth_QSqlTableModel_primaryKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_primaryKey)},
    {SIP_MLNAME_CAST(sipName_removeColumns), (PyCFunction)meth_QSqlTableModel_removeColumns, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlTableModel_removeColumns)},
    {SIP_MLNAME_CAST(sipName_removeRows), (PyCFunction)meth_QSqlTableModel_removeRows, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlTableModel_removeRows)},
    {SIP_MLNAME_CAST(sipName_revert), meth_QSqlTableModel_revert, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_revert)},
    {SIP_MLNAME_CAST(sipName_revertAll), meth_QSqlTableModel_revertAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_revertAll)},
    {SIP_MLNAME_CAST(sipName_revertRow), meth_QSqlTableModel_revertRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_revertRow)},
    {SIP_MLNAME_CAST(sipName_rowCount), (PyCFunction)meth_QSqlTableModel_rowCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlTableModel_rowCount)},
    {SIP_MLNAME_CAST(sipName_select), meth_QSqlTableModel_select, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_select)},
    {SIP_MLNAME_CAST(sipName_selectStatement), meth_QSqlTableModel_selectStatement, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_selectStatement)},
    {SIP_MLNAME_CAST(sipName_setData), (PyCFunction)meth_QSqlTableModel_setData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlTableModel_setData)},
    {SIP_MLNAME_CAST(sipName_setEditStrategy), meth_QSqlTableModel_setEditStrategy, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_setEditStrategy)},
    {SIP_MLNAME_CAST(sipName_setFilter), meth_QSqlTableModel_setFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_setFilter)},
    {SIP_MLNAME_CAST(sipName_setPrimaryKey), meth_QSqlTableModel_setPrimaryKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_setPrimaryKey)},
    {SIP_MLNAME_CAST(sipName_setQuery), meth_QSqlTableModel_setQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_setQuery)},
    {SIP_MLNAME_CAST(sipName_setRecord), meth_QSqlTableModel_setRecord, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_setRecord)},
    {SIP_MLNAME_CAST(sipName_setSort), meth_QSqlTableModel_setSort, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_setSort)},
    {SIP_MLNAME_CAST(sipName_setTable), meth_QSqlTableModel_setTable, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_setTable)},
    {SIP_MLNAME_CAST(sipName_sort), meth_QSqlTableModel_sort, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_sort)},
    {SIP_MLNAME_CAST(sipName_submit), meth_QSqlTableModel_submit, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_submit)},
    {SIP_MLNAME_CAST(sipName_submitAll), meth_QSqlTableModel_submitAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_submitAll)},
    {SIP_MLNAME_CAST(sipName_tableName), meth_QSqlTableModel_tableName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_tableName)},
    {SIP_MLNAME_CAST(sipName_updateRowInTable), meth_QSqlTableModel_updateRowInTable, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlTableModel_updateRowInTable)}
};

static sipEnumMemberDef enummembers_QSqlTableModel[] = {
    {sipName_OnFieldChange, QSqlTableModel::OnFieldChange, 27},
    {sipName_OnManualSubmit, QSqlTableModel::OnManualSubmit, 27},
    {sipName_OnRowChange, QSqlTableModel::OnRowChange, 27},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QSqlTableModel[] = {
    {"beforeDelete(int)", "\1QSqlTableModel.beforeDelete(int)", 0},
    {"beforeUpdate(int,QSqlRecord&)", "\1QSqlTableModel.beforeUpdate(int, QSqlRecord)", 0},
    {"beforeInsert(QSqlRecord&)", "\1QSqlTableModel.beforeInsert(QSqlRecord)", 0},
    {"primeInsert(int,QSqlRecord&)", "\1QSqlTableModel.primeInsert(int, QSqlRecord)", 0},
    {0, 0, 0}
};

PyDoc_STRVAR(doc_QSqlTableModel, "\1QSqlTableModel(QObject parent=None, QSqlDatabase db=QSqlDatabase())");


pyqt4ClassTypeDef sipTypeDef_QtSql_QSqlTableModel = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QSqlTableModel,
        {0}
    },
    {
        sipNameNr_QSqlTableModel,
        {0, 0, 1},
        37, methods_QSqlTableModel,
        3, enummembers_QSqlTableModel,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSqlTableModel,
    -1,
    -1,
    supers_QSqlTableModel,
    0,
    init_QSqlTableModel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSqlTableModel,
    0,
    0,
    0,
    release_QSqlTableModel,
    cast_QSqlTableModel,
    0,
    0,
    0
},
    &QSqlTableModel::staticMetaObject,
    0,
    pyqt4_signals_QSqlTableModel
};

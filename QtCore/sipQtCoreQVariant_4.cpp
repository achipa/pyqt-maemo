/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:00:59 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 39 "sipQtCoreQVariant_4.cpp"



extern "C" {static void assign_QVariant_4(void *, SIP_SSIZE_T, const void *);}
static void assign_QVariant_4(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QVariant *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QVariant *>(sipSrc);
}


extern "C" {static void *array_QVariant_4(SIP_SSIZE_T);}
static void *array_QVariant_4(SIP_SSIZE_T sipNrElem)
{
    return new QVariant[sipNrElem];
}


extern "C" {static void *copy_QVariant_4(const void *, SIP_SSIZE_T);}
static void *copy_QVariant_4(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QVariant(reinterpret_cast<const QVariant *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVariant_4(void *, int);}
static void release_QVariant_4(void *ptr, int)
{
    Py_BEGIN_ALLOW_THREADS
    delete reinterpret_cast<QVariant *>(ptr);
    Py_END_ALLOW_THREADS
}



extern "C" {static int convertTo_QVariant_4(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVariant_4(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QVariant **sipCppPtr = reinterpret_cast<QVariant **>(sipCppPtrV);

#line 45 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
    if (!sipIsErr)
        // We can always convert to a QVariant.
        return 1;

    QVariant var = qpycore_PyObject_AsQVariant(sipPy, sipIsErr);

    if (*sipIsErr)
        return 0;

    *sipCppPtr = new QVariant(var);

    return sipGetState(sipTransferObj);
#line 93 "sipQtCoreQVariant_4.cpp"
}


extern "C" {static PyObject *convertFrom_QVariant_4(void *, PyObject *);}
static PyObject *convertFrom_QVariant_4(void *sipCppV,PyObject *)
{
   QVariant *sipCpp = reinterpret_cast<QVariant *>(sipCppV);

#line 60 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
    return qpycore_PyObject_FromQVariant(*sipCpp);
#line 104 "sipQtCoreQVariant_4.cpp"
}


extern "C" {static PyObject *meth_QVariant_4_nameToType(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_nameToType(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const char * a0;

        static const char *sipKwdList[] = {
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "s", &a0))
        {
            QVariant::Type sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QVariant::nameToType(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QVariant_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_nameToType, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_4_typeToName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_typeToName(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant::Type a0;

        static const char *sipKwdList[] = {
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "E", sipType_QVariant_Type, &a0))
        {
            const char *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QVariant::typeToName(a0);
            Py_END_ALLOW_THREADS

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_typeToName, NULL);

    return NULL;
}


static PyMethodDef methods_QVariant_4[] = {
    {SIP_MLNAME_CAST(sipName_nameToType), (PyCFunction)meth_QVariant_4_nameToType, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_typeToName), (PyCFunction)meth_QVariant_4_typeToName, METH_VARARGS|METH_KEYWORDS, NULL}
};

static sipEnumMemberDef enummembers_QVariant_4[] = {
    {sipName_BitArray, QVariant::BitArray, 233},
    {sipName_Bitmap, QVariant::Bitmap, 233},
    {sipName_Bool, QVariant::Bool, 233},
    {sipName_Brush, QVariant::Brush, 233},
    {sipName_ByteArray, QVariant::ByteArray, 233},
    {sipName_Char, QVariant::Char, 233},
    {sipName_Color, QVariant::Color, 233},
    {sipName_Cursor, QVariant::Cursor, 233},
    {sipName_Date, QVariant::Date, 233},
    {sipName_DateTime, QVariant::DateTime, 233},
    {sipName_Double, QVariant::Double, 233},
    {sipName_Font, QVariant::Font, 233},
    {sipName_Hash, QVariant::Hash, 233},
    {sipName_Icon, QVariant::Icon, 233},
    {sipName_Image, QVariant::Image, 233},
    {sipName_Int, QVariant::Int, 233},
    {sipName_Invalid, QVariant::Invalid, 233},
    {sipName_KeySequence, QVariant::KeySequence, 233},
    {sipName_Line, QVariant::Line, 233},
    {sipName_LineF, QVariant::LineF, 233},
    {sipName_List, QVariant::List, 233},
    {sipName_Locale, QVariant::Locale, 233},
    {sipName_LongLong, QVariant::LongLong, 233},
    {sipName_Map, QVariant::Map, 233},
    {sipName_Matrix, QVariant::Matrix, 233},
    {sipName_Palette, QVariant::Palette, 233},
    {sipName_Pen, QVariant::Pen, 233},
    {sipName_Pixmap, QVariant::Pixmap, 233},
    {sipName_Point, QVariant::Point, 233},
    {sipName_PointF, QVariant::PointF, 233},
    {sipName_Polygon, QVariant::Polygon, 233},
    {sipName_Rect, QVariant::Rect, 233},
    {sipName_RectF, QVariant::RectF, 233},
    {sipName_RegExp, QVariant::RegExp, 233},
    {sipName_Region, QVariant::Region, 233},
    {sipName_Size, QVariant::Size, 233},
    {sipName_SizeF, QVariant::SizeF, 233},
    {sipName_SizePolicy, QVariant::SizePolicy, 233},
    {sipName_String, QVariant::String, 233},
    {sipName_StringList, QVariant::StringList, 233},
    {sipName_TextFormat, QVariant::TextFormat, 233},
    {sipName_TextLength, QVariant::TextLength, 233},
    {sipName_Time, QVariant::Time, 233},
    {sipName_Transform, QVariant::Transform, 233},
    {sipName_UInt, QVariant::UInt, 233},
    {sipName_ULongLong, QVariant::ULongLong, 233},
    {sipName_Url, QVariant::Url, 233},
    {sipName_UserType, QVariant::UserType, 233},
};


sipMappedTypeDef sipTypeDef_QtCore_QVariant_4 = {
    {
        4,
        &sipTypeDef_QtCore_QVariant_5.super.ctd_base,
        0,
        SIP_TYPE_ALLOW_NONE|SIP_TYPE_MAPPED,
        sipNameNr_QVariant,
        {0}
    },
    {
        sipNameNr_QVariant,
        {0, 0, 1},
        2, methods_QVariant_4,
        48, enummembers_QVariant_4,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVariant_4,
    array_QVariant_4,
    copy_QVariant_4,
    release_QVariant_4,
    convertTo_QVariant_4,
    convertFrom_QVariant_4
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:00:59 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 44 "/home/maemo/python-qt4-4.7/sip/QtCore/qprocess.sip"
#include <qprocess.h>
#line 39 "sipQtCoreQProcess.cpp"

#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtCoreQProcess.cpp"
#line 216 "/home/maemo/python-qt4-4.7/sip/QtCore/qprocess.sip"
#include <qprocess.h>
#line 46 "sipQtCoreQProcess.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 49 "sipQtCoreQProcess.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 52 "sipQtCoreQProcess.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 55 "sipQtCoreQProcess.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 58 "sipQtCoreQProcess.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 61 "sipQtCoreQProcess.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 64 "sipQtCoreQProcess.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 67 "sipQtCoreQProcess.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 70 "sipQtCoreQProcess.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 73 "sipQtCoreQProcess.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 76 "sipQtCoreQProcess.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 79 "sipQtCoreQProcess.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 82 "sipQtCoreQProcess.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 85 "sipQtCoreQProcess.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 88 "sipQtCoreQProcess.cpp"


class sipQProcess : public QProcess
{
public:
    sipQProcess(QObject *);
    virtual ~sipQProcess();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool waitForReadyRead(int);
    bool waitForBytesWritten(int);
    qint64 bytesAvailable() const;
    qint64 bytesToWrite() const;
    bool isSequential() const;
    bool canReadLine() const;
    void close();
    bool atEnd() const;
    void setupChildProcess();
    qint64 readData(char *,qint64);
    qint64 writeData(const char *,PY_LONG_LONG);
    bool open(QIODevice::OpenMode);
    qint64 pos() const;
    qint64 size() const;
    bool seek(qint64);
    bool reset();
    qint64 readLineData(char *,qint64);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQProcess(const sipQProcess &);
    sipQProcess &operator = (const sipQProcess &);

    char sipPyMethods[24];
};

sipQProcess::sipQProcess(QObject *a0): QProcess(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQProcess::~sipQProcess()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQProcess::metaObject() const
{
    return sip_QtCore_qt_metaobject(sipPySelf,sipType_QProcess);
}

int sipQProcess::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QProcess::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QProcess,_c,_id,_a);

    return _id;
}

void *sipQProcess::qt_metacast(const char *_clname)
{
    return (sip_QtCore_qt_metacast && sip_QtCore_qt_metacast(sipPySelf,sipType_QProcess,_clname)) ? this : QProcess::qt_metacast(_clname);
}

bool sipQProcess::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_waitForReadyRead);

    if (!meth)
        return QProcess::waitForReadyRead(a0);

    extern bool sipVH_QtCore_23(sip_gilstate_t,PyObject *,int);

    return sipVH_QtCore_23(sipGILState,meth,a0);
}

bool sipQProcess::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_waitForBytesWritten);

    if (!meth)
        return QProcess::waitForBytesWritten(a0);

    extern bool sipVH_QtCore_23(sip_gilstate_t,PyObject *,int);

    return sipVH_QtCore_23(sipGILState,meth,a0);
}

qint64 sipQProcess::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_bytesAvailable);

    if (!meth)
        return QProcess::bytesAvailable();

    extern PY_LONG_LONG sipVH_QtCore_22(sip_gilstate_t,PyObject *);

    return sipVH_QtCore_22(sipGILState,meth);
}

qint64 sipQProcess::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_bytesToWrite);

    if (!meth)
        return QProcess::bytesToWrite();

    extern PY_LONG_LONG sipVH_QtCore_22(sip_gilstate_t,PyObject *);

    return sipVH_QtCore_22(sipGILState,meth);
}

bool sipQProcess::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_isSequential);

    if (!meth)
        return QProcess::isSequential();

    extern bool sipVH_QtCore_7(sip_gilstate_t,PyObject *);

    return sipVH_QtCore_7(sipGILState,meth);
}

bool sipQProcess::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_canReadLine);

    if (!meth)
        return QProcess::canReadLine();

    extern bool sipVH_QtCore_7(sip_gilstate_t,PyObject *);

    return sipVH_QtCore_7(sipGILState,meth);
}

void sipQProcess::close()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_close);

    if (!meth)
    {
        QProcess::close();
        return;
    }

    extern void sipVH_QtCore_11(sip_gilstate_t,PyObject *);

    sipVH_QtCore_11(sipGILState,meth);
}

bool sipQProcess::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_atEnd);

    if (!meth)
        return QProcess::atEnd();

    extern bool sipVH_QtCore_7(sip_gilstate_t,PyObject *);

    return sipVH_QtCore_7(sipGILState,meth);
}

void sipQProcess::setupChildProcess()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_setupChildProcess);

    if (!meth)
    {
        QProcess::setupChildProcess();
        return;
    }

    extern void sipVH_QtCore_11(sip_gilstate_t,PyObject *);

    sipVH_QtCore_11(sipGILState,meth);
}

qint64 sipQProcess::readData(char *a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_readData);

    if (!meth)
        return QProcess::readData(a0,a1);

    extern PY_LONG_LONG sipVH_QtCore_21(sip_gilstate_t,PyObject *,char *,PY_LONG_LONG);

    return sipVH_QtCore_21(sipGILState,meth,a0,a1);
}

qint64 sipQProcess::writeData(const char *a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_writeData);

    if (!meth)
        return QProcess::writeData(a0,a1);

    extern PY_LONG_LONG sipVH_QtCore_20(sip_gilstate_t,PyObject *,const char *,PY_LONG_LONG);

    return sipVH_QtCore_20(sipGILState,meth,a0,a1);
}

bool sipQProcess::open(QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_open);

    if (!meth)
        return QIODevice::open(a0);

    extern bool sipVH_QtCore_15(sip_gilstate_t,PyObject *,QIODevice::OpenMode);

    return sipVH_QtCore_15(sipGILState,meth,a0);
}

qint64 sipQProcess::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_pos);

    if (!meth)
        return QIODevice::pos();

    extern PY_LONG_LONG sipVH_QtCore_22(sip_gilstate_t,PyObject *);

    return sipVH_QtCore_22(sipGILState,meth);
}

qint64 sipQProcess::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_size);

    if (!meth)
        return QIODevice::size();

    extern PY_LONG_LONG sipVH_QtCore_22(sip_gilstate_t,PyObject *);

    return sipVH_QtCore_22(sipGILState,meth);
}

bool sipQProcess::seek(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_seek);

    if (!meth)
        return QIODevice::seek(a0);

    extern bool sipVH_QtCore_32(sip_gilstate_t,PyObject *,PY_LONG_LONG);

    return sipVH_QtCore_32(sipGILState,meth,a0);
}

bool sipQProcess::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_reset);

    if (!meth)
        return QIODevice::reset();

    extern bool sipVH_QtCore_7(sip_gilstate_t,PyObject *);

    return sipVH_QtCore_7(sipGILState,meth);
}

qint64 sipQProcess::readLineData(char *a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_readLineData);

    if (!meth)
        return QIODevice::readLineData(a0,a1);

    extern PY_LONG_LONG sipVH_QtCore_21(sip_gilstate_t,PyObject *,char *,PY_LONG_LONG);

    return sipVH_QtCore_21(sipGILState,meth,a0,a1);
}

bool sipQProcess::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t,PyObject *,QEvent *);

    return sipVH_QtCore_5(sipGILState,meth,a0);
}

bool sipQProcess::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    extern bool sipVH_QtCore_18(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return sipVH_QtCore_18(sipGILState,meth,a0,a1);
}

void sipQProcess::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t,PyObject *,QTimerEvent *);

    sipVH_QtCore_9(sipGILState,meth,a0);
}

void sipQProcess::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t,PyObject *,QChildEvent *);

    sipVH_QtCore_25(sipGILState,meth,a0);
}

void sipQProcess::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t,PyObject *,QEvent *);

    sipVH_QtCore_17(sipGILState,meth,a0);
}

void sipQProcess::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t,PyObject *,const char *);

    sipVH_QtCore_24(sipGILState,meth,a0);
}

void sipQProcess::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t,PyObject *,const char *);

    sipVH_QtCore_24(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QProcess_start, "QProcess.start(QString, QStringList, QIODevice.OpenMode mode=QIODevice.ReadWrite)\n"
    "QProcess.start(QString, QIODevice.OpenMode mode=QIODevice.ReadWrite)");

extern "C" {static PyObject *meth_QProcess_start(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_start(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        const QStringList * a1;
        int a1State = 0;
        QIODevice::OpenMode a2def = QIODevice::ReadWrite;
        QIODevice::OpenMode * a2 = &a2def;
        int a2State = 0;
        QProcess *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1|J1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State, sipType_QIODevice_OpenMode, &a2, &a2State))
        {
            sipCpp->start(*a0,*a1,*a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        QIODevice::OpenMode a1def = QIODevice::ReadWrite;
        QIODevice::OpenMode * a1 = &a1def;
        int a1State = 0;
        QProcess *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            sipCpp->start(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_start, doc_QProcess_start);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_readChannelMode, "QProcess.readChannelMode() -> QProcess.ProcessChannelMode");

extern "C" {static PyObject *meth_QProcess_readChannelMode(PyObject *, PyObject *);}
static PyObject *meth_QProcess_readChannelMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QProcess::ProcessChannelMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->readChannelMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QProcess_ProcessChannelMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_readChannelMode, doc_QProcess_readChannelMode);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setReadChannelMode, "QProcess.setReadChannelMode(QProcess.ProcessChannelMode)");

extern "C" {static PyObject *meth_QProcess_setReadChannelMode(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setReadChannelMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess::ProcessChannelMode a0;
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess_ProcessChannelMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setReadChannelMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setReadChannelMode, doc_QProcess_setReadChannelMode);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_readChannel, "QProcess.readChannel() -> QProcess.ProcessChannel");

extern "C" {static PyObject *meth_QProcess_readChannel(PyObject *, PyObject *);}
static PyObject *meth_QProcess_readChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QProcess::ProcessChannel sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->readChannel();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QProcess_ProcessChannel);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_readChannel, doc_QProcess_readChannel);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setReadChannel, "QProcess.setReadChannel(QProcess.ProcessChannel)");

extern "C" {static PyObject *meth_QProcess_setReadChannel(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setReadChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess::ProcessChannel a0;
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess_ProcessChannel, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setReadChannel(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setReadChannel, doc_QProcess_setReadChannel);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_closeReadChannel, "QProcess.closeReadChannel(QProcess.ProcessChannel)");

extern "C" {static PyObject *meth_QProcess_closeReadChannel(PyObject *, PyObject *);}
static PyObject *meth_QProcess_closeReadChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess::ProcessChannel a0;
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess_ProcessChannel, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->closeReadChannel(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_closeReadChannel, doc_QProcess_closeReadChannel);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_closeWriteChannel, "QProcess.closeWriteChannel()");

extern "C" {static PyObject *meth_QProcess_closeWriteChannel(PyObject *, PyObject *);}
static PyObject *meth_QProcess_closeWriteChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->closeWriteChannel();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_closeWriteChannel, doc_QProcess_closeWriteChannel);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_workingDirectory, "QProcess.workingDirectory() -> QString");

extern "C" {static PyObject *meth_QProcess_workingDirectory(PyObject *, PyObject *);}
static PyObject *meth_QProcess_workingDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->workingDirectory());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_workingDirectory, doc_QProcess_workingDirectory);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setWorkingDirectory, "QProcess.setWorkingDirectory(QString)");

extern "C" {static PyObject *meth_QProcess_setWorkingDirectory(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setWorkingDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWorkingDirectory(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setWorkingDirectory, doc_QProcess_setWorkingDirectory);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setEnvironment, "QProcess.setEnvironment(QStringList)");

extern "C" {static PyObject *meth_QProcess_setEnvironment(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setEnvironment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList * a0;
        int a0State = 0;
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEnvironment(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setEnvironment, doc_QProcess_setEnvironment);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_environment, "QProcess.environment() -> QStringList");

extern "C" {static PyObject *meth_QProcess_environment(PyObject *, PyObject *);}
static PyObject *meth_QProcess_environment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->environment());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_environment, doc_QProcess_environment);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_error, "QProcess.error() -> QProcess.ProcessError");

extern "C" {static PyObject *meth_QProcess_error(PyObject *, PyObject *);}
static PyObject *meth_QProcess_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QProcess::ProcessError sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->error();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QProcess_ProcessError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_error, doc_QProcess_error);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_state, "QProcess.state() -> QProcess.ProcessState");

extern "C" {static PyObject *meth_QProcess_state(PyObject *, PyObject *);}
static PyObject *meth_QProcess_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QProcess::ProcessState sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->state();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QProcess_ProcessState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_state, doc_QProcess_state);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_pid, "QProcess.pid() -> int");

extern "C" {static PyObject *meth_QProcess_pid(PyObject *, PyObject *);}
static PyObject *meth_QProcess_pid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            Q_PID sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pid();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_pid, doc_QProcess_pid);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_waitForStarted, "QProcess.waitForStarted(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QProcess_waitForStarted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_waitForStarted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 30000;
        QProcess *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QProcess, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForStarted(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_waitForStarted, doc_QProcess_waitForStarted);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_waitForReadyRead, "QProcess.waitForReadyRead(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QProcess_waitForReadyRead(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_waitForReadyRead(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
        QProcess *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QProcess, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QProcess::waitForReadyRead(a0) : sipCpp->waitForReadyRead(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_waitForReadyRead, doc_QProcess_waitForReadyRead);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_waitForBytesWritten, "QProcess.waitForBytesWritten(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QProcess_waitForBytesWritten(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_waitForBytesWritten(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
        QProcess *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QProcess, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QProcess::waitForBytesWritten(a0) : sipCpp->waitForBytesWritten(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_waitForBytesWritten, doc_QProcess_waitForBytesWritten);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_waitForFinished, "QProcess.waitForFinished(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QProcess_waitForFinished(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_waitForFinished(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 30000;
        QProcess *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QProcess, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForFinished(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_waitForFinished, doc_QProcess_waitForFinished);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_readAllStandardOutput, "QProcess.readAllStandardOutput() -> QByteArray");

extern "C" {static PyObject *meth_QProcess_readAllStandardOutput(PyObject *, PyObject *);}
static PyObject *meth_QProcess_readAllStandardOutput(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->readAllStandardOutput());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_readAllStandardOutput, doc_QProcess_readAllStandardOutput);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_readAllStandardError, "QProcess.readAllStandardError() -> QByteArray");

extern "C" {static PyObject *meth_QProcess_readAllStandardError(PyObject *, PyObject *);}
static PyObject *meth_QProcess_readAllStandardError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->readAllStandardError());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_readAllStandardError, doc_QProcess_readAllStandardError);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_exitCode, "QProcess.exitCode() -> int");

extern "C" {static PyObject *meth_QProcess_exitCode(PyObject *, PyObject *);}
static PyObject *meth_QProcess_exitCode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exitCode();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_exitCode, doc_QProcess_exitCode);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_exitStatus, "QProcess.exitStatus() -> QProcess.ExitStatus");

extern "C" {static PyObject *meth_QProcess_exitStatus(PyObject *, PyObject *);}
static PyObject *meth_QProcess_exitStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QProcess::ExitStatus sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exitStatus();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QProcess_ExitStatus);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_exitStatus, doc_QProcess_exitStatus);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_bytesAvailable, "QProcess.bytesAvailable() -> int");

extern "C" {static PyObject *meth_QProcess_bytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QProcess_bytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QProcess::bytesAvailable() : sipCpp->bytesAvailable());
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_bytesAvailable, doc_QProcess_bytesAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_bytesToWrite, "QProcess.bytesToWrite() -> int");

extern "C" {static PyObject *meth_QProcess_bytesToWrite(PyObject *, PyObject *);}
static PyObject *meth_QProcess_bytesToWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QProcess::bytesToWrite() : sipCpp->bytesToWrite());
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_bytesToWrite, doc_QProcess_bytesToWrite);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_isSequential, "QProcess.isSequential() -> bool");

extern "C" {static PyObject *meth_QProcess_isSequential(PyObject *, PyObject *);}
static PyObject *meth_QProcess_isSequential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QProcess::isSequential() : sipCpp->isSequential());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_isSequential, doc_QProcess_isSequential);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_canReadLine, "QProcess.canReadLine() -> bool");

extern "C" {static PyObject *meth_QProcess_canReadLine(PyObject *, PyObject *);}
static PyObject *meth_QProcess_canReadLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QProcess::canReadLine() : sipCpp->canReadLine());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_canReadLine, doc_QProcess_canReadLine);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_close, "QProcess.close()");

extern "C" {static PyObject *meth_QProcess_close(PyObject *, PyObject *);}
static PyObject *meth_QProcess_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QProcess::close() : sipCpp->close());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_close, doc_QProcess_close);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_atEnd, "QProcess.atEnd() -> bool");

extern "C" {static PyObject *meth_QProcess_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QProcess_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QProcess::atEnd() : sipCpp->atEnd());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_atEnd, doc_QProcess_atEnd);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_execute, "QProcess.execute(QString, QStringList) -> int\n"
    "QProcess.execute(QString) -> int");

extern "C" {static PyObject *meth_QProcess_execute(PyObject *, PyObject *);}
static PyObject *meth_QProcess_execute(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        const QStringList * a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QProcess::execute(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QProcess::execute(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_execute, doc_QProcess_execute);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_startDetached, "QProcess.startDetached(QString, QStringList, QString) -> (bool, int)\n"
    "QProcess.startDetached(QString, QStringList) -> bool\n"
    "QProcess.startDetached(QString) -> bool");

extern "C" {static PyObject *meth_QProcess_startDetached(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_startDetached(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        const QStringList * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        qint64 a3;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_pid,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1J1J1", sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QProcess::startDetached(*a0,*a1,*a2,&a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return sipBuildResult(0,"(bn)",sipRes,a3);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QStringList * a1;
        int a1State = 0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "J1J1", sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QProcess::startDetached(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QProcess::startDetached(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_startDetached, doc_QProcess_startDetached);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_systemEnvironment, "QProcess.systemEnvironment() -> QStringList");

extern "C" {static PyObject *meth_QProcess_systemEnvironment(PyObject *, PyObject *);}
static PyObject *meth_QProcess_systemEnvironment(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(QProcess::systemEnvironment());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_systemEnvironment, doc_QProcess_systemEnvironment);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_processChannelMode, "QProcess.processChannelMode() -> QProcess.ProcessChannelMode");

extern "C" {static PyObject *meth_QProcess_processChannelMode(PyObject *, PyObject *);}
static PyObject *meth_QProcess_processChannelMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QProcess::ProcessChannelMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->processChannelMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QProcess_ProcessChannelMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_processChannelMode, doc_QProcess_processChannelMode);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setProcessChannelMode, "QProcess.setProcessChannelMode(QProcess.ProcessChannelMode)");

extern "C" {static PyObject *meth_QProcess_setProcessChannelMode(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setProcessChannelMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess::ProcessChannelMode a0;
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess_ProcessChannelMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setProcessChannelMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setProcessChannelMode, doc_QProcess_setProcessChannelMode);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setStandardInputFile, "QProcess.setStandardInputFile(QString)");

extern "C" {static PyObject *meth_QProcess_setStandardInputFile(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setStandardInputFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStandardInputFile(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setStandardInputFile, doc_QProcess_setStandardInputFile);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setStandardOutputFile, "QProcess.setStandardOutputFile(QString, QIODevice.OpenMode mode=QIODevice.Truncate)");

extern "C" {static PyObject *meth_QProcess_setStandardOutputFile(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_setStandardOutputFile(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QIODevice::OpenMode a1def = QIODevice::Truncate;
        QIODevice::OpenMode * a1 = &a1def;
        int a1State = 0;
        QProcess *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStandardOutputFile(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setStandardOutputFile, doc_QProcess_setStandardOutputFile);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setStandardErrorFile, "QProcess.setStandardErrorFile(QString, QIODevice.OpenMode mode=QIODevice.Truncate)");

extern "C" {static PyObject *meth_QProcess_setStandardErrorFile(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_setStandardErrorFile(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QIODevice::OpenMode a1def = QIODevice::Truncate;
        QIODevice::OpenMode * a1 = &a1def;
        int a1State = 0;
        QProcess *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStandardErrorFile(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setStandardErrorFile, doc_QProcess_setStandardErrorFile);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setStandardOutputProcess, "QProcess.setStandardOutputProcess(QProcess)");

extern "C" {static PyObject *meth_QProcess_setStandardOutputProcess(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setStandardOutputProcess(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess * a0;
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStandardOutputProcess(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setStandardOutputProcess, doc_QProcess_setStandardOutputProcess);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_terminate, "QProcess.terminate()");

extern "C" {static PyObject *meth_QProcess_terminate(PyObject *, PyObject *);}
static PyObject *meth_QProcess_terminate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->terminate();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_terminate, doc_QProcess_terminate);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_kill, "QProcess.kill()");

extern "C" {static PyObject *meth_QProcess_kill(PyObject *, PyObject *);}
static PyObject *meth_QProcess_kill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->kill();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_kill, doc_QProcess_kill);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setProcessState, "QProcess.setProcessState(QProcess.ProcessState)");

extern "C" {static PyObject *meth_QProcess_setProcessState(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setProcessState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess::ProcessState a0;
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess_ProcessState, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setProcessState(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setProcessState, doc_QProcess_setProcessState);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setupChildProcess, "QProcess.setupChildProcess()");

extern "C" {static PyObject *meth_QProcess_setupChildProcess(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setupChildProcess(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QProcess, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QProcess::setupChildProcess() : sipCpp->setupChildProcess());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setupChildProcess, doc_QProcess_setupChildProcess);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_readData, "QProcess.readData(int) -> str");

extern "C" {static PyObject *meth_QProcess_readData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_readData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        QProcess *sipCpp;

        static const char *sipKwdList[] = {
            sipName_maxlen,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "pn", &sipSelf, sipType_QProcess, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 160 "/home/maemo/python-qt4-4.7/sip/QtCore/qprocess.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QProcess::readData(s, a0) : sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 2006 "sipQtCoreQProcess.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_readData, doc_QProcess_readData);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_writeData, "QProcess.writeData(str) -> int");

extern "C" {static PyObject *meth_QProcess_writeData(PyObject *, PyObject *);}
static PyObject *meth_QProcess_writeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const char * a0;
        SIP_SSIZE_T a1;
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pk", &sipSelf, sipType_QProcess, &sipCpp, &a0, &a1))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QProcess::writeData(a0,(PY_LONG_LONG)a1) : sipCpp->writeData(a0,(PY_LONG_LONG)a1));
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_writeData, doc_QProcess_writeData);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setProcessEnvironment, "QProcess.setProcessEnvironment(QProcessEnvironment)");

extern "C" {static PyObject *meth_QProcess_setProcessEnvironment(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setProcessEnvironment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QProcessEnvironment * a0;
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcessEnvironment, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setProcessEnvironment(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setProcessEnvironment, doc_QProcess_setProcessEnvironment);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_processEnvironment, "QProcess.processEnvironment() -> QProcessEnvironment");

extern "C" {static PyObject *meth_QProcess_processEnvironment(PyObject *, PyObject *);}
static PyObject *meth_QProcess_processEnvironment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QProcessEnvironment *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QProcessEnvironment(sipCpp->processEnvironment());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QProcessEnvironment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_processEnvironment, doc_QProcess_processEnvironment);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QProcess(void *, const sipTypeDef *);}
static void *cast_QProcess(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QProcess)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QIODevice)->ctd_cast((QIODevice *)(QProcess *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QProcess(void *, int);}
static void release_QProcess(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQProcess *>(sipCppV);
    else
        delete reinterpret_cast<QProcess *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QProcess(sipSimpleWrapper *);}
static void dealloc_QProcess(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQProcess *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QProcess(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QProcess(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QProcess(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQProcess *sipCpp = 0;

    {
        QObject * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQProcess(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QProcess[] = {{77, 255, 1}};


static PyMethodDef methods_QProcess[] = {
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QProcess_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_atEnd)},
    {SIP_MLNAME_CAST(sipName_bytesAvailable), meth_QProcess_bytesAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_bytesAvailable)},
    {SIP_MLNAME_CAST(sipName_bytesToWrite), meth_QProcess_bytesToWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_bytesToWrite)},
    {SIP_MLNAME_CAST(sipName_canReadLine), meth_QProcess_canReadLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_canReadLine)},
    {SIP_MLNAME_CAST(sipName_close), meth_QProcess_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_close)},
    {SIP_MLNAME_CAST(sipName_closeReadChannel), meth_QProcess_closeReadChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_closeReadChannel)},
    {SIP_MLNAME_CAST(sipName_closeWriteChannel), meth_QProcess_closeWriteChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_closeWriteChannel)},
    {SIP_MLNAME_CAST(sipName_environment), meth_QProcess_environment, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_environment)},
    {SIP_MLNAME_CAST(sipName_error), meth_QProcess_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_error)},
    {SIP_MLNAME_CAST(sipName_execute), meth_QProcess_execute, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_execute)},
    {SIP_MLNAME_CAST(sipName_exitCode), meth_QProcess_exitCode, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_exitCode)},
    {SIP_MLNAME_CAST(sipName_exitStatus), meth_QProcess_exitStatus, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_exitStatus)},
    {SIP_MLNAME_CAST(sipName_isSequential), meth_QProcess_isSequential, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_isSequential)},
    {SIP_MLNAME_CAST(sipName_kill), meth_QProcess_kill, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_kill)},
    {SIP_MLNAME_CAST(sipName_pid), meth_QProcess_pid, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_pid)},
    {SIP_MLNAME_CAST(sipName_processChannelMode), meth_QProcess_processChannelMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_processChannelMode)},
    {SIP_MLNAME_CAST(sipName_processEnvironment), meth_QProcess_processEnvironment, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_processEnvironment)},
    {SIP_MLNAME_CAST(sipName_readAllStandardError), meth_QProcess_readAllStandardError, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_readAllStandardError)},
    {SIP_MLNAME_CAST(sipName_readAllStandardOutput), meth_QProcess_readAllStandardOutput, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_readAllStandardOutput)},
    {SIP_MLNAME_CAST(sipName_readChannel), meth_QProcess_readChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_readChannel)},
    {SIP_MLNAME_CAST(sipName_readChannelMode), meth_QProcess_readChannelMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_readChannelMode)},
    {SIP_MLNAME_CAST(sipName_readData), (PyCFunction)meth_QProcess_readData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_readData)},
    {SIP_MLNAME_CAST(sipName_setEnvironment), meth_QProcess_setEnvironment, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setEnvironment)},
    {SIP_MLNAME_CAST(sipName_setProcessChannelMode), meth_QProcess_setProcessChannelMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setProcessChannelMode)},
    {SIP_MLNAME_CAST(sipName_setProcessEnvironment), meth_QProcess_setProcessEnvironment, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setProcessEnvironment)},
    {SIP_MLNAME_CAST(sipName_setProcessState), meth_QProcess_setProcessState, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setProcessState)},
    {SIP_MLNAME_CAST(sipName_setReadChannel), meth_QProcess_setReadChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setReadChannel)},
    {SIP_MLNAME_CAST(sipName_setReadChannelMode), meth_QProcess_setReadChannelMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setReadChannelMode)},
    {SIP_MLNAME_CAST(sipName_setStandardErrorFile), (PyCFunction)meth_QProcess_setStandardErrorFile, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_setStandardErrorFile)},
    {SIP_MLNAME_CAST(sipName_setStandardInputFile), meth_QProcess_setStandardInputFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setStandardInputFile)},
    {SIP_MLNAME_CAST(sipName_setStandardOutputFile), (PyCFunction)meth_QProcess_setStandardOutputFile, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_setStandardOutputFile)},
    {SIP_MLNAME_CAST(sipName_setStandardOutputProcess), meth_QProcess_setStandardOutputProcess, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setStandardOutputProcess)},
    {SIP_MLNAME_CAST(sipName_setWorkingDirectory), meth_QProcess_setWorkingDirectory, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setWorkingDirectory)},
    {SIP_MLNAME_CAST(sipName_setupChildProcess), meth_QProcess_setupChildProcess, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setupChildProcess)},
    {SIP_MLNAME_CAST(sipName_start), (PyCFunction)meth_QProcess_start, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_start)},
    {SIP_MLNAME_CAST(sipName_startDetached), (PyCFunction)meth_QProcess_startDetached, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_startDetached)},
    {SIP_MLNAME_CAST(sipName_state), meth_QProcess_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_state)},
    {SIP_MLNAME_CAST(sipName_systemEnvironment), meth_QProcess_systemEnvironment, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_systemEnvironment)},
    {SIP_MLNAME_CAST(sipName_terminate), meth_QProcess_terminate, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_terminate)},
    {SIP_MLNAME_CAST(sipName_waitForBytesWritten), (PyCFunction)meth_QProcess_waitForBytesWritten, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_waitForBytesWritten)},
    {SIP_MLNAME_CAST(sipName_waitForFinished), (PyCFunction)meth_QProcess_waitForFinished, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_waitForFinished)},
    {SIP_MLNAME_CAST(sipName_waitForReadyRead), (PyCFunction)meth_QProcess_waitForReadyRead, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_waitForReadyRead)},
    {SIP_MLNAME_CAST(sipName_waitForStarted), (PyCFunction)meth_QProcess_waitForStarted, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_waitForStarted)},
    {SIP_MLNAME_CAST(sipName_workingDirectory), meth_QProcess_workingDirectory, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_workingDirectory)},
    {SIP_MLNAME_CAST(sipName_writeData), meth_QProcess_writeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_writeData)}
};

static sipEnumMemberDef enummembers_QProcess[] = {
    {sipName_CrashExit, QProcess::CrashExit, 139},
    {sipName_Crashed, QProcess::Crashed, 142},
    {sipName_FailedToStart, QProcess::FailedToStart, 142},
    {sipName_ForwardedChannels, QProcess::ForwardedChannels, 141},
    {sipName_MergedChannels, QProcess::MergedChannels, 141},
    {sipName_NormalExit, QProcess::NormalExit, 139},
    {sipName_NotRunning, QProcess::NotRunning, 143},
    {sipName_ReadError, QProcess::ReadError, 142},
    {sipName_Running, QProcess::Running, 143},
    {sipName_SeparateChannels, QProcess::SeparateChannels, 141},
    {sipName_StandardError, QProcess::StandardError, 140},
    {sipName_StandardOutput, QProcess::StandardOutput, 140},
    {sipName_Starting, QProcess::Starting, 143},
    {sipName_Timedout, QProcess::Timedout, 142},
    {sipName_UnknownError, QProcess::UnknownError, 142},
    {sipName_WriteError, QProcess::WriteError, 142},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QProcess[] = {
    {"readyReadStandardError()", "\1QProcess.readyReadStandardError()", 0},
    {"readyReadStandardOutput()", "\1QProcess.readyReadStandardOutput()", 0},
    {"stateChanged(QProcess::ProcessState)", "\1QProcess.stateChanged(QProcess.ProcessState)", 0},
    {"finished(int,QProcess::ExitStatus)", "\1QProcess.finished(int, QProcess.ExitStatus)", 0},
    {"finished(int)", "\1QProcess.finished(int)", 0},
    {"started()", "\1QProcess.started()", 0},
    {"error(QProcess::ProcessError)", "\1QProcess.error(QProcess.ProcessError)", &methods_QProcess[8]},
    {0, 0, 0}
};

PyDoc_STRVAR(doc_QProcess, "\1QProcess(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtCore_QProcess = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QProcess,
        {0}
    },
    {
        sipNameNr_QProcess,
        {0, 0, 1},
        45, methods_QProcess,
        16, enummembers_QProcess,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QProcess,
    -1,
    -1,
    supers_QProcess,
    0,
    init_QProcess,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QProcess,
    0,
    0,
    0,
    release_QProcess,
    cast_QProcess,
    0,
    0,
    0
},
    &QProcess::staticMetaObject,
    0,
    pyqt4_signals_QProcess
};

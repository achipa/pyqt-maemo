/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:00:59 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectcleanuphandler.sip"
#include <qobjectcleanuphandler.h>
#line 39 "sipQtCoreQObjectCleanupHandler.cpp"

#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtCoreQObjectCleanupHandler.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 46 "sipQtCoreQObjectCleanupHandler.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 49 "sipQtCoreQObjectCleanupHandler.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 52 "sipQtCoreQObjectCleanupHandler.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 55 "sipQtCoreQObjectCleanupHandler.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 58 "sipQtCoreQObjectCleanupHandler.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 61 "sipQtCoreQObjectCleanupHandler.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 64 "sipQtCoreQObjectCleanupHandler.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 67 "sipQtCoreQObjectCleanupHandler.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 70 "sipQtCoreQObjectCleanupHandler.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 73 "sipQtCoreQObjectCleanupHandler.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 76 "sipQtCoreQObjectCleanupHandler.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 79 "sipQtCoreQObjectCleanupHandler.cpp"


class sipQObjectCleanupHandler : public QObjectCleanupHandler
{
public:
    sipQObjectCleanupHandler();
    virtual ~sipQObjectCleanupHandler();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQObjectCleanupHandler(const sipQObjectCleanupHandler &);
    sipQObjectCleanupHandler &operator = (const sipQObjectCleanupHandler &);

    char sipPyMethods[7];
};

sipQObjectCleanupHandler::sipQObjectCleanupHandler(): QObjectCleanupHandler(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQObjectCleanupHandler::~sipQObjectCleanupHandler()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQObjectCleanupHandler::metaObject() const
{
    return sip_QtCore_qt_metaobject(sipPySelf,sipType_QObjectCleanupHandler);
}

int sipQObjectCleanupHandler::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QObjectCleanupHandler::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QObjectCleanupHandler,_c,_id,_a);

    return _id;
}

void *sipQObjectCleanupHandler::qt_metacast(const char *_clname)
{
    return (sip_QtCore_qt_metacast && sip_QtCore_qt_metacast(sipPySelf,sipType_QObjectCleanupHandler,_clname)) ? this : QObjectCleanupHandler::qt_metacast(_clname);
}

bool sipQObjectCleanupHandler::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t,PyObject *,QEvent *);

    return sipVH_QtCore_5(sipGILState,meth,a0);
}

bool sipQObjectCleanupHandler::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    extern bool sipVH_QtCore_18(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return sipVH_QtCore_18(sipGILState,meth,a0,a1);
}

void sipQObjectCleanupHandler::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t,PyObject *,QTimerEvent *);

    sipVH_QtCore_9(sipGILState,meth,a0);
}

void sipQObjectCleanupHandler::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t,PyObject *,QChildEvent *);

    sipVH_QtCore_25(sipGILState,meth,a0);
}

void sipQObjectCleanupHandler::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t,PyObject *,QEvent *);

    sipVH_QtCore_17(sipGILState,meth,a0);
}

void sipQObjectCleanupHandler::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t,PyObject *,const char *);

    sipVH_QtCore_24(sipGILState,meth,a0);
}

void sipQObjectCleanupHandler::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t,PyObject *,const char *);

    sipVH_QtCore_24(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QObjectCleanupHandler_add, "QObjectCleanupHandler.add(QObject) -> QObject");

extern "C" {static PyObject *meth_QObjectCleanupHandler_add(PyObject *, PyObject *);}
static PyObject *meth_QObjectCleanupHandler_add(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject * a0;
        QObjectCleanupHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QObjectCleanupHandler, &sipCpp, sipType_QObject, &a0))
        {
            QObject *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->add(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObjectCleanupHandler, sipName_add, doc_QObjectCleanupHandler_add);

    return NULL;
}


PyDoc_STRVAR(doc_QObjectCleanupHandler_remove, "QObjectCleanupHandler.remove(QObject)");

extern "C" {static PyObject *meth_QObjectCleanupHandler_remove(PyObject *, PyObject *);}
static PyObject *meth_QObjectCleanupHandler_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject * a0;
        QObjectCleanupHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QObjectCleanupHandler, &sipCpp, sipType_QObject, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->remove(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObjectCleanupHandler, sipName_remove, doc_QObjectCleanupHandler_remove);

    return NULL;
}


PyDoc_STRVAR(doc_QObjectCleanupHandler_isEmpty, "QObjectCleanupHandler.isEmpty() -> bool");

extern "C" {static PyObject *meth_QObjectCleanupHandler_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QObjectCleanupHandler_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObjectCleanupHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QObjectCleanupHandler, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEmpty();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObjectCleanupHandler, sipName_isEmpty, doc_QObjectCleanupHandler_isEmpty);

    return NULL;
}


PyDoc_STRVAR(doc_QObjectCleanupHandler_clear, "QObjectCleanupHandler.clear()");

extern "C" {static PyObject *meth_QObjectCleanupHandler_clear(PyObject *, PyObject *);}
static PyObject *meth_QObjectCleanupHandler_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObjectCleanupHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QObjectCleanupHandler, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObjectCleanupHandler, sipName_clear, doc_QObjectCleanupHandler_clear);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QObjectCleanupHandler(void *, const sipTypeDef *);}
static void *cast_QObjectCleanupHandler(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QObjectCleanupHandler)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QObjectCleanupHandler *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QObjectCleanupHandler(void *, int);}
static void release_QObjectCleanupHandler(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQObjectCleanupHandler *>(sipCppV);
    else
        delete reinterpret_cast<QObjectCleanupHandler *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QObjectCleanupHandler(sipSimpleWrapper *);}
static void dealloc_QObjectCleanupHandler(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQObjectCleanupHandler *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QObjectCleanupHandler(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QObjectCleanupHandler(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QObjectCleanupHandler(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQObjectCleanupHandler *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQObjectCleanupHandler();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QObjectCleanupHandler[] = {{129, 255, 1}};


static PyMethodDef methods_QObjectCleanupHandler[] = {
    {SIP_MLNAME_CAST(sipName_add), meth_QObjectCleanupHandler_add, METH_VARARGS, SIP_MLDOC_CAST(doc_QObjectCleanupHandler_add)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QObjectCleanupHandler_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QObjectCleanupHandler_clear)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QObjectCleanupHandler_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QObjectCleanupHandler_isEmpty)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QObjectCleanupHandler_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QObjectCleanupHandler_remove)}
};

PyDoc_STRVAR(doc_QObjectCleanupHandler, "\1QObjectCleanupHandler()");


pyqt4ClassTypeDef sipTypeDef_QtCore_QObjectCleanupHandler = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QObjectCleanupHandler,
        {0}
    },
    {
        sipNameNr_QObjectCleanupHandler,
        {0, 0, 1},
        4, methods_QObjectCleanupHandler,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QObjectCleanupHandler,
    -1,
    -1,
    supers_QObjectCleanupHandler,
    0,
    init_QObjectCleanupHandler,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QObjectCleanupHandler,
    0,
    0,
    0,
    release_QObjectCleanupHandler,
    cast_QObjectCleanupHandler,
    0,
    0,
    0
},
    &QObjectCleanupHandler::staticMetaObject,
    0,
    0
};

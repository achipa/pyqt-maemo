/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:00:59 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qtranslator.sip"
#include <qtranslator.h>
#line 39 "sipQtCoreQTranslator.cpp"

#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtCoreQTranslator.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "sipQtCoreQTranslator.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 49 "sipQtCoreQTranslator.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 52 "sipQtCoreQTranslator.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 55 "sipQtCoreQTranslator.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 58 "sipQtCoreQTranslator.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 61 "sipQtCoreQTranslator.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 64 "sipQtCoreQTranslator.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67 "sipQtCoreQTranslator.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 70 "sipQtCoreQTranslator.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 73 "sipQtCoreQTranslator.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 76 "sipQtCoreQTranslator.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 79 "sipQtCoreQTranslator.cpp"


class sipQTranslator : public QTranslator
{
public:
    sipQTranslator(QObject *);
    virtual ~sipQTranslator();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QString translate(const char *,const char *,const char *) const;
    bool isEmpty() const;
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTranslator(const sipQTranslator &);
    sipQTranslator &operator = (const sipQTranslator &);

    char sipPyMethods[9];
};

sipQTranslator::sipQTranslator(QObject *a0): QTranslator(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTranslator::~sipQTranslator()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTranslator::metaObject() const
{
    return sip_QtCore_qt_metaobject(sipPySelf,sipType_QTranslator);
}

int sipQTranslator::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTranslator::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QTranslator,_c,_id,_a);

    return _id;
}

void *sipQTranslator::qt_metacast(const char *_clname)
{
    return (sip_QtCore_qt_metacast && sip_QtCore_qt_metacast(sipPySelf,sipType_QTranslator,_clname)) ? this : QTranslator::qt_metacast(_clname);
}

QString sipQTranslator::translate(const char *a0,const char *a1,const char *a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_translate);

    if (!meth)
        return QTranslator::translate(a0,a1,a2);

    extern QString sipVH_QtCore_8(sip_gilstate_t,PyObject *,const char *,const char *,const char *);

    return sipVH_QtCore_8(sipGILState,meth,a0,a1,a2);
}

bool sipQTranslator::isEmpty() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_isEmpty);

    if (!meth)
        return QTranslator::isEmpty();

    extern bool sipVH_QtCore_7(sip_gilstate_t,PyObject *);

    return sipVH_QtCore_7(sipGILState,meth);
}

bool sipQTranslator::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t,PyObject *,QEvent *);

    return sipVH_QtCore_5(sipGILState,meth,a0);
}

bool sipQTranslator::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    extern bool sipVH_QtCore_18(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return sipVH_QtCore_18(sipGILState,meth,a0,a1);
}

void sipQTranslator::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t,PyObject *,QTimerEvent *);

    sipVH_QtCore_9(sipGILState,meth,a0);
}

void sipQTranslator::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t,PyObject *,QChildEvent *);

    sipVH_QtCore_25(sipGILState,meth,a0);
}

void sipQTranslator::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t,PyObject *,QEvent *);

    sipVH_QtCore_17(sipGILState,meth,a0);
}

void sipQTranslator::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t,PyObject *,const char *);

    sipVH_QtCore_24(sipGILState,meth,a0);
}

void sipQTranslator::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t,PyObject *,const char *);

    sipVH_QtCore_24(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QTranslator_translate, "QTranslator.translate(str, str, str disambiguation=None) -> QString\n"
    "QTranslator.translate(str, str, str, int) -> QString");

extern "C" {static PyObject *meth_QTranslator_translate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTranslator_translate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const char * a0;
        const char * a1;
        const char * a2 = 0;
        QTranslator *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_disambiguation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bss|s", &sipSelf, sipType_QTranslator, &sipCpp, &a0, &a1, &a2))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((sipSelfWasArg ? sipCpp->QTranslator::translate(a0,a1,a2) : sipCpp->translate(a0,a1,a2)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const char * a0;
        const char * a1;
        const char * a2;
        int a3;
        QTranslator *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bsssi", &sipSelf, sipType_QTranslator, &sipCpp, &a0, &a1, &a2, &a3))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->translate(a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTranslator, sipName_translate, doc_QTranslator_translate);

    return NULL;
}


PyDoc_STRVAR(doc_QTranslator_isEmpty, "QTranslator.isEmpty() -> bool");

extern "C" {static PyObject *meth_QTranslator_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QTranslator_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTranslator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTranslator, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTranslator::isEmpty() : sipCpp->isEmpty());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTranslator, sipName_isEmpty, doc_QTranslator_isEmpty);

    return NULL;
}


PyDoc_STRVAR(doc_QTranslator_load, "QTranslator.load(QString, QString directory=QString(), QString searchDelimiters=QString(), QString suffix=QString()) -> bool");

extern "C" {static PyObject *meth_QTranslator_load(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTranslator_load(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        const QString& a1def = QString();
        const QString * a1 = &a1def;
        int a1State = 0;
        const QString& a2def = QString();
        const QString * a2 = &a2def;
        int a2State = 0;
        const QString& a3def = QString();
        const QString * a3 = &a3def;
        int a3State = 0;
        QTranslator *sipCpp;

        static const char *sipKwdList[] = {
            sipName_fileName,
            sipName_directory,
            sipName_searchDelimiters,
            sipName_suffix,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1J1J1", &sipSelf, sipType_QTranslator, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(*a0,*a1,*a2,*a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTranslator, sipName_load, doc_QTranslator_load);

    return NULL;
}


PyDoc_STRVAR(doc_QTranslator_loadFromData, "QTranslator.loadFromData(str) -> bool");

extern "C" {static PyObject *meth_QTranslator_loadFromData(PyObject *, PyObject *);}
static PyObject *meth_QTranslator_loadFromData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const uchar * a0;
        SIP_SSIZE_T a1;
        QTranslator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bk", &sipSelf, sipType_QTranslator, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(a0,(int)a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTranslator, sipName_loadFromData, doc_QTranslator_loadFromData);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTranslator(void *, const sipTypeDef *);}
static void *cast_QTranslator(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTranslator)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QTranslator *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTranslator(void *, int);}
static void release_QTranslator(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTranslator *>(sipCppV);
    else
        delete reinterpret_cast<QTranslator *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTranslator(sipSimpleWrapper *);}
static void dealloc_QTranslator(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTranslator *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTranslator(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QTranslator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QTranslator(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTranslator *sipCpp = 0;

    {
        QObject * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTranslator(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTranslator[] = {{129, 255, 1}};


static PyMethodDef methods_QTranslator[] = {
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QTranslator_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTranslator_isEmpty)},
    {SIP_MLNAME_CAST(sipName_load), (PyCFunction)meth_QTranslator_load, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTranslator_load)},
    {SIP_MLNAME_CAST(sipName_loadFromData), meth_QTranslator_loadFromData, METH_VARARGS, SIP_MLDOC_CAST(doc_QTranslator_loadFromData)},
    {SIP_MLNAME_CAST(sipName_translate), (PyCFunction)meth_QTranslator_translate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTranslator_translate)}
};

PyDoc_STRVAR(doc_QTranslator, "\1QTranslator(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtCore_QTranslator = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QTranslator,
        {0}
    },
    {
        sipNameNr_QTranslator,
        {0, 0, 1},
        4, methods_QTranslator,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTranslator,
    -1,
    -1,
    supers_QTranslator,
    0,
    init_QTranslator,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTranslator,
    0,
    0,
    0,
    release_QTranslator,
    cast_QTranslator,
    0,
    0,
    0
},
    &QTranslator::staticMetaObject,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:00:59 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "sipQtCoreQEvent.cpp"



class sipQEvent : public QEvent
{
public:
    sipQEvent(QEvent::Type);
    sipQEvent(const QEvent&);
    ~sipQEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQEvent(const sipQEvent &);
    sipQEvent &operator = (const sipQEvent &);
};

sipQEvent::sipQEvent(QEvent::Type a0): QEvent(a0), sipPySelf(0)
{
}

sipQEvent::sipQEvent(const QEvent& a0): QEvent(a0), sipPySelf(0)
{
}

sipQEvent::~sipQEvent()
{
    sipCommonDtor(sipPySelf);
}


PyDoc_STRVAR(doc_QEvent_type, "QEvent.type() -> QEvent.Type");

extern "C" {static PyObject *meth_QEvent_type(PyObject *, PyObject *);}
static PyObject *meth_QEvent_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEvent, &sipCpp))
        {
            QEvent::Type sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->type();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QEvent_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEvent, sipName_type, doc_QEvent_type);

    return NULL;
}


PyDoc_STRVAR(doc_QEvent_spontaneous, "QEvent.spontaneous() -> bool");

extern "C" {static PyObject *meth_QEvent_spontaneous(PyObject *, PyObject *);}
static PyObject *meth_QEvent_spontaneous(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEvent, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->spontaneous();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEvent, sipName_spontaneous, doc_QEvent_spontaneous);

    return NULL;
}


PyDoc_STRVAR(doc_QEvent_setAccepted, "QEvent.setAccepted(bool)");

extern "C" {static PyObject *meth_QEvent_setAccepted(PyObject *, PyObject *);}
static PyObject *meth_QEvent_setAccepted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QEvent, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAccepted(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEvent, sipName_setAccepted, doc_QEvent_setAccepted);

    return NULL;
}


PyDoc_STRVAR(doc_QEvent_isAccepted, "QEvent.isAccepted() -> bool");

extern "C" {static PyObject *meth_QEvent_isAccepted(PyObject *, PyObject *);}
static PyObject *meth_QEvent_isAccepted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEvent, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isAccepted();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEvent, sipName_isAccepted, doc_QEvent_isAccepted);

    return NULL;
}


PyDoc_STRVAR(doc_QEvent_accept, "QEvent.accept()");

extern "C" {static PyObject *meth_QEvent_accept(PyObject *, PyObject *);}
static PyObject *meth_QEvent_accept(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEvent, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->accept();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEvent, sipName_accept, doc_QEvent_accept);

    return NULL;
}


PyDoc_STRVAR(doc_QEvent_ignore, "QEvent.ignore()");

extern "C" {static PyObject *meth_QEvent_ignore(PyObject *, PyObject *);}
static PyObject *meth_QEvent_ignore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEvent, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ignore();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEvent, sipName_ignore, doc_QEvent_ignore);

    return NULL;
}


PyDoc_STRVAR(doc_QEvent_registerEventType, "QEvent.registerEventType(int hint=-1) -> int");

extern "C" {static PyObject *meth_QEvent_registerEventType(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QEvent_registerEventType(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = -1;

        static const char *sipKwdList[] = {
            sipName_hint,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|i", &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QEvent::registerEventType(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEvent, sipName_registerEventType, doc_QEvent_registerEventType);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QEvent(void *, const sipTypeDef *);}
static void *cast_QEvent(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QEvent)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QEvent(void *, int);}
static void release_QEvent(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQEvent *>(sipCppV);
    else
        delete reinterpret_cast<QEvent *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QEvent(sipSimpleWrapper *);}
static void dealloc_QEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQEvent *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QEvent(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQEvent *sipCpp = 0;

    {
        QEvent::Type a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "E", sipType_QEvent_Type, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQEvent(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QEvent * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQEvent(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QEvent[] = {
    {SIP_MLNAME_CAST(sipName_accept), meth_QEvent_accept, METH_VARARGS, SIP_MLDOC_CAST(doc_QEvent_accept)},
    {SIP_MLNAME_CAST(sipName_ignore), meth_QEvent_ignore, METH_VARARGS, SIP_MLDOC_CAST(doc_QEvent_ignore)},
    {SIP_MLNAME_CAST(sipName_isAccepted), meth_QEvent_isAccepted, METH_VARARGS, SIP_MLDOC_CAST(doc_QEvent_isAccepted)},
    {SIP_MLNAME_CAST(sipName_registerEventType), (PyCFunction)meth_QEvent_registerEventType, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QEvent_registerEventType)},
    {SIP_MLNAME_CAST(sipName_setAccepted), meth_QEvent_setAccepted, METH_VARARGS, SIP_MLDOC_CAST(doc_QEvent_setAccepted)},
    {SIP_MLNAME_CAST(sipName_spontaneous), meth_QEvent_spontaneous, METH_VARARGS, SIP_MLDOC_CAST(doc_QEvent_spontaneous)},
    {SIP_MLNAME_CAST(sipName_type), meth_QEvent_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QEvent_type)}
};

static sipEnumMemberDef enummembers_QEvent[] = {
    {sipName_AccessibilityDescription, QEvent::AccessibilityDescription, 57},
    {sipName_AccessibilityHelp, QEvent::AccessibilityHelp, 57},
    {sipName_AccessibilityPrepare, QEvent::AccessibilityPrepare, 57},
    {sipName_ActionAdded, QEvent::ActionAdded, 57},
    {sipName_ActionChanged, QEvent::ActionChanged, 57},
    {sipName_ActionRemoved, QEvent::ActionRemoved, 57},
    {sipName_ActivationChange, QEvent::ActivationChange, 57},
    {sipName_ApplicationActivate, QEvent::ApplicationActivate, 57},
    {sipName_ApplicationActivated, QEvent::ApplicationActivated, 57},
    {sipName_ApplicationDeactivate, QEvent::ApplicationDeactivate, 57},
    {sipName_ApplicationDeactivated, QEvent::ApplicationDeactivated, 57},
    {sipName_ApplicationFontChange, QEvent::ApplicationFontChange, 57},
    {sipName_ApplicationLayoutDirectionChange, QEvent::ApplicationLayoutDirectionChange, 57},
    {sipName_ApplicationPaletteChange, QEvent::ApplicationPaletteChange, 57},
    {sipName_ApplicationWindowIconChange, QEvent::ApplicationWindowIconChange, 57},
    {sipName_ChildAdded, QEvent::ChildAdded, 57},
    {sipName_ChildPolished, QEvent::ChildPolished, 57},
    {sipName_ChildRemoved, QEvent::ChildRemoved, 57},
    {sipName_Clipboard, QEvent::Clipboard, 57},
    {sipName_Close, QEvent::Close, 57},
    {sipName_CloseSoftwareInputPanel, QEvent::CloseSoftwareInputPanel, 57},
    {sipName_ContextMenu, QEvent::ContextMenu, 57},
    {sipName_CursorChange, QEvent::CursorChange, 57},
    {sipName_DeferredDelete, QEvent::DeferredDelete, 57},
    {sipName_DragEnter, QEvent::DragEnter, 57},
    {sipName_DragLeave, QEvent::DragLeave, 57},
    {sipName_DragMove, QEvent::DragMove, 57},
    {sipName_Drop, QEvent::Drop, 57},
    {sipName_DynamicPropertyChange, QEvent::DynamicPropertyChange, 57},
    {sipName_EnabledChange, QEvent::EnabledChange, 57},
    {sipName_Enter, QEvent::Enter, 57},
    {sipName_EnterWhatsThisMode, QEvent::EnterWhatsThisMode, 57},
    {sipName_FileOpen, QEvent::FileOpen, 57},
    {sipName_FocusIn, QEvent::FocusIn, 57},
    {sipName_FocusOut, QEvent::FocusOut, 57},
    {sipName_FontChange, QEvent::FontChange, 57},
    {sipName_Gesture, QEvent::Gesture, 57},
    {sipName_GestureOverride, QEvent::GestureOverride, 57},
    {sipName_GrabKeyboard, QEvent::GrabKeyboard, 57},
    {sipName_GrabMouse, QEvent::GrabMouse, 57},
    {sipName_GraphicsSceneContextMenu, QEvent::GraphicsSceneContextMenu, 57},
    {sipName_GraphicsSceneDragEnter, QEvent::GraphicsSceneDragEnter, 57},
    {sipName_GraphicsSceneDragLeave, QEvent::GraphicsSceneDragLeave, 57},
    {sipName_GraphicsSceneDragMove, QEvent::GraphicsSceneDragMove, 57},
    {sipName_GraphicsSceneDrop, QEvent::GraphicsSceneDrop, 57},
    {sipName_GraphicsSceneHelp, QEvent::GraphicsSceneHelp, 57},
    {sipName_GraphicsSceneHoverEnter, QEvent::GraphicsSceneHoverEnter, 57},
    {sipName_GraphicsSceneHoverLeave, QEvent::GraphicsSceneHoverLeave, 57},
    {sipName_GraphicsSceneHoverMove, QEvent::GraphicsSceneHoverMove, 57},
    {sipName_GraphicsSceneMouseDoubleClick, QEvent::GraphicsSceneMouseDoubleClick, 57},
    {sipName_GraphicsSceneMouseMove, QEvent::GraphicsSceneMouseMove, 57},
    {sipName_GraphicsSceneMousePress, QEvent::GraphicsSceneMousePress, 57},
    {sipName_GraphicsSceneMouseRelease, QEvent::GraphicsSceneMouseRelease, 57},
    {sipName_GraphicsSceneMove, QEvent::GraphicsSceneMove, 57},
    {sipName_GraphicsSceneResize, QEvent::GraphicsSceneResize, 57},
    {sipName_GraphicsSceneWheel, QEvent::GraphicsSceneWheel, 57},
    {sipName_Hide, QEvent::Hide, 57},
    {sipName_HideToParent, QEvent::HideToParent, 57},
    {sipName_HoverEnter, QEvent::HoverEnter, 57},
    {sipName_HoverLeave, QEvent::HoverLeave, 57},
    {sipName_HoverMove, QEvent::HoverMove, 57},
    {sipName_IconDrag, QEvent::IconDrag, 57},
    {sipName_IconTextChange, QEvent::IconTextChange, 57},
    {sipName_InputMethod, QEvent::InputMethod, 57},
    {sipName_KeyPress, QEvent::KeyPress, 57},
    {sipName_KeyRelease, QEvent::KeyRelease, 57},
    {sipName_KeyboardLayoutChange, QEvent::KeyboardLayoutChange, 57},
    {sipName_LanguageChange, QEvent::LanguageChange, 57},
    {sipName_LayoutDirectionChange, QEvent::LayoutDirectionChange, 57},
    {sipName_LayoutRequest, QEvent::LayoutRequest, 57},
    {sipName_Leave, QEvent::Leave, 57},
    {sipName_LeaveWhatsThisMode, QEvent::LeaveWhatsThisMode, 57},
    {sipName_LocaleChange, QEvent::LocaleChange, 57},
    {sipName_MaxUser, QEvent::MaxUser, 57},
    {sipName_MenubarUpdated, QEvent::MenubarUpdated, 57},
    {sipName_MetaCall, QEvent::MetaCall, 57},
    {sipName_ModifiedChange, QEvent::ModifiedChange, 57},
    {sipName_MouseButtonDblClick, QEvent::MouseButtonDblClick, 57},
    {sipName_MouseButtonPress, QEvent::MouseButtonPress, 57},
    {sipName_MouseButtonRelease, QEvent::MouseButtonRelease, 57},
    {sipName_MouseMove, QEvent::MouseMove, 57},
    {sipName_MouseTrackingChange, QEvent::MouseTrackingChange, 57},
    {sipName_Move, QEvent::Move, 57},
    {sipName_None, QEvent::None, 57},
    {sipName_OkRequest, QEvent::OkRequest, 57},
    {sipName_Paint, QEvent::Paint, 57},
    {sipName_PaletteChange, QEvent::PaletteChange, 57},
    {sipName_ParentAboutToChange, QEvent::ParentAboutToChange, 57},
    {sipName_ParentChange, QEvent::ParentChange, 57},
    {sipName_Polish, QEvent::Polish, 57},
    {sipName_PolishRequest, QEvent::PolishRequest, 57},
    {sipName_QueryWhatsThis, QEvent::QueryWhatsThis, 57},
    {sipName_RequestSoftwareInputPanel, QEvent::RequestSoftwareInputPanel, 57},
    {sipName_Resize, QEvent::Resize, 57},
    {sipName_Shortcut, QEvent::Shortcut, 57},
    {sipName_ShortcutOverride, QEvent::ShortcutOverride, 57},
    {sipName_Show, QEvent::Show, 57},
    {sipName_ShowToParent, QEvent::ShowToParent, 57},
    {sipName_SockAct, QEvent::SockAct, 57},
    {sipName_StateMachineSignal, QEvent::StateMachineSignal, 57},
    {sipName_StateMachineWrapped, QEvent::StateMachineWrapped, 57},
    {sipName_StatusTip, QEvent::StatusTip, 57},
    {sipName_StyleChange, QEvent::StyleChange, 57},
    {sipName_TabletEnterProximity, QEvent::TabletEnterProximity, 57},
    {sipName_TabletLeaveProximity, QEvent::TabletLeaveProximity, 57},
    {sipName_TabletMove, QEvent::TabletMove, 57},
    {sipName_TabletPress, QEvent::TabletPress, 57},
    {sipName_TabletRelease, QEvent::TabletRelease, 57},
    {sipName_Timer, QEvent::Timer, 57},
    {sipName_ToolBarChange, QEvent::ToolBarChange, 57},
    {sipName_ToolTip, QEvent::ToolTip, 57},
    {sipName_ToolTipChange, QEvent::ToolTipChange, 57},
    {sipName_TouchBegin, QEvent::TouchBegin, 57},
    {sipName_TouchEnd, QEvent::TouchEnd, 57},
    {sipName_TouchUpdate, QEvent::TouchUpdate, 57},
    {sipName_UngrabKeyboard, QEvent::UngrabKeyboard, 57},
    {sipName_UngrabMouse, QEvent::UngrabMouse, 57},
    {sipName_UpdateLater, QEvent::UpdateLater, 57},
    {sipName_UpdateRequest, QEvent::UpdateRequest, 57},
    {sipName_User, QEvent::User, 57},
    {sipName_WhatsThis, QEvent::WhatsThis, 57},
    {sipName_WhatsThisClicked, QEvent::WhatsThisClicked, 57},
    {sipName_Wheel, QEvent::Wheel, 57},
    {sipName_WinEventAct, QEvent::WinEventAct, 57},
    {sipName_WinIdChange, QEvent::WinIdChange, 57},
    {sipName_WindowActivate, QEvent::WindowActivate, 57},
    {sipName_WindowBlocked, QEvent::WindowBlocked, 57},
    {sipName_WindowDeactivate, QEvent::WindowDeactivate, 57},
    {sipName_WindowIconChange, QEvent::WindowIconChange, 57},
    {sipName_WindowStateChange, QEvent::WindowStateChange, 57},
    {sipName_WindowTitleChange, QEvent::WindowTitleChange, 57},
    {sipName_WindowUnblocked, QEvent::WindowUnblocked, 57},
    {sipName_ZOrderChange, QEvent::ZOrderChange, 57},
};

PyDoc_STRVAR(doc_QEvent, "\1QEvent(QEvent.Type)\n"
    "QEvent(QEvent)");


pyqt4ClassTypeDef sipTypeDef_QtCore_QEvent = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QEvent,
        {0}
    },
    {
        sipNameNr_QEvent,
        {0, 0, 1},
        7, methods_QEvent,
        133, enummembers_QEvent,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QEvent,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    init_QEvent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QEvent,
    0,
    0,
    0,
    release_QEvent,
    cast_QEvent,
    0,
    0,
    0
},
    0,
    0,
    0
};

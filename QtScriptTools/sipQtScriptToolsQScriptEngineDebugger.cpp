/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:18 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtScriptTools.h"

#line 39 "/home/maemo/python-qt4-4.7/sip/QtScriptTools/qscriptenginedebugger.sip"
#include <qscriptenginedebugger.h>
#line 39 "sipQtScriptToolsQScriptEngineDebugger.cpp"

#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 46 "sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 49 "sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qmenu.sip"
#include <qmenu.h>
#line 52 "sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qtoolbar.sip"
#include <qtoolbar.h>
#line 55 "sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qmainwindow.sip"
#include <qmainwindow.h>
#line 58 "sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtScript/qscriptengine.sip"
#include <qscriptengine.h>
#line 61 "sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 64 "sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 67 "sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70 "sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 73 "sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 76 "sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 79 "sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 82 "sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 85 "sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 88 "sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 91 "sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 94 "sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 97 "sipQtScriptToolsQScriptEngineDebugger.cpp"


class sipQScriptEngineDebugger : public QScriptEngineDebugger
{
public:
    sipQScriptEngineDebugger(QObject *);
    virtual ~sipQScriptEngineDebugger();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQScriptEngineDebugger(const sipQScriptEngineDebugger &);
    sipQScriptEngineDebugger &operator = (const sipQScriptEngineDebugger &);

    char sipPyMethods[7];
};

sipQScriptEngineDebugger::sipQScriptEngineDebugger(QObject *a0): QScriptEngineDebugger(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQScriptEngineDebugger::~sipQScriptEngineDebugger()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQScriptEngineDebugger::metaObject() const
{
    return sip_QtScriptTools_qt_metaobject(sipPySelf,sipType_QScriptEngineDebugger);
}

int sipQScriptEngineDebugger::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QScriptEngineDebugger::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtScriptTools_qt_metacall(sipPySelf,sipType_QScriptEngineDebugger,_c,_id,_a);

    return _id;
}

void *sipQScriptEngineDebugger::qt_metacast(const char *_clname)
{
    return (sip_QtScriptTools_qt_metacast && sip_QtScriptTools_qt_metacast(sipPySelf,sipType_QScriptEngineDebugger,_clname)) ? this : QScriptEngineDebugger::qt_metacast(_clname);
}

bool sipQScriptEngineDebugger::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtScriptTools_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQScriptEngineDebugger::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtScriptTools_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQScriptEngineDebugger::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtScriptTools_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQScriptEngineDebugger::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtScriptTools_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQScriptEngineDebugger::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtScriptTools_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQScriptEngineDebugger::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtScriptTools_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQScriptEngineDebugger::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtScriptTools_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QScriptEngineDebugger_attachTo, "QScriptEngineDebugger.attachTo(QScriptEngine)");

extern "C" {static PyObject *meth_QScriptEngineDebugger_attachTo(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngineDebugger_attachTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine * a0;
        QScriptEngineDebugger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QScriptEngineDebugger, &sipCpp, sipType_QScriptEngine, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->attachTo(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngineDebugger, sipName_attachTo, doc_QScriptEngineDebugger_attachTo);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngineDebugger_detach, "QScriptEngineDebugger.detach()");

extern "C" {static PyObject *meth_QScriptEngineDebugger_detach(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngineDebugger_detach(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngineDebugger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngineDebugger, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->detach();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngineDebugger, sipName_detach, doc_QScriptEngineDebugger_detach);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngineDebugger_autoShowStandardWindow, "QScriptEngineDebugger.autoShowStandardWindow() -> bool");

extern "C" {static PyObject *meth_QScriptEngineDebugger_autoShowStandardWindow(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngineDebugger_autoShowStandardWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngineDebugger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngineDebugger, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoShowStandardWindow();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngineDebugger, sipName_autoShowStandardWindow, doc_QScriptEngineDebugger_autoShowStandardWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngineDebugger_setAutoShowStandardWindow, "QScriptEngineDebugger.setAutoShowStandardWindow(bool)");

extern "C" {static PyObject *meth_QScriptEngineDebugger_setAutoShowStandardWindow(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngineDebugger_setAutoShowStandardWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QScriptEngineDebugger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QScriptEngineDebugger, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoShowStandardWindow(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngineDebugger, sipName_setAutoShowStandardWindow, doc_QScriptEngineDebugger_setAutoShowStandardWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngineDebugger_standardWindow, "QScriptEngineDebugger.standardWindow() -> QMainWindow");

extern "C" {static PyObject *meth_QScriptEngineDebugger_standardWindow(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngineDebugger_standardWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngineDebugger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngineDebugger, &sipCpp))
        {
            QMainWindow *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->standardWindow();
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMainWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngineDebugger, sipName_standardWindow, doc_QScriptEngineDebugger_standardWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngineDebugger_createStandardToolBar, "QScriptEngineDebugger.createStandardToolBar(QWidget parent=None) -> QToolBar");

extern "C" {static PyObject *meth_QScriptEngineDebugger_createStandardToolBar(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptEngineDebugger_createStandardToolBar(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget * a0 = 0;
        sipWrapper *sipOwner = 0;
        QScriptEngineDebugger *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|JH", &sipSelf, sipType_QScriptEngineDebugger, &sipCpp, sipType_QWidget, &a0, &sipOwner))
        {
            QToolBar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->createStandardToolBar(a0);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);

            return sipConvertFromType(sipRes,sipType_QToolBar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngineDebugger, sipName_createStandardToolBar, doc_QScriptEngineDebugger_createStandardToolBar);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngineDebugger_createStandardMenu, "QScriptEngineDebugger.createStandardMenu(QWidget parent=None) -> QMenu");

extern "C" {static PyObject *meth_QScriptEngineDebugger_createStandardMenu(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptEngineDebugger_createStandardMenu(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget * a0 = 0;
        sipWrapper *sipOwner = 0;
        QScriptEngineDebugger *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|JH", &sipSelf, sipType_QScriptEngineDebugger, &sipCpp, sipType_QWidget, &a0, &sipOwner))
        {
            QMenu *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->createStandardMenu(a0);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);

            return sipConvertFromType(sipRes,sipType_QMenu,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngineDebugger, sipName_createStandardMenu, doc_QScriptEngineDebugger_createStandardMenu);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngineDebugger_widget, "QScriptEngineDebugger.widget(QScriptEngineDebugger.DebuggerWidget) -> QWidget");

extern "C" {static PyObject *meth_QScriptEngineDebugger_widget(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngineDebugger_widget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngineDebugger::DebuggerWidget a0;
        QScriptEngineDebugger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QScriptEngineDebugger, &sipCpp, sipType_QScriptEngineDebugger_DebuggerWidget, &a0))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->widget(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngineDebugger, sipName_widget, doc_QScriptEngineDebugger_widget);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngineDebugger_action, "QScriptEngineDebugger.action(QScriptEngineDebugger.DebuggerAction) -> QAction");

extern "C" {static PyObject *meth_QScriptEngineDebugger_action(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngineDebugger_action(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngineDebugger::DebuggerAction a0;
        QScriptEngineDebugger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QScriptEngineDebugger, &sipCpp, sipType_QScriptEngineDebugger_DebuggerAction, &a0))
        {
            QAction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->action(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngineDebugger, sipName_action, doc_QScriptEngineDebugger_action);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngineDebugger_state, "QScriptEngineDebugger.state() -> QScriptEngineDebugger.DebuggerState");

extern "C" {static PyObject *meth_QScriptEngineDebugger_state(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngineDebugger_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngineDebugger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngineDebugger, &sipCpp))
        {
            QScriptEngineDebugger::DebuggerState sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->state();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QScriptEngineDebugger_DebuggerState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngineDebugger, sipName_state, doc_QScriptEngineDebugger_state);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QScriptEngineDebugger(void *, const sipTypeDef *);}
static void *cast_QScriptEngineDebugger(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QScriptEngineDebugger)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QScriptEngineDebugger *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QScriptEngineDebugger(void *, int);}
static void release_QScriptEngineDebugger(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQScriptEngineDebugger *>(sipCppV);
    else
        delete reinterpret_cast<QScriptEngineDebugger *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QScriptEngineDebugger(sipSimpleWrapper *);}
static void dealloc_QScriptEngineDebugger(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQScriptEngineDebugger *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QScriptEngineDebugger(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QScriptEngineDebugger(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QScriptEngineDebugger(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQScriptEngineDebugger *sipCpp = 0;

    {
        QObject * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQScriptEngineDebugger(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QScriptEngineDebugger[] = {{129, 0, 1}};


static PyMethodDef methods_QScriptEngineDebugger[] = {
    {SIP_MLNAME_CAST(sipName_action), meth_QScriptEngineDebugger_action, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngineDebugger_action)},
    {SIP_MLNAME_CAST(sipName_attachTo), meth_QScriptEngineDebugger_attachTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngineDebugger_attachTo)},
    {SIP_MLNAME_CAST(sipName_autoShowStandardWindow), meth_QScriptEngineDebugger_autoShowStandardWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngineDebugger_autoShowStandardWindow)},
    {SIP_MLNAME_CAST(sipName_createStandardMenu), (PyCFunction)meth_QScriptEngineDebugger_createStandardMenu, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QScriptEngineDebugger_createStandardMenu)},
    {SIP_MLNAME_CAST(sipName_createStandardToolBar), (PyCFunction)meth_QScriptEngineDebugger_createStandardToolBar, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QScriptEngineDebugger_createStandardToolBar)},
    {SIP_MLNAME_CAST(sipName_detach), meth_QScriptEngineDebugger_detach, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngineDebugger_detach)},
    {SIP_MLNAME_CAST(sipName_setAutoShowStandardWindow), meth_QScriptEngineDebugger_setAutoShowStandardWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngineDebugger_setAutoShowStandardWindow)},
    {SIP_MLNAME_CAST(sipName_standardWindow), meth_QScriptEngineDebugger_standardWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngineDebugger_standardWindow)},
    {SIP_MLNAME_CAST(sipName_state), meth_QScriptEngineDebugger_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngineDebugger_state)},
    {SIP_MLNAME_CAST(sipName_widget), meth_QScriptEngineDebugger_widget, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngineDebugger_widget)}
};

static sipEnumMemberDef enummembers_QScriptEngineDebugger[] = {
    {sipName_BreakpointsWidget, QScriptEngineDebugger::BreakpointsWidget, 3},
    {sipName_ClearConsoleAction, QScriptEngineDebugger::ClearConsoleAction, 1},
    {sipName_ClearDebugOutputAction, QScriptEngineDebugger::ClearDebugOutputAction, 1},
    {sipName_ClearErrorLogAction, QScriptEngineDebugger::ClearErrorLogAction, 1},
    {sipName_CodeFinderWidget, QScriptEngineDebugger::CodeFinderWidget, 3},
    {sipName_CodeWidget, QScriptEngineDebugger::CodeWidget, 3},
    {sipName_ConsoleWidget, QScriptEngineDebugger::ConsoleWidget, 3},
    {sipName_ContinueAction, QScriptEngineDebugger::ContinueAction, 1},
    {sipName_DebugOutputWidget, QScriptEngineDebugger::DebugOutputWidget, 3},
    {sipName_ErrorLogWidget, QScriptEngineDebugger::ErrorLogWidget, 3},
    {sipName_FindInScriptAction, QScriptEngineDebugger::FindInScriptAction, 1},
    {sipName_FindNextInScriptAction, QScriptEngineDebugger::FindNextInScriptAction, 1},
    {sipName_FindPreviousInScriptAction, QScriptEngineDebugger::FindPreviousInScriptAction, 1},
    {sipName_GoToLineAction, QScriptEngineDebugger::GoToLineAction, 1},
    {sipName_InterruptAction, QScriptEngineDebugger::InterruptAction, 1},
    {sipName_LocalsWidget, QScriptEngineDebugger::LocalsWidget, 3},
    {sipName_RunToCursorAction, QScriptEngineDebugger::RunToCursorAction, 1},
    {sipName_RunToNewScriptAction, QScriptEngineDebugger::RunToNewScriptAction, 1},
    {sipName_RunningState, QScriptEngineDebugger::RunningState, 2},
    {sipName_ScriptsWidget, QScriptEngineDebugger::ScriptsWidget, 3},
    {sipName_StackWidget, QScriptEngineDebugger::StackWidget, 3},
    {sipName_StepIntoAction, QScriptEngineDebugger::StepIntoAction, 1},
    {sipName_StepOutAction, QScriptEngineDebugger::StepOutAction, 1},
    {sipName_StepOverAction, QScriptEngineDebugger::StepOverAction, 1},
    {sipName_SuspendedState, QScriptEngineDebugger::SuspendedState, 2},
    {sipName_ToggleBreakpointAction, QScriptEngineDebugger::ToggleBreakpointAction, 1},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QScriptEngineDebugger[] = {
    {"evaluationResumed()", "\1QScriptEngineDebugger.evaluationResumed()", 0},
    {"evaluationSuspended()", "\1QScriptEngineDebugger.evaluationSuspended()", 0},
    {0, 0, 0}
};

PyDoc_STRVAR(doc_QScriptEngineDebugger, "\1QScriptEngineDebugger(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtScriptTools_QScriptEngineDebugger = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QScriptEngineDebugger,
        {0}
    },
    {
        sipNameNr_QScriptEngineDebugger,
        {0, 0, 1},
        10, methods_QScriptEngineDebugger,
        26, enummembers_QScriptEngineDebugger,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QScriptEngineDebugger,
    -1,
    -1,
    supers_QScriptEngineDebugger,
    0,
    init_QScriptEngineDebugger,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QScriptEngineDebugger,
    0,
    0,
    0,
    release_QScriptEngineDebugger,
    cast_QScriptEngineDebugger,
    0,
    0,
    0
},
    &QScriptEngineDebugger::staticMetaObject,
    0,
    pyqt4_signals_QScriptEngineDebugger
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:35 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIphonon.h"

#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 88 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescriptionmodel.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/path.sip"
#include <path.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/path.sip"
#include <path.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 111 "sipphononPhononMediaController.cpp"

#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 88 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescriptionmodel.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/path.sip"
#include <path.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/path.sip"
#include <path.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 187 "sipphononPhononMediaController.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 238 "sipphononPhononMediaController.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 289 "sipphononPhononMediaController.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 292 "sipphononPhononMediaController.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 295 "sipphononPhononMediaController.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 330 "sipphononPhononMediaController.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 333 "sipphononPhononMediaController.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 336 "sipphononPhononMediaController.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 339 "sipphononPhononMediaController.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 342 "sipphononPhononMediaController.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 345 "sipphononPhononMediaController.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 348 "sipphononPhononMediaController.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 351 "sipphononPhononMediaController.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 354 "sipphononPhononMediaController.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 357 "sipphononPhononMediaController.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 360 "sipphononPhononMediaController.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 363 "sipphononPhononMediaController.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 366 "sipphononPhononMediaController.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 369 "sipphononPhononMediaController.cpp"


class sipPhonon_MediaController : public Phonon::MediaController
{
public:
    sipPhonon_MediaController(Phonon::MediaObject *);
    virtual ~sipPhonon_MediaController();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipPhonon_MediaController(const sipPhonon_MediaController &);
    sipPhonon_MediaController &operator = (const sipPhonon_MediaController &);

    char sipPyMethods[7];
};

sipPhonon_MediaController::sipPhonon_MediaController(Phonon::MediaObject *a0): Phonon::MediaController(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipPhonon_MediaController::~sipPhonon_MediaController()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipPhonon_MediaController::metaObject() const
{
    return sip_phonon_qt_metaobject(sipPySelf,sipType_Phonon_MediaController);
}

int sipPhonon_MediaController::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = Phonon::MediaController::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_phonon_qt_metacall(sipPySelf,sipType_Phonon_MediaController,_c,_id,_a);

    return _id;
}

void *sipPhonon_MediaController::qt_metacast(const char *_clname)
{
    return (sip_phonon_qt_metacast && sip_phonon_qt_metacast(sipPySelf,sipType_Phonon_MediaController,_clname)) ? this : Phonon::MediaController::qt_metacast(_clname);
}

bool sipPhonon_MediaController::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_phonon_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipPhonon_MediaController::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_phonon_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipPhonon_MediaController::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_phonon_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipPhonon_MediaController::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_phonon_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipPhonon_MediaController::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_phonon_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipPhonon_MediaController::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_phonon_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipPhonon_MediaController::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_phonon_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_Phonon_MediaController_supportedFeatures, "Phonon.MediaController.supportedFeatures() -> Phonon.MediaController.Features");

extern "C" {static PyObject *meth_Phonon_MediaController_supportedFeatures(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_supportedFeatures(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            Phonon::MediaController::Features *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Phonon::MediaController::Features(sipCpp->supportedFeatures());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Phonon_MediaController_Features,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_supportedFeatures, doc_Phonon_MediaController_supportedFeatures);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_availableAngles, "Phonon.MediaController.availableAngles() -> int");

extern "C" {static PyObject *meth_Phonon_MediaController_availableAngles(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_availableAngles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->availableAngles();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_availableAngles, doc_Phonon_MediaController_availableAngles);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_currentAngle, "Phonon.MediaController.currentAngle() -> int");

extern "C" {static PyObject *meth_Phonon_MediaController_currentAngle(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_currentAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentAngle();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_currentAngle, doc_Phonon_MediaController_currentAngle);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_availableChapters, "Phonon.MediaController.availableChapters() -> int");

extern "C" {static PyObject *meth_Phonon_MediaController_availableChapters(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_availableChapters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->availableChapters();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_availableChapters, doc_Phonon_MediaController_availableChapters);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_currentChapter, "Phonon.MediaController.currentChapter() -> int");

extern "C" {static PyObject *meth_Phonon_MediaController_currentChapter(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_currentChapter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentChapter();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_currentChapter, doc_Phonon_MediaController_currentChapter);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_availableTitles, "Phonon.MediaController.availableTitles() -> int");

extern "C" {static PyObject *meth_Phonon_MediaController_availableTitles(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_availableTitles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->availableTitles();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_availableTitles, doc_Phonon_MediaController_availableTitles);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_currentTitle, "Phonon.MediaController.currentTitle() -> int");

extern "C" {static PyObject *meth_Phonon_MediaController_currentTitle(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_currentTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentTitle();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_currentTitle, doc_Phonon_MediaController_currentTitle);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_autoplayTitles, "Phonon.MediaController.autoplayTitles() -> bool");

extern "C" {static PyObject *meth_Phonon_MediaController_autoplayTitles(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_autoplayTitles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoplayTitles();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_autoplayTitles, doc_Phonon_MediaController_autoplayTitles);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_setCurrentAngle, "Phonon.MediaController.setCurrentAngle(int)");

extern "C" {static PyObject *meth_Phonon_MediaController_setCurrentAngle(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_setCurrentAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Phonon_MediaController, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentAngle(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_setCurrentAngle, doc_Phonon_MediaController_setCurrentAngle);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_setCurrentChapter, "Phonon.MediaController.setCurrentChapter(int)");

extern "C" {static PyObject *meth_Phonon_MediaController_setCurrentChapter(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_setCurrentChapter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Phonon_MediaController, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentChapter(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_setCurrentChapter, doc_Phonon_MediaController_setCurrentChapter);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_setCurrentTitle, "Phonon.MediaController.setCurrentTitle(int)");

extern "C" {static PyObject *meth_Phonon_MediaController_setCurrentTitle(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_setCurrentTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Phonon_MediaController, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentTitle(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_setCurrentTitle, doc_Phonon_MediaController_setCurrentTitle);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_setAutoplayTitles, "Phonon.MediaController.setAutoplayTitles(bool)");

extern "C" {static PyObject *meth_Phonon_MediaController_setAutoplayTitles(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_setAutoplayTitles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_Phonon_MediaController, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoplayTitles(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_setAutoplayTitles, doc_Phonon_MediaController_setAutoplayTitles);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_nextTitle, "Phonon.MediaController.nextTitle()");

extern "C" {static PyObject *meth_Phonon_MediaController_nextTitle(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_nextTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->nextTitle();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_nextTitle, doc_Phonon_MediaController_nextTitle);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_previousTitle, "Phonon.MediaController.previousTitle()");

extern "C" {static PyObject *meth_Phonon_MediaController_previousTitle(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_previousTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->previousTitle();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_previousTitle, doc_Phonon_MediaController_previousTitle);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_currentAudioChannel, "Phonon.MediaController.currentAudioChannel() -> Phonon.AudioChannelDescription");

extern "C" {static PyObject *meth_Phonon_MediaController_currentAudioChannel(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_currentAudioChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            Phonon::AudioChannelDescription *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Phonon::AudioChannelDescription(sipCpp->currentAudioChannel());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Phonon_AudioChannelDescription,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_currentAudioChannel, doc_Phonon_MediaController_currentAudioChannel);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_currentSubtitle, "Phonon.MediaController.currentSubtitle() -> Phonon.SubtitleDescription");

extern "C" {static PyObject *meth_Phonon_MediaController_currentSubtitle(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_currentSubtitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            Phonon::SubtitleDescription *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Phonon::SubtitleDescription(sipCpp->currentSubtitle());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Phonon_SubtitleDescription,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_currentSubtitle, doc_Phonon_MediaController_currentSubtitle);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_availableAudioChannels, "Phonon.MediaController.availableAudioChannels() -> list-of-Phonon.AudioChannelDescription");

extern "C" {static PyObject *meth_Phonon_MediaController_availableAudioChannels(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_availableAudioChannels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            QList<Phonon::AudioChannelDescription> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<Phonon::AudioChannelDescription>(sipCpp->availableAudioChannels());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100Phonon_AudioChannelDescription,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_availableAudioChannels, doc_Phonon_MediaController_availableAudioChannels);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_availableSubtitles, "Phonon.MediaController.availableSubtitles() -> list-of-Phonon.SubtitleDescription");

extern "C" {static PyObject *meth_Phonon_MediaController_availableSubtitles(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_availableSubtitles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            QList<Phonon::SubtitleDescription> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<Phonon::SubtitleDescription>(sipCpp->availableSubtitles());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100Phonon_SubtitleDescription,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_availableSubtitles, doc_Phonon_MediaController_availableSubtitles);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_setCurrentAudioChannel, "Phonon.MediaController.setCurrentAudioChannel(Phonon.AudioChannelDescription)");

extern "C" {static PyObject *meth_Phonon_MediaController_setCurrentAudioChannel(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_setCurrentAudioChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Phonon::AudioChannelDescription * a0;
        Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Phonon_MediaController, &sipCpp, sipType_Phonon_AudioChannelDescription, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentAudioChannel(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_setCurrentAudioChannel, doc_Phonon_MediaController_setCurrentAudioChannel);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_setCurrentSubtitle, "Phonon.MediaController.setCurrentSubtitle(Phonon.SubtitleDescription)");

extern "C" {static PyObject *meth_Phonon_MediaController_setCurrentSubtitle(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_setCurrentSubtitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Phonon::SubtitleDescription * a0;
        Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Phonon_MediaController, &sipCpp, sipType_Phonon_SubtitleDescription, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentSubtitle(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_setCurrentSubtitle, doc_Phonon_MediaController_setCurrentSubtitle);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Phonon_MediaController(void *, const sipTypeDef *);}
static void *cast_Phonon_MediaController(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_Phonon_MediaController)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(Phonon::MediaController *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Phonon_MediaController(void *, int);}
static void release_Phonon_MediaController(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipPhonon_MediaController *>(sipCppV);
    else
        delete reinterpret_cast<Phonon::MediaController *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_Phonon_MediaController(sipSimpleWrapper *);}
static void dealloc_Phonon_MediaController(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipPhonon_MediaController *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_Phonon_MediaController(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_Phonon_MediaController(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_Phonon_MediaController(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipPhonon_MediaController *sipCpp = 0;

    {
        Phonon::MediaObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_Phonon_MediaObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipPhonon_MediaController(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_Phonon_MediaController[] = {{129, 0, 1}};


static PyMethodDef methods_Phonon_MediaController[] = {
    {SIP_MLNAME_CAST(sipName_autoplayTitles), meth_Phonon_MediaController_autoplayTitles, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_autoplayTitles)},
    {SIP_MLNAME_CAST(sipName_availableAngles), meth_Phonon_MediaController_availableAngles, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_availableAngles)},
    {SIP_MLNAME_CAST(sipName_availableAudioChannels), meth_Phonon_MediaController_availableAudioChannels, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_availableAudioChannels)},
    {SIP_MLNAME_CAST(sipName_availableChapters), meth_Phonon_MediaController_availableChapters, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_availableChapters)},
    {SIP_MLNAME_CAST(sipName_availableSubtitles), meth_Phonon_MediaController_availableSubtitles, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_availableSubtitles)},
    {SIP_MLNAME_CAST(sipName_availableTitles), meth_Phonon_MediaController_availableTitles, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_availableTitles)},
    {SIP_MLNAME_CAST(sipName_currentAngle), meth_Phonon_MediaController_currentAngle, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_currentAngle)},
    {SIP_MLNAME_CAST(sipName_currentAudioChannel), meth_Phonon_MediaController_currentAudioChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_currentAudioChannel)},
    {SIP_MLNAME_CAST(sipName_currentChapter), meth_Phonon_MediaController_currentChapter, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_currentChapter)},
    {SIP_MLNAME_CAST(sipName_currentSubtitle), meth_Phonon_MediaController_currentSubtitle, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_currentSubtitle)},
    {SIP_MLNAME_CAST(sipName_currentTitle), meth_Phonon_MediaController_currentTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_currentTitle)},
    {SIP_MLNAME_CAST(sipName_nextTitle), meth_Phonon_MediaController_nextTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_nextTitle)},
    {SIP_MLNAME_CAST(sipName_previousTitle), meth_Phonon_MediaController_previousTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_previousTitle)},
    {SIP_MLNAME_CAST(sipName_setAutoplayTitles), meth_Phonon_MediaController_setAutoplayTitles, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_setAutoplayTitles)},
    {SIP_MLNAME_CAST(sipName_setCurrentAngle), meth_Phonon_MediaController_setCurrentAngle, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_setCurrentAngle)},
    {SIP_MLNAME_CAST(sipName_setCurrentAudioChannel), meth_Phonon_MediaController_setCurrentAudioChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_setCurrentAudioChannel)},
    {SIP_MLNAME_CAST(sipName_setCurrentChapter), meth_Phonon_MediaController_setCurrentChapter, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_setCurrentChapter)},
    {SIP_MLNAME_CAST(sipName_setCurrentSubtitle), meth_Phonon_MediaController_setCurrentSubtitle, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_setCurrentSubtitle)},
    {SIP_MLNAME_CAST(sipName_setCurrentTitle), meth_Phonon_MediaController_setCurrentTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_setCurrentTitle)},
    {SIP_MLNAME_CAST(sipName_supportedFeatures), meth_Phonon_MediaController_supportedFeatures, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_supportedFeatures)}
};

static sipEnumMemberDef enummembers_Phonon_MediaController[] = {
    {sipName_Angles, Phonon::MediaController::Angles, 21},
    {sipName_Chapters, Phonon::MediaController::Chapters, 21},
    {sipName_Titles, Phonon::MediaController::Titles, 21},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_Phonon_MediaController[] = {
    {"availableAudioChannelsChanged()", "\1Phonon.MediaController.availableAudioChannelsChanged()", 0},
    {"availableSubtitlesChanged()", "\1Phonon.MediaController.availableSubtitlesChanged()", 0},
    {"titleChanged(int)", "\1Phonon.MediaController.titleChanged(int)", 0},
    {"availableTitlesChanged(int)", "\1Phonon.MediaController.availableTitlesChanged(int)", 0},
    {"chapterChanged(int)", "\1Phonon.MediaController.chapterChanged(int)", 0},
    {"availableChaptersChanged(int)", "\1Phonon.MediaController.availableChaptersChanged(int)", 0},
    {"angleChanged(int)", "\1Phonon.MediaController.angleChanged(int)", 0},
    {"availableAnglesChanged(int)", "\1Phonon.MediaController.availableAnglesChanged(int)", 0},
    {0, 0, 0}
};

PyDoc_STRVAR(doc_Phonon_MediaController, "\1Phonon.MediaController(Phonon.MediaObject)");


pyqt4ClassTypeDef sipTypeDef_phonon_Phonon_MediaController = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_Phonon__MediaController,
        {0}
    },
    {
        sipNameNr_MediaController,
        {0, 255, 0},
        20, methods_Phonon_MediaController,
        3, enummembers_Phonon_MediaController,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Phonon_MediaController,
    -1,
    -1,
    supers_Phonon_MediaController,
    0,
    init_Phonon_MediaController,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Phonon_MediaController,
    0,
    0,
    0,
    release_Phonon_MediaController,
    cast_Phonon_MediaController,
    0,
    0,
    0
},
    &Phonon::MediaController::staticMetaObject,
    0,
    pyqt4_signals_Phonon_MediaController
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:35 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIphonon.h"

#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 88 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescriptionmodel.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/path.sip"
#include <path.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/path.sip"
#include <path.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 111 "sipphononPhononPath.cpp"

#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 88 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescriptionmodel.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/path.sip"
#include <path.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/path.sip"
#include <path.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 187 "sipphononPhononPath.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 190 "sipphononPhononPath.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 88 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescriptionmodel.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/path.sip"
#include <path.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/path.sip"
#include <path.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 265 "sipphononPhononPath.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 316 "sipphononPhononPath.cpp"


PyDoc_STRVAR(doc_Phonon_Path_isValid, "Phonon.Path.isValid() -> bool");

extern "C" {static PyObject *meth_Phonon_Path_isValid(PyObject *, PyObject *);}
static PyObject *meth_Phonon_Path_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::Path *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_Path, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Path, sipName_isValid, doc_Phonon_Path_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_Path_insertEffect, "Phonon.Path.insertEffect(Phonon.EffectDescription, Phonon.Effect before=None) -> Phonon.Effect\n"
    "Phonon.Path.insertEffect(Phonon.Effect, Phonon.Effect before=None) -> bool");

extern "C" {static PyObject *meth_Phonon_Path_insertEffect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Phonon_Path_insertEffect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const Phonon::EffectDescription * a0;
        Phonon::Effect * a1 = 0;
        Phonon::Path *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_before,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J8", &sipSelf, sipType_Phonon_Path, &sipCpp, sipType_Phonon_EffectDescription, &a0, sipType_Phonon_Effect, &a1))
        {
            Phonon::Effect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->insertEffect(*a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_Phonon_Effect,NULL);
        }
    }

    {
        Phonon::Effect * a0;
        Phonon::Effect * a1 = 0;
        Phonon::Path *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_before,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|J8", &sipSelf, sipType_Phonon_Path, &sipCpp, sipType_Phonon_Effect, &a0, sipType_Phonon_Effect, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->insertEffect(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Path, sipName_insertEffect, doc_Phonon_Path_insertEffect);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_Path_removeEffect, "Phonon.Path.removeEffect(Phonon.Effect) -> bool");

extern "C" {static PyObject *meth_Phonon_Path_removeEffect(PyObject *, PyObject *);}
static PyObject *meth_Phonon_Path_removeEffect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::Effect * a0;
        Phonon::Path *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_Phonon_Path, &sipCpp, sipType_Phonon_Effect, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->removeEffect(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Path, sipName_removeEffect, doc_Phonon_Path_removeEffect);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_Path_effects, "Phonon.Path.effects() -> list-of-Phonon.Effect");

extern "C" {static PyObject *meth_Phonon_Path_effects(PyObject *, PyObject *);}
static PyObject *meth_Phonon_Path_effects(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::Path *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_Path, &sipCpp))
        {
            QList<Phonon::Effect *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<Phonon::Effect *>(sipCpp->effects());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101Phonon_Effect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Path, sipName_effects, doc_Phonon_Path_effects);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_Path_reconnect, "Phonon.Path.reconnect(Phonon.MediaNode, Phonon.MediaNode) -> bool");

extern "C" {static PyObject *meth_Phonon_Path_reconnect(PyObject *, PyObject *);}
static PyObject *meth_Phonon_Path_reconnect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::MediaNode * a0;
        Phonon::MediaNode * a1;
        Phonon::Path *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_Phonon_Path, &sipCpp, sipType_Phonon_MediaNode, &a0, sipType_Phonon_MediaNode, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->reconnect(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Path, sipName_reconnect, doc_Phonon_Path_reconnect);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_Path_disconnect, "Phonon.Path.disconnect() -> bool");

extern "C" {static PyObject *meth_Phonon_Path_disconnect(PyObject *, PyObject *);}
static PyObject *meth_Phonon_Path_disconnect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::Path *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_Path, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->disconnect();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Path, sipName_disconnect, doc_Phonon_Path_disconnect);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_Path_source, "Phonon.Path.source() -> Phonon.MediaNode");

extern "C" {static PyObject *meth_Phonon_Path_source(PyObject *, PyObject *);}
static PyObject *meth_Phonon_Path_source(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::Path *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_Path, &sipCpp))
        {
            Phonon::MediaNode *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->source();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_Phonon_MediaNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Path, sipName_source, doc_Phonon_Path_source);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_Path_sink, "Phonon.Path.sink() -> Phonon.MediaNode");

extern "C" {static PyObject *meth_Phonon_Path_sink(PyObject *, PyObject *);}
static PyObject *meth_Phonon_Path_sink(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::Path *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_Path, &sipCpp))
        {
            Phonon::MediaNode *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sink();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_Phonon_MediaNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Path, sipName_sink, doc_Phonon_Path_sink);

    return NULL;
}


extern "C" {static PyObject *slot_Phonon_Path___ne__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_Phonon_Path___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    Phonon::Path *sipCpp = reinterpret_cast<Phonon::Path *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Phonon_Path));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Phonon::Path * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Phonon_Path, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Phonon::Path::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_phonon,ne_slot,sipType_Phonon_Path,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_Phonon_Path___eq__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_Phonon_Path___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    Phonon::Path *sipCpp = reinterpret_cast<Phonon::Path *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Phonon_Path));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Phonon::Path * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Phonon_Path, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Phonon::Path::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_phonon,eq_slot,sipType_Phonon_Path,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Phonon_Path(void *, const sipTypeDef *);}
static void *cast_Phonon_Path(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_Phonon_Path)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Phonon_Path(void *, int);}
static void release_Phonon_Path(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<Phonon::Path *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_Phonon_Path(void *, SIP_SSIZE_T, const void *);}
static void assign_Phonon_Path(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<Phonon::Path *>(sipDst)[sipDstIdx] = *reinterpret_cast<const Phonon::Path *>(sipSrc);
}


extern "C" {static void *array_Phonon_Path(SIP_SSIZE_T);}
static void *array_Phonon_Path(SIP_SSIZE_T sipNrElem)
{
    return new Phonon::Path[sipNrElem];
}


extern "C" {static void *copy_Phonon_Path(const void *, SIP_SSIZE_T);}
static void *copy_Phonon_Path(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new Phonon::Path(reinterpret_cast<const Phonon::Path *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Phonon_Path(sipSimpleWrapper *);}
static void dealloc_Phonon_Path(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_Phonon_Path(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_Phonon_Path(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_Phonon_Path(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    Phonon::Path *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Phonon::Path();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const Phonon::Path * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Phonon_Path, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Phonon::Path(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Phonon_Path[] = {
    {(void *)slot_Phonon_Path___ne__, ne_slot},
    {(void *)slot_Phonon_Path___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_Phonon_Path[] = {
    {SIP_MLNAME_CAST(sipName_disconnect), meth_Phonon_Path_disconnect, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_Path_disconnect)},
    {SIP_MLNAME_CAST(sipName_effects), meth_Phonon_Path_effects, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_Path_effects)},
    {SIP_MLNAME_CAST(sipName_insertEffect), (PyCFunction)meth_Phonon_Path_insertEffect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Phonon_Path_insertEffect)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_Phonon_Path_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_Path_isValid)},
    {SIP_MLNAME_CAST(sipName_reconnect), meth_Phonon_Path_reconnect, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_Path_reconnect)},
    {SIP_MLNAME_CAST(sipName_removeEffect), meth_Phonon_Path_removeEffect, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_Path_removeEffect)},
    {SIP_MLNAME_CAST(sipName_sink), meth_Phonon_Path_sink, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_Path_sink)},
    {SIP_MLNAME_CAST(sipName_source), meth_Phonon_Path_source, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_Path_source)}
};

PyDoc_STRVAR(doc_Phonon_Path, "\1Phonon.Path()\n"
    "Phonon.Path(Phonon.Path)");


pyqt4ClassTypeDef sipTypeDef_phonon_Phonon_Path = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Phonon__Path,
        {0}
    },
    {
        sipNameNr_Path,
        {0, 255, 0},
        8, methods_Phonon_Path,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Phonon_Path,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_Phonon_Path,
    init_Phonon_Path,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Phonon_Path,
    assign_Phonon_Path,
    array_Phonon_Path,
    copy_Phonon_Path,
    release_Phonon_Path,
    cast_Phonon_Path,
    0,
    0,
    0
},
    0,
    0,
    0
};

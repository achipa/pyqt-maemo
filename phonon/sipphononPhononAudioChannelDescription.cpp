/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:35 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIphonon.h"

#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 87 "sipphononPhononAudioChannelDescription.cpp"

#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qhash.sip"
#include <qhash.h>
#line 91 "sipphononPhononAudioChannelDescription.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 94 "sipphononPhononAudioChannelDescription.cpp"
#line 131 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 97 "sipphononPhononAudioChannelDescription.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 100 "sipphononPhononAudioChannelDescription.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 103 "sipphononPhononAudioChannelDescription.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 106 "sipphononPhononAudioChannelDescription.cpp"


PyDoc_STRVAR(doc_Phonon_AudioChannelDescription_description, "Phonon.AudioChannelDescription.description() -> QString");

extern "C" {static PyObject *meth_Phonon_AudioChannelDescription_description(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioChannelDescription_description(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::AudioChannelDescription *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_AudioChannelDescription, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->description());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioChannelDescription, sipName_description, doc_Phonon_AudioChannelDescription_description);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_AudioChannelDescription_index, "Phonon.AudioChannelDescription.index() -> int");

extern "C" {static PyObject *meth_Phonon_AudioChannelDescription_index(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioChannelDescription_index(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::AudioChannelDescription *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_AudioChannelDescription, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->index();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioChannelDescription, sipName_index, doc_Phonon_AudioChannelDescription_index);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_AudioChannelDescription_isValid, "Phonon.AudioChannelDescription.isValid() -> bool");

extern "C" {static PyObject *meth_Phonon_AudioChannelDescription_isValid(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioChannelDescription_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::AudioChannelDescription *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_AudioChannelDescription, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioChannelDescription, sipName_isValid, doc_Phonon_AudioChannelDescription_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_AudioChannelDescription_name, "Phonon.AudioChannelDescription.name() -> QString");

extern "C" {static PyObject *meth_Phonon_AudioChannelDescription_name(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioChannelDescription_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::AudioChannelDescription *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_AudioChannelDescription, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->name());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioChannelDescription, sipName_name, doc_Phonon_AudioChannelDescription_name);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_AudioChannelDescription_property, "Phonon.AudioChannelDescription.property(str) -> QVariant");

extern "C" {static PyObject *meth_Phonon_AudioChannelDescription_property(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioChannelDescription_property(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const char * a0;
        Phonon::AudioChannelDescription *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bs", &sipSelf, sipType_Phonon_AudioChannelDescription, &sipCpp, &a0))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->property(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioChannelDescription, sipName_property, doc_Phonon_AudioChannelDescription_property);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_AudioChannelDescription_propertyNames, "Phonon.AudioChannelDescription.propertyNames() -> list-of-QByteArray");

extern "C" {static PyObject *meth_Phonon_AudioChannelDescription_propertyNames(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioChannelDescription_propertyNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::AudioChannelDescription *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_AudioChannelDescription, &sipCpp))
        {
            QList<QByteArray> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QByteArray>(sipCpp->propertyNames());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioChannelDescription, sipName_propertyNames, doc_Phonon_AudioChannelDescription_propertyNames);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_AudioChannelDescription_fromIndex, "Phonon.AudioChannelDescription.fromIndex(int) -> Phonon.AudioChannelDescription");

extern "C" {static PyObject *meth_Phonon_AudioChannelDescription_fromIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioChannelDescription_fromIndex(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        static const char *sipKwdList[] = {
            sipName_index,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "i", &a0))
        {
            Phonon::AudioChannelDescription *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Phonon::AudioChannelDescription(Phonon::AudioChannelDescription::fromIndex(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Phonon_AudioChannelDescription,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioChannelDescription, sipName_fromIndex, doc_Phonon_AudioChannelDescription_fromIndex);

    return NULL;
}


extern "C" {static PyObject *slot_Phonon_AudioChannelDescription___eq__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_Phonon_AudioChannelDescription___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    Phonon::AudioChannelDescription *sipCpp = reinterpret_cast<Phonon::AudioChannelDescription *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Phonon_AudioChannelDescription));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Phonon::AudioChannelDescription * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Phonon_AudioChannelDescription, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Phonon::AudioChannelDescription::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_phonon,eq_slot,sipType_Phonon_AudioChannelDescription,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_Phonon_AudioChannelDescription___ne__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_Phonon_AudioChannelDescription___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    Phonon::AudioChannelDescription *sipCpp = reinterpret_cast<Phonon::AudioChannelDescription *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Phonon_AudioChannelDescription));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Phonon::AudioChannelDescription * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Phonon_AudioChannelDescription, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Phonon::AudioChannelDescription::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_phonon,ne_slot,sipType_Phonon_AudioChannelDescription,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Phonon_AudioChannelDescription(void *, const sipTypeDef *);}
static void *cast_Phonon_AudioChannelDescription(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_Phonon_AudioChannelDescription)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Phonon_AudioChannelDescription(void *, int);}
static void release_Phonon_AudioChannelDescription(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<Phonon::AudioChannelDescription *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_Phonon_AudioChannelDescription(void *, SIP_SSIZE_T, const void *);}
static void assign_Phonon_AudioChannelDescription(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<Phonon::AudioChannelDescription *>(sipDst)[sipDstIdx] = *reinterpret_cast<const Phonon::AudioChannelDescription *>(sipSrc);
}


extern "C" {static void *array_Phonon_AudioChannelDescription(SIP_SSIZE_T);}
static void *array_Phonon_AudioChannelDescription(SIP_SSIZE_T sipNrElem)
{
    return new Phonon::AudioChannelDescription[sipNrElem];
}


extern "C" {static void *copy_Phonon_AudioChannelDescription(const void *, SIP_SSIZE_T);}
static void *copy_Phonon_AudioChannelDescription(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new Phonon::AudioChannelDescription(reinterpret_cast<const Phonon::AudioChannelDescription *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Phonon_AudioChannelDescription(sipSimpleWrapper *);}
static void dealloc_Phonon_AudioChannelDescription(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_Phonon_AudioChannelDescription(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_Phonon_AudioChannelDescription(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_Phonon_AudioChannelDescription(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    Phonon::AudioChannelDescription *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Phonon::AudioChannelDescription();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        int a0;
        const QHash<QByteArray,QVariant> * a1;
        int a1State = 0;

        static const char *sipKwdList[] = {
            sipName_index,
            sipName_properties,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "iJ1", &a0, sipType_QHash_0100QByteArray_0100QVariant,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Phonon::AudioChannelDescription(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QHash<QByteArray,QVariant> *>(a1),sipType_QHash_0100QByteArray_0100QVariant,a1State);

            return sipCpp;
        }
    }

    {
        const Phonon::AudioChannelDescription * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Phonon_AudioChannelDescription, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Phonon::AudioChannelDescription(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Phonon_AudioChannelDescription[] = {
    {(void *)slot_Phonon_AudioChannelDescription___eq__, eq_slot},
    {(void *)slot_Phonon_AudioChannelDescription___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_Phonon_AudioChannelDescription[] = {
    {SIP_MLNAME_CAST(sipName_description), meth_Phonon_AudioChannelDescription_description, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_AudioChannelDescription_description)},
    {SIP_MLNAME_CAST(sipName_fromIndex), (PyCFunction)meth_Phonon_AudioChannelDescription_fromIndex, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Phonon_AudioChannelDescription_fromIndex)},
    {SIP_MLNAME_CAST(sipName_index), meth_Phonon_AudioChannelDescription_index, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_AudioChannelDescription_index)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_Phonon_AudioChannelDescription_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_AudioChannelDescription_isValid)},
    {SIP_MLNAME_CAST(sipName_name), meth_Phonon_AudioChannelDescription_name, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_AudioChannelDescription_name)},
    {SIP_MLNAME_CAST(sipName_property), (PyCFunction)meth_Phonon_AudioChannelDescription_property, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Phonon_AudioChannelDescription_property)},
    {SIP_MLNAME_CAST(sipName_propertyNames), meth_Phonon_AudioChannelDescription_propertyNames, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_AudioChannelDescription_propertyNames)}
};

PyDoc_STRVAR(doc_Phonon_AudioChannelDescription, "\1Phonon.AudioChannelDescription()\n"
    "Phonon.AudioChannelDescription(int, dict-of-QByteArray-QVariant)\n"
    "Phonon.AudioChannelDescription(Phonon.AudioChannelDescription)");


pyqt4ClassTypeDef sipTypeDef_phonon_Phonon_AudioChannelDescription = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Phonon__AudioChannelDescription,
        {0}
    },
    {
        sipNameNr_AudioChannelDescription,
        {0, 255, 0},
        7, methods_Phonon_AudioChannelDescription,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Phonon_AudioChannelDescription,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_Phonon_AudioChannelDescription,
    init_Phonon_AudioChannelDescription,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Phonon_AudioChannelDescription,
    assign_Phonon_AudioChannelDescription,
    array_Phonon_AudioChannelDescription,
    copy_Phonon_AudioChannelDescription,
    release_Phonon_AudioChannelDescription,
    cast_Phonon_AudioChannelDescription,
    0,
    0,
    0
},
    0,
    0,
    0
};

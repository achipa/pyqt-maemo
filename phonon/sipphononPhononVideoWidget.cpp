/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:35 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIphonon.h"

#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 88 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescriptionmodel.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/path.sip"
#include <path.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/path.sip"
#include <path.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 111 "sipphononPhononVideoWidget.cpp"

#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 115 "sipphononPhononVideoWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 118 "sipphononPhononVideoWidget.cpp"
#line 238 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 121 "sipphononPhononVideoWidget.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 124 "sipphononPhononVideoWidget.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 127 "sipphononPhononVideoWidget.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 130 "sipphononPhononVideoWidget.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 133 "sipphononPhononVideoWidget.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 136 "sipphononPhononVideoWidget.cpp"
#line 39 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 139 "sipphononPhononVideoWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 142 "sipphononPhononVideoWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 145 "sipphononPhononVideoWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 148 "sipphononPhononVideoWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 151 "sipphononPhononVideoWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 154 "sipphononPhononVideoWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 157 "sipphononPhononVideoWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 160 "sipphononPhononVideoWidget.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 163 "sipphononPhononVideoWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 166 "sipphononPhononVideoWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 169 "sipphononPhononVideoWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 172 "sipphononPhononVideoWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 175 "sipphononPhononVideoWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 178 "sipphononPhononVideoWidget.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 181 "sipphononPhononVideoWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 184 "sipphononPhononVideoWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 187 "sipphononPhononVideoWidget.cpp"
#line 520 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 539 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 192 "sipphononPhononVideoWidget.cpp"
#line 478 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 195 "sipphononPhononVideoWidget.cpp"
#line 466 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 198 "sipphononPhononVideoWidget.cpp"
#line 565 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 201 "sipphononPhononVideoWidget.cpp"
#line 619 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 204 "sipphononPhononVideoWidget.cpp"
#line 590 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 207 "sipphononPhononVideoWidget.cpp"
#line 607 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 210 "sipphononPhononVideoWidget.cpp"
#line 675 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 213 "sipphononPhononVideoWidget.cpp"
#line 301 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 216 "sipphononPhononVideoWidget.cpp"
#line 490 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 219 "sipphononPhononVideoWidget.cpp"
#line 442 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 222 "sipphononPhononVideoWidget.cpp"
#line 428 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 225 "sipphononPhononVideoWidget.cpp"
#line 414 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 228 "sipphononPhononVideoWidget.cpp"
#line 399 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 231 "sipphononPhononVideoWidget.cpp"
#line 379 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 234 "sipphononPhononVideoWidget.cpp"
#line 350 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 237 "sipphononPhononVideoWidget.cpp"
#line 279 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 240 "sipphononPhononVideoWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 243 "sipphononPhononVideoWidget.cpp"
#line 68 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 246 "sipphononPhononVideoWidget.cpp"
#line 42 "/home/maemo/python-qt4-4.7/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 249 "sipphononPhononVideoWidget.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 252 "sipphononPhononVideoWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 255 "sipphononPhononVideoWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 258 "sipphononPhononVideoWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 261 "sipphononPhononVideoWidget.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 264 "sipphononPhononVideoWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 267 "sipphononPhononVideoWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 270 "sipphononPhononVideoWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 273 "sipphononPhononVideoWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 276 "sipphononPhononVideoWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 279 "sipphononPhononVideoWidget.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 282 "sipphononPhononVideoWidget.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 285 "sipphononPhononVideoWidget.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 288 "sipphononPhononVideoWidget.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 291 "sipphononPhononVideoWidget.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 294 "sipphononPhononVideoWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 297 "sipphononPhononVideoWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 300 "sipphononPhononVideoWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 303 "sipphononPhononVideoWidget.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 306 "sipphononPhononVideoWidget.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 88 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescriptionmodel.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/path.sip"
#include <path.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/path.sip"
#include <path.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 381 "sipphononPhononVideoWidget.cpp"


class sipPhonon_VideoWidget : public Phonon::VideoWidget
{
public:
    sipPhonon_VideoWidget(QWidget *);
    virtual ~sipPhonon_VideoWidget();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void mouseMoveEvent(QMouseEvent *);
    bool event(QEvent *);
    int devType() const;
    void setVisible(bool);
    QSize sizeHint() const;
    QSize minimumSizeHint() const;
    int heightForWidth(int) const;
    QPaintEngine * paintEngine() const;
    void mousePressEvent(QMouseEvent *);
    void mouseReleaseEvent(QMouseEvent *);
    void mouseDoubleClickEvent(QMouseEvent *);
    void wheelEvent(QWheelEvent *);
    void keyPressEvent(QKeyEvent *);
    void keyReleaseEvent(QKeyEvent *);
    void focusInEvent(QFocusEvent *);
    void focusOutEvent(QFocusEvent *);
    void enterEvent(QEvent *);
    void leaveEvent(QEvent *);
    void paintEvent(QPaintEvent *);
    void moveEvent(QMoveEvent *);
    void resizeEvent(QResizeEvent *);
    void closeEvent(QCloseEvent *);
    void contextMenuEvent(QContextMenuEvent *);
    void tabletEvent(QTabletEvent *);
    void actionEvent(QActionEvent *);
    void dragEnterEvent(QDragEnterEvent *);
    void dragMoveEvent(QDragMoveEvent *);
    void dragLeaveEvent(QDragLeaveEvent *);
    void dropEvent(QDropEvent *);
    void showEvent(QShowEvent *);
    void hideEvent(QHideEvent *);
    void changeEvent(QEvent *);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void inputMethodEvent(QInputMethodEvent *);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    void enabledChange(bool);
    void paletteChange(const QPalette&);
    void fontChange(const QFont&);
    void windowActivationChange(bool);
    void languageChange();
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipPhonon_VideoWidget(const sipPhonon_VideoWidget &);
    sipPhonon_VideoWidget &operator = (const sipPhonon_VideoWidget &);

    char sipPyMethods[47];
};

sipPhonon_VideoWidget::sipPhonon_VideoWidget(QWidget *a0): Phonon::VideoWidget(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipPhonon_VideoWidget::~sipPhonon_VideoWidget()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipPhonon_VideoWidget::metaObject() const
{
    return sip_phonon_qt_metaobject(sipPySelf,sipType_Phonon_VideoWidget);
}

int sipPhonon_VideoWidget::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = Phonon::VideoWidget::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_phonon_qt_metacall(sipPySelf,sipType_Phonon_VideoWidget,_c,_id,_a);

    return _id;
}

void *sipPhonon_VideoWidget::qt_metacast(const char *_clname)
{
    return (sip_phonon_qt_metacast && sip_phonon_qt_metacast(sipPySelf,sipType_Phonon_VideoWidget,_clname)) ? this : Phonon::VideoWidget::qt_metacast(_clname);
}

void sipPhonon_VideoWidget::mouseMoveEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!meth)
    {
        Phonon::VideoWidget::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t,PyObject *,QMouseEvent *);

    ((sipVH_QtGui_26)(sipModuleAPI_phonon_QtGui->em_virthandlers[26]))(sipGILState,meth,a0);
}

bool sipPhonon_VideoWidget::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_event);

    if (!meth)
        return Phonon::VideoWidget::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_phonon_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

int sipPhonon_VideoWidget::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_phonon_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

void sipPhonon_VideoWidget::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_setVisible);

    if (!meth)
    {
        QWidget::setVisible(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_phonon_QtGui->em_virthandlers[6]))(sipGILState,meth,a0);
}

QSize sipPhonon_VideoWidget::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QWidget::sizeHint();

    typedef QSize (*sipVH_QtGui_4)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtGui_4)(sipModuleAPI_phonon_QtGui->em_virthandlers[4]))(sipGILState,meth);
}

QSize sipPhonon_VideoWidget::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!meth)
        return QWidget::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_4)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtGui_4)(sipModuleAPI_phonon_QtGui->em_virthandlers[4]))(sipGILState,meth);
}

int sipPhonon_VideoWidget::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QWidget::heightForWidth(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtGui_28)(sipModuleAPI_phonon_QtGui->em_virthandlers[28]))(sipGILState,meth,a0);
}

QPaintEngine * sipPhonon_VideoWidget::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QWidget::paintEngine();

    typedef QPaintEngine * (*sipVH_QtGui_27)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtGui_27)(sipModuleAPI_phonon_QtGui->em_virthandlers[27]))(sipGILState,meth);
}

void sipPhonon_VideoWidget::mousePressEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_mousePressEvent);

    if (!meth)
    {
        QWidget::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t,PyObject *,QMouseEvent *);

    ((sipVH_QtGui_26)(sipModuleAPI_phonon_QtGui->em_virthandlers[26]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::mouseReleaseEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!meth)
    {
        QWidget::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t,PyObject *,QMouseEvent *);

    ((sipVH_QtGui_26)(sipModuleAPI_phonon_QtGui->em_virthandlers[26]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::mouseDoubleClickEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!meth)
    {
        QWidget::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t,PyObject *,QMouseEvent *);

    ((sipVH_QtGui_26)(sipModuleAPI_phonon_QtGui->em_virthandlers[26]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::wheelEvent(QWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_wheelEvent);

    if (!meth)
    {
        QWidget::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t,PyObject *,QWheelEvent *);

    ((sipVH_QtGui_5)(sipModuleAPI_phonon_QtGui->em_virthandlers[5]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_keyPressEvent);

    if (!meth)
    {
        QWidget::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_25)(sip_gilstate_t,PyObject *,QKeyEvent *);

    ((sipVH_QtGui_25)(sipModuleAPI_phonon_QtGui->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!meth)
    {
        QWidget::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_25)(sip_gilstate_t,PyObject *,QKeyEvent *);

    ((sipVH_QtGui_25)(sipModuleAPI_phonon_QtGui->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_focusInEvent);

    if (!meth)
    {
        QWidget::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_24)(sip_gilstate_t,PyObject *,QFocusEvent *);

    ((sipVH_QtGui_24)(sipModuleAPI_phonon_QtGui->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_focusOutEvent);

    if (!meth)
    {
        QWidget::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_24)(sip_gilstate_t,PyObject *,QFocusEvent *);

    ((sipVH_QtGui_24)(sipModuleAPI_phonon_QtGui->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::enterEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_enterEvent);

    if (!meth)
    {
        QWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_phonon_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::leaveEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_leaveEvent);

    if (!meth)
    {
        QWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_phonon_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::paintEvent(QPaintEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_paintEvent);

    if (!meth)
    {
        QWidget::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t,PyObject *,QPaintEvent *);

    ((sipVH_QtGui_3)(sipModuleAPI_phonon_QtGui->em_virthandlers[3]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::moveEvent(QMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_moveEvent);

    if (!meth)
    {
        QWidget::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_23)(sip_gilstate_t,PyObject *,QMoveEvent *);

    ((sipVH_QtGui_23)(sipModuleAPI_phonon_QtGui->em_virthandlers[23]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::resizeEvent(QResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_resizeEvent);

    if (!meth)
    {
        QWidget::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t,PyObject *,QResizeEvent *);

    ((sipVH_QtGui_2)(sipModuleAPI_phonon_QtGui->em_virthandlers[2]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_closeEvent);

    if (!meth)
    {
        QWidget::closeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_22)(sip_gilstate_t,PyObject *,QCloseEvent *);

    ((sipVH_QtGui_22)(sipModuleAPI_phonon_QtGui->em_virthandlers[22]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::contextMenuEvent(QContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!meth)
    {
        QWidget::contextMenuEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_21)(sip_gilstate_t,PyObject *,QContextMenuEvent *);

    ((sipVH_QtGui_21)(sipModuleAPI_phonon_QtGui->em_virthandlers[21]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::tabletEvent(QTabletEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_tabletEvent);

    if (!meth)
    {
        QWidget::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_20)(sip_gilstate_t,PyObject *,QTabletEvent *);

    ((sipVH_QtGui_20)(sipModuleAPI_phonon_QtGui->em_virthandlers[20]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::actionEvent(QActionEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_actionEvent);

    if (!meth)
    {
        QWidget::actionEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_19)(sip_gilstate_t,PyObject *,QActionEvent *);

    ((sipVH_QtGui_19)(sipModuleAPI_phonon_QtGui->em_virthandlers[19]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::dragEnterEvent(QDragEnterEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!meth)
    {
        QWidget::dragEnterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_18)(sip_gilstate_t,PyObject *,QDragEnterEvent *);

    ((sipVH_QtGui_18)(sipModuleAPI_phonon_QtGui->em_virthandlers[18]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::dragMoveEvent(QDragMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!meth)
    {
        QWidget::dragMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_17)(sip_gilstate_t,PyObject *,QDragMoveEvent *);

    ((sipVH_QtGui_17)(sipModuleAPI_phonon_QtGui->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::dragLeaveEvent(QDragLeaveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!meth)
    {
        QWidget::dragLeaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_16)(sip_gilstate_t,PyObject *,QDragLeaveEvent *);

    ((sipVH_QtGui_16)(sipModuleAPI_phonon_QtGui->em_virthandlers[16]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::dropEvent(QDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_dropEvent);

    if (!meth)
    {
        QWidget::dropEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_15)(sip_gilstate_t,PyObject *,QDropEvent *);

    ((sipVH_QtGui_15)(sipModuleAPI_phonon_QtGui->em_virthandlers[15]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_showEvent);

    if (!meth)
    {
        QWidget::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_1)(sip_gilstate_t,PyObject *,QShowEvent *);

    ((sipVH_QtGui_1)(sipModuleAPI_phonon_QtGui->em_virthandlers[1]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_hideEvent);

    if (!meth)
    {
        QWidget::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t,PyObject *,QHideEvent *);

    ((sipVH_QtGui_0)(sipModuleAPI_phonon_QtGui->em_virthandlers[0]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_changeEvent);

    if (!meth)
    {
        QWidget::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_phonon_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

int sipPhonon_VideoWidget::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QWidget::metric(a0);

    typedef int (*sipVH_QtGui_14)(sip_gilstate_t,PyObject *,QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_14)(sipModuleAPI_phonon_QtGui->em_virthandlers[14]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!meth)
    {
        QWidget::inputMethodEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_13)(sip_gilstate_t,PyObject *,QInputMethodEvent *);

    ((sipVH_QtGui_13)(sipModuleAPI_phonon_QtGui->em_virthandlers[13]))(sipGILState,meth,a0);
}

QVariant sipPhonon_VideoWidget::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!meth)
        return QWidget::inputMethodQuery(a0);

    typedef QVariant (*sipVH_QtGui_12)(sip_gilstate_t,PyObject *,Qt::InputMethodQuery);

    return ((sipVH_QtGui_12)(sipModuleAPI_phonon_QtGui->em_virthandlers[12]))(sipGILState,meth,a0);
}

bool sipPhonon_VideoWidget::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!meth)
        return QWidget::focusNextPrevChild(a0);

    typedef bool (*sipVH_QtGui_11)(sip_gilstate_t,PyObject *,bool);

    return ((sipVH_QtGui_11)(sipModuleAPI_phonon_QtGui->em_virthandlers[11]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_enabledChange);

    if (!meth)
    {
        QWidget::enabledChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_phonon_QtGui->em_virthandlers[6]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_paletteChange);

    if (!meth)
    {
        QWidget::paletteChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_10)(sip_gilstate_t,PyObject *,const QPalette&);

    ((sipVH_QtGui_10)(sipModuleAPI_phonon_QtGui->em_virthandlers[10]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_fontChange);

    if (!meth)
    {
        QWidget::fontChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t,PyObject *,const QFont&);

    ((sipVH_QtGui_9)(sipModuleAPI_phonon_QtGui->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_windowActivationChange);

    if (!meth)
    {
        QWidget::windowActivationChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_phonon_QtGui->em_virthandlers[6]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_languageChange);

    if (!meth)
    {
        QWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_phonon_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

bool sipPhonon_VideoWidget::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_phonon_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipPhonon_VideoWidget::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_phonon_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_phonon_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_phonon_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_phonon_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipPhonon_VideoWidget::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_phonon_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_aspectRatio, "Phonon.VideoWidget.aspectRatio() -> Phonon.VideoWidget.AspectRatio");

extern "C" {static PyObject *meth_Phonon_VideoWidget_aspectRatio(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_aspectRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp))
        {
            Phonon::VideoWidget::AspectRatio sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->aspectRatio();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Phonon_VideoWidget_AspectRatio);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_aspectRatio, doc_Phonon_VideoWidget_aspectRatio);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_scaleMode, "Phonon.VideoWidget.scaleMode() -> Phonon.VideoWidget.ScaleMode");

extern "C" {static PyObject *meth_Phonon_VideoWidget_scaleMode(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_scaleMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp))
        {
            Phonon::VideoWidget::ScaleMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->scaleMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Phonon_VideoWidget_ScaleMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_scaleMode, doc_Phonon_VideoWidget_scaleMode);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_brightness, "Phonon.VideoWidget.brightness() -> float");

extern "C" {static PyObject *meth_Phonon_VideoWidget_brightness(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_brightness(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->brightness();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_brightness, doc_Phonon_VideoWidget_brightness);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_contrast, "Phonon.VideoWidget.contrast() -> float");

extern "C" {static PyObject *meth_Phonon_VideoWidget_contrast(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_contrast(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contrast();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_contrast, doc_Phonon_VideoWidget_contrast);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_hue, "Phonon.VideoWidget.hue() -> float");

extern "C" {static PyObject *meth_Phonon_VideoWidget_hue(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_hue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hue();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_hue, doc_Phonon_VideoWidget_hue);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_saturation, "Phonon.VideoWidget.saturation() -> float");

extern "C" {static PyObject *meth_Phonon_VideoWidget_saturation(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_saturation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->saturation();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_saturation, doc_Phonon_VideoWidget_saturation);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_setFullScreen, "Phonon.VideoWidget.setFullScreen(bool)");

extern "C" {static PyObject *meth_Phonon_VideoWidget_setFullScreen(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_setFullScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFullScreen(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_setFullScreen, doc_Phonon_VideoWidget_setFullScreen);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_exitFullScreen, "Phonon.VideoWidget.exitFullScreen()");

extern "C" {static PyObject *meth_Phonon_VideoWidget_exitFullScreen(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_exitFullScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->exitFullScreen();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_exitFullScreen, doc_Phonon_VideoWidget_exitFullScreen);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_enterFullScreen, "Phonon.VideoWidget.enterFullScreen()");

extern "C" {static PyObject *meth_Phonon_VideoWidget_enterFullScreen(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_enterFullScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->enterFullScreen();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_enterFullScreen, doc_Phonon_VideoWidget_enterFullScreen);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_setAspectRatio, "Phonon.VideoWidget.setAspectRatio(Phonon.VideoWidget.AspectRatio)");

extern "C" {static PyObject *meth_Phonon_VideoWidget_setAspectRatio(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_setAspectRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::VideoWidget::AspectRatio a0;
        Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp, sipType_Phonon_VideoWidget_AspectRatio, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAspectRatio(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_setAspectRatio, doc_Phonon_VideoWidget_setAspectRatio);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_setScaleMode, "Phonon.VideoWidget.setScaleMode(Phonon.VideoWidget.ScaleMode)");

extern "C" {static PyObject *meth_Phonon_VideoWidget_setScaleMode(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_setScaleMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::VideoWidget::ScaleMode a0;
        Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp, sipType_Phonon_VideoWidget_ScaleMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setScaleMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_setScaleMode, doc_Phonon_VideoWidget_setScaleMode);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_setBrightness, "Phonon.VideoWidget.setBrightness(float)");

extern "C" {static PyObject *meth_Phonon_VideoWidget_setBrightness(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_setBrightness(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBrightness(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_setBrightness, doc_Phonon_VideoWidget_setBrightness);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_setContrast, "Phonon.VideoWidget.setContrast(float)");

extern "C" {static PyObject *meth_Phonon_VideoWidget_setContrast(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_setContrast(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setContrast(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_setContrast, doc_Phonon_VideoWidget_setContrast);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_setHue, "Phonon.VideoWidget.setHue(float)");

extern "C" {static PyObject *meth_Phonon_VideoWidget_setHue(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_setHue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHue(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_setHue, doc_Phonon_VideoWidget_setHue);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_setSaturation, "Phonon.VideoWidget.setSaturation(float)");

extern "C" {static PyObject *meth_Phonon_VideoWidget_setSaturation(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_setSaturation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSaturation(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_setSaturation, doc_Phonon_VideoWidget_setSaturation);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_mouseMoveEvent, "Phonon.VideoWidget.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_Phonon_VideoWidget_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->Phonon::VideoWidget::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_mouseMoveEvent, doc_Phonon_VideoWidget_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_event, "Phonon.VideoWidget.event(QEvent) -> bool");

extern "C" {static PyObject *meth_Phonon_VideoWidget_event(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->Phonon::VideoWidget::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_event, doc_Phonon_VideoWidget_event);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Phonon_VideoWidget(void *, const sipTypeDef *);}
static void *cast_Phonon_VideoWidget(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_Phonon_VideoWidget)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QWidget)->ctd_cast((QWidget *)(Phonon::VideoWidget *)ptr,targetType)) != NULL)
        return res;

    if ((res = ((const sipClassTypeDef *)sipType_Phonon_AbstractVideoOutput)->ctd_cast((Phonon::AbstractVideoOutput *)(Phonon::VideoWidget *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Phonon_VideoWidget(void *, int);}
static void release_Phonon_VideoWidget(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipPhonon_VideoWidget *>(sipCppV);
    else
        delete reinterpret_cast<Phonon::VideoWidget *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_Phonon_VideoWidget(sipSimpleWrapper *);}
static void dealloc_Phonon_VideoWidget(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipPhonon_VideoWidget *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_Phonon_VideoWidget(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_Phonon_VideoWidget(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_Phonon_VideoWidget(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipPhonon_VideoWidget *sipCpp = 0;

    {
        QWidget * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipPhonon_VideoWidget(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_Phonon_VideoWidget[] = {{741, 1, 0}, {2, 255, 1}};


static PyMethodDef methods_Phonon_VideoWidget[] = {
    {SIP_MLNAME_CAST(sipName_aspectRatio), meth_Phonon_VideoWidget_aspectRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_aspectRatio)},
    {SIP_MLNAME_CAST(sipName_brightness), meth_Phonon_VideoWidget_brightness, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_brightness)},
    {SIP_MLNAME_CAST(sipName_contrast), meth_Phonon_VideoWidget_contrast, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_contrast)},
    {SIP_MLNAME_CAST(sipName_enterFullScreen), meth_Phonon_VideoWidget_enterFullScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_enterFullScreen)},
    {SIP_MLNAME_CAST(sipName_event), meth_Phonon_VideoWidget_event, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_event)},
    {SIP_MLNAME_CAST(sipName_exitFullScreen), meth_Phonon_VideoWidget_exitFullScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_exitFullScreen)},
    {SIP_MLNAME_CAST(sipName_hue), meth_Phonon_VideoWidget_hue, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_hue)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_Phonon_VideoWidget_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_saturation), meth_Phonon_VideoWidget_saturation, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_saturation)},
    {SIP_MLNAME_CAST(sipName_scaleMode), meth_Phonon_VideoWidget_scaleMode, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_scaleMode)},
    {SIP_MLNAME_CAST(sipName_setAspectRatio), meth_Phonon_VideoWidget_setAspectRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_setAspectRatio)},
    {SIP_MLNAME_CAST(sipName_setBrightness), meth_Phonon_VideoWidget_setBrightness, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_setBrightness)},
    {SIP_MLNAME_CAST(sipName_setContrast), meth_Phonon_VideoWidget_setContrast, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_setContrast)},
    {SIP_MLNAME_CAST(sipName_setFullScreen), meth_Phonon_VideoWidget_setFullScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_setFullScreen)},
    {SIP_MLNAME_CAST(sipName_setHue), meth_Phonon_VideoWidget_setHue, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_setHue)},
    {SIP_MLNAME_CAST(sipName_setSaturation), meth_Phonon_VideoWidget_setSaturation, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_setSaturation)},
    {SIP_MLNAME_CAST(sipName_setScaleMode), meth_Phonon_VideoWidget_setScaleMode, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_setScaleMode)}
};

static sipEnumMemberDef enummembers_Phonon_VideoWidget[] = {
    {sipName_AspectRatio16_9, Phonon::VideoWidget::AspectRatio16_9, 34},
    {sipName_AspectRatio4_3, Phonon::VideoWidget::AspectRatio4_3, 34},
    {sipName_AspectRatioAuto, Phonon::VideoWidget::AspectRatioAuto, 34},
    {sipName_AspectRatioWidget, Phonon::VideoWidget::AspectRatioWidget, 34},
    {sipName_FitInView, Phonon::VideoWidget::FitInView, 35},
    {sipName_ScaleAndCrop, Phonon::VideoWidget::ScaleAndCrop, 35},
};

PyDoc_STRVAR(doc_Phonon_VideoWidget, "\1Phonon.VideoWidget(QWidget parent=None)");


pyqt4ClassTypeDef sipTypeDef_phonon_Phonon_VideoWidget = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_Phonon__VideoWidget,
        {0}
    },
    {
        sipNameNr_VideoWidget,
        {0, 255, 0},
        17, methods_Phonon_VideoWidget,
        6, enummembers_Phonon_VideoWidget,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Phonon_VideoWidget,
    -1,
    -1,
    supers_Phonon_VideoWidget,
    0,
    init_Phonon_VideoWidget,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Phonon_VideoWidget,
    0,
    0,
    0,
    release_Phonon_VideoWidget,
    cast_Phonon_VideoWidget,
    0,
    0,
    0
},
    &Phonon::VideoWidget::staticMetaObject,
    0,
    0
};

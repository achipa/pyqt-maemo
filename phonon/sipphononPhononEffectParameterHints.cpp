/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:35 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIphonon.h"

#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 63 "sipphononPhononEffectParameterHints.cpp"

#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effect.sip"
#include <effect.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 88 "/home/maemo/python-qt4-4.7/sip/phonon/objectdescription.sip"
#include <objectdescriptionmodel.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/path.sip"
#include <path.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/path.sip"
#include <path.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 38 "/home/maemo/python-qt4-4.7/sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 45 "/home/maemo/python-qt4-4.7/sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 139 "sipphononPhononEffectParameterHints.cpp"


extern "C" {static int slot_Phonon_EffectParameter_Hints___bool__(PyObject *sipSelf);}
static int slot_Phonon_EffectParameter_Hints___bool__(PyObject *sipSelf)
{
    Phonon::EffectParameter::Hints *sipCpp = reinterpret_cast<Phonon::EffectParameter::Hints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Phonon_EffectParameter_Hints));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 321 "/home/maemo/python-qt4-4.7/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator int() != 0);
#line 157 "sipphononPhononEffectParameterHints.cpp"

            return sipRes;
        }
    }
}


extern "C" {static PyObject *slot_Phonon_EffectParameter_Hints___ne__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_Phonon_EffectParameter_Hints___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    Phonon::EffectParameter::Hints *sipCpp = reinterpret_cast<Phonon::EffectParameter::Hints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Phonon_EffectParameter_Hints));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Phonon::EffectParameter::Hints * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Phonon_EffectParameter_Hints, &a0, &a0State))
        {
            bool sipRes = 0;

#line 316 "/home/maemo/python-qt4-4.7/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator int() != a0->operator int());
#line 185 "sipphononPhononEffectParameterHints.cpp"
            sipReleaseType(const_cast<Phonon::EffectParameter::Hints *>(a0),sipType_Phonon_EffectParameter_Hints,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_phonon,ne_slot,sipType_Phonon_EffectParameter_Hints,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_Phonon_EffectParameter_Hints___eq__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_Phonon_EffectParameter_Hints___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    Phonon::EffectParameter::Hints *sipCpp = reinterpret_cast<Phonon::EffectParameter::Hints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Phonon_EffectParameter_Hints));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Phonon::EffectParameter::Hints * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Phonon_EffectParameter_Hints, &a0, &a0State))
        {
            bool sipRes = 0;

#line 311 "/home/maemo/python-qt4-4.7/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator int() == a0->operator int());
#line 221 "sipphononPhononEffectParameterHints.cpp"
            sipReleaseType(const_cast<Phonon::EffectParameter::Hints *>(a0),sipType_Phonon_EffectParameter_Hints,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_phonon,eq_slot,sipType_Phonon_EffectParameter_Hints,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_Phonon_EffectParameter_Hints___invert__(PyObject *sipSelf);}
static PyObject *slot_Phonon_EffectParameter_Hints___invert__(PyObject *sipSelf)
{
    Phonon::EffectParameter::Hints *sipCpp = reinterpret_cast<Phonon::EffectParameter::Hints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Phonon_EffectParameter_Hints));

    if (!sipCpp)
        return 0;


    {
        {
            Phonon::EffectParameter::Hints *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Phonon::EffectParameter::Hints(~(*sipCpp));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Phonon_EffectParameter_Hints,NULL);
        }
    }
}


extern "C" {static PyObject *slot_Phonon_EffectParameter_Hints___and__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_Phonon_EffectParameter_Hints___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::EffectParameter::Hints * a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Phonon_EffectParameter_Hints, &a0, &a0State, &a1))
        {
            Phonon::EffectParameter::Hints *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Phonon::EffectParameter::Hints((*a0 & a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Phonon_EffectParameter_Hints,a0State);

            return sipConvertFromNewType(sipRes,sipType_Phonon_EffectParameter_Hints,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_phonon,and_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Phonon_EffectParameter_Hints___xor__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_Phonon_EffectParameter_Hints___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::EffectParameter::Hints * a0;
        int a0State = 0;
        Phonon::EffectParameter::Hints * a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1J1", sipType_Phonon_EffectParameter_Hints, &a0, &a0State, sipType_Phonon_EffectParameter_Hints, &a1, &a1State))
        {
            Phonon::EffectParameter::Hints *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Phonon::EffectParameter::Hints((*a0 ^ *a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Phonon_EffectParameter_Hints,a0State);
            sipReleaseType(a1,sipType_Phonon_EffectParameter_Hints,a1State);

            return sipConvertFromNewType(sipRes,sipType_Phonon_EffectParameter_Hints,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_phonon,xor_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Phonon_EffectParameter_Hints___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_Phonon_EffectParameter_Hints___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        Phonon::EffectParameter::Hints * a0;
        int a0State = 0;
        Phonon::EffectParameter::Hints * a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1J1", sipType_Phonon_EffectParameter_Hints, &a0, &a0State, sipType_Phonon_EffectParameter_Hints, &a1, &a1State))
        {
            Phonon::EffectParameter::Hints *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Phonon::EffectParameter::Hints((*a0 | *a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Phonon_EffectParameter_Hints,a0State);
            sipReleaseType(a1,sipType_Phonon_EffectParameter_Hints,a1State);

            return sipConvertFromNewType(sipRes,sipType_Phonon_EffectParameter_Hints,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_phonon,or_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Phonon_EffectParameter_Hints___int__(PyObject *sipSelf);}
static PyObject *slot_Phonon_EffectParameter_Hints___int__(PyObject *sipSelf)
{
    Phonon::EffectParameter::Hints *sipCpp = reinterpret_cast<Phonon::EffectParameter::Hints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Phonon_EffectParameter_Hints));

    if (!sipCpp)
        return 0;


    {
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = *sipCpp;
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }
}


extern "C" {static PyObject *slot_Phonon_EffectParameter_Hints___ixor__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_Phonon_EffectParameter_Hints___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Phonon_EffectParameter_Hints)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    Phonon::EffectParameter::Hints *sipCpp = reinterpret_cast<Phonon::EffectParameter::Hints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Phonon_EffectParameter_Hints));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        Phonon::EffectParameter::Hints * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Phonon_EffectParameter_Hints, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->Phonon::EffectParameter::Hints::operator^=(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Phonon_EffectParameter_Hints,a0State);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Phonon_EffectParameter_Hints___ior__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_Phonon_EffectParameter_Hints___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Phonon_EffectParameter_Hints)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    Phonon::EffectParameter::Hints *sipCpp = reinterpret_cast<Phonon::EffectParameter::Hints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Phonon_EffectParameter_Hints));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        Phonon::EffectParameter::Hints * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Phonon_EffectParameter_Hints, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->Phonon::EffectParameter::Hints::operator|=(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Phonon_EffectParameter_Hints,a0State);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Phonon_EffectParameter_Hints___iand__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_Phonon_EffectParameter_Hints___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Phonon_EffectParameter_Hints)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    Phonon::EffectParameter::Hints *sipCpp = reinterpret_cast<Phonon::EffectParameter::Hints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Phonon_EffectParameter_Hints));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->Phonon::EffectParameter::Hints::operator&=(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Phonon_EffectParameter_Hints(void *, const sipTypeDef *);}
static void *cast_Phonon_EffectParameter_Hints(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_Phonon_EffectParameter_Hints)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Phonon_EffectParameter_Hints(void *, int);}
static void release_Phonon_EffectParameter_Hints(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<Phonon::EffectParameter::Hints *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_Phonon_EffectParameter_Hints(void *, SIP_SSIZE_T, const void *);}
static void assign_Phonon_EffectParameter_Hints(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<Phonon::EffectParameter::Hints *>(sipDst)[sipDstIdx] = *reinterpret_cast<const Phonon::EffectParameter::Hints *>(sipSrc);
}


extern "C" {static void *array_Phonon_EffectParameter_Hints(SIP_SSIZE_T);}
static void *array_Phonon_EffectParameter_Hints(SIP_SSIZE_T sipNrElem)
{
    return new Phonon::EffectParameter::Hints[sipNrElem];
}


extern "C" {static void *copy_Phonon_EffectParameter_Hints(const void *, SIP_SSIZE_T);}
static void *copy_Phonon_EffectParameter_Hints(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new Phonon::EffectParameter::Hints(reinterpret_cast<const Phonon::EffectParameter::Hints *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Phonon_EffectParameter_Hints(sipSimpleWrapper *);}
static void dealloc_Phonon_EffectParameter_Hints(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_Phonon_EffectParameter_Hints(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_Phonon_EffectParameter_Hints(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_Phonon_EffectParameter_Hints(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    Phonon::EffectParameter::Hints *sipCpp = 0;

    {
        const Phonon::EffectParameter::Hints * a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_Phonon_EffectParameter_Hints, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Phonon::EffectParameter::Hints(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<Phonon::EffectParameter::Hints *>(a0),sipType_Phonon_EffectParameter_Hints,a0State);

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Phonon::EffectParameter::Hints(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Phonon::EffectParameter::Hints();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


extern "C" {static int convertTo_Phonon_EffectParameter_Hints(PyObject *, void **, int *, PyObject *);}
static int convertTo_Phonon_EffectParameter_Hints(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    Phonon::EffectParameter::Hints **sipCppPtr = reinterpret_cast<Phonon::EffectParameter::Hints **>(sipCppPtrV);

#line 326 "/home/maemo/python-qt4-4.7/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Phonon::EffectParameter::Hints is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Phonon_EffectParameter_Hint)) ||
            sipCanConvertToType(sipPy, sipType_Phonon_EffectParameter_Hints, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Phonon_EffectParameter_Hint)))
{
    *sipCppPtr = new Phonon::EffectParameter::Hints(SIPLong_AsLong(sipPy));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Phonon::EffectParameter::Hints *>(sipConvertToType(sipPy, sipType_Phonon_EffectParameter_Hints, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 637 "sipphononPhononEffectParameterHints.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Phonon_EffectParameter_Hints[] = {
    {(void *)slot_Phonon_EffectParameter_Hints___bool__, bool_slot},
    {(void *)slot_Phonon_EffectParameter_Hints___ne__, ne_slot},
    {(void *)slot_Phonon_EffectParameter_Hints___eq__, eq_slot},
    {(void *)slot_Phonon_EffectParameter_Hints___invert__, invert_slot},
    {(void *)slot_Phonon_EffectParameter_Hints___and__, and_slot},
    {(void *)slot_Phonon_EffectParameter_Hints___xor__, xor_slot},
    {(void *)slot_Phonon_EffectParameter_Hints___or__, or_slot},
    {(void *)slot_Phonon_EffectParameter_Hints___int__, int_slot},
    {(void *)slot_Phonon_EffectParameter_Hints___ixor__, ixor_slot},
    {(void *)slot_Phonon_EffectParameter_Hints___ior__, ior_slot},
    {(void *)slot_Phonon_EffectParameter_Hints___iand__, iand_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_Phonon_EffectParameter_Hints, "\1Phonon.EffectParameter.Hints(Phonon.EffectParameter.Hints)\n"
    "Phonon.EffectParameter.Hints(int)\n"
    "Phonon.EffectParameter.Hints()");


pyqt4ClassTypeDef sipTypeDef_phonon_Phonon_EffectParameter_Hints = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Phonon__EffectParameter__Hints,
        {0}
    },
    {
        sipNameNr_Hints,
        {15, 255, 0},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Phonon_EffectParameter_Hints,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_Phonon_EffectParameter_Hints,
    init_Phonon_EffectParameter_Hints,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Phonon_EffectParameter_Hints,
    assign_Phonon_EffectParameter_Hints,
    array_Phonon_EffectParameter_Hints,
    copy_Phonon_EffectParameter_Hints,
    release_Phonon_EffectParameter_Hints,
    cast_Phonon_EffectParameter_Hints,
    convertTo_Phonon_EffectParameter_Hints,
    0,
    0
},
    0,
    1,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:03 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 39 "/home/maemo/python-qt4-4.7/sip/QtGui/qfileiconprovider.sip"
#include <qfileiconprovider.h>
#line 39 "sipQtGuiQFileIconProvider.cpp"

#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtGuiQFileIconProvider.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qfileinfo.sip"
#include <qfileinfo.h>
#line 46 "sipQtGuiQFileIconProvider.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 49 "sipQtGuiQFileIconProvider.cpp"


class sipQFileIconProvider : public QFileIconProvider
{
public:
    sipQFileIconProvider();
    virtual ~sipQFileIconProvider();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QIcon icon(QFileIconProvider::IconType) const;
    QIcon icon(const QFileInfo&) const;
    QString type(const QFileInfo&) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQFileIconProvider(const sipQFileIconProvider &);
    sipQFileIconProvider &operator = (const sipQFileIconProvider &);

    char sipPyMethods[3];
};

sipQFileIconProvider::sipQFileIconProvider(): QFileIconProvider(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFileIconProvider::~sipQFileIconProvider()
{
    sipCommonDtor(sipPySelf);
}

QIcon sipQFileIconProvider::icon(QFileIconProvider::IconType a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_icon);

    if (!meth)
        return QFileIconProvider::icon(a0);

    extern QIcon sipVH_QtGui_219(sip_gilstate_t,PyObject *,QFileIconProvider::IconType);

    return sipVH_QtGui_219(sipGILState,meth,a0);
}

QIcon sipQFileIconProvider::icon(const QFileInfo& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_icon);

    if (!meth)
        return QFileIconProvider::icon(a0);

    extern QIcon sipVH_QtGui_218(sip_gilstate_t,PyObject *,const QFileInfo&);

    return sipVH_QtGui_218(sipGILState,meth,a0);
}

QString sipQFileIconProvider::type(const QFileInfo& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_type);

    if (!meth)
        return QFileIconProvider::type(a0);

    extern QString sipVH_QtGui_217(sip_gilstate_t,PyObject *,const QFileInfo&);

    return sipVH_QtGui_217(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QFileIconProvider_icon, "QFileIconProvider.icon(QFileIconProvider.IconType) -> QIcon\n"
    "QFileIconProvider.icon(QFileInfo) -> QIcon");

extern "C" {static PyObject *meth_QFileIconProvider_icon(PyObject *, PyObject *);}
static PyObject *meth_QFileIconProvider_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFileIconProvider::IconType a0;
        QFileIconProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFileIconProvider, &sipCpp, sipType_QFileIconProvider_IconType, &a0))
        {
            QIcon *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QIcon((sipSelfWasArg ? sipCpp->QFileIconProvider::icon(a0) : sipCpp->icon(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    {
        const QFileInfo * a0;
        QFileIconProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileIconProvider, &sipCpp, sipType_QFileInfo, &a0))
        {
            QIcon *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QIcon((sipSelfWasArg ? sipCpp->QFileIconProvider::icon(*a0) : sipCpp->icon(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileIconProvider, sipName_icon, doc_QFileIconProvider_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QFileIconProvider_type, "QFileIconProvider.type(QFileInfo) -> QString");

extern "C" {static PyObject *meth_QFileIconProvider_type(PyObject *, PyObject *);}
static PyObject *meth_QFileIconProvider_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFileInfo * a0;
        QFileIconProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileIconProvider, &sipCpp, sipType_QFileInfo, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((sipSelfWasArg ? sipCpp->QFileIconProvider::type(*a0) : sipCpp->type(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileIconProvider, sipName_type, doc_QFileIconProvider_type);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QFileIconProvider(void *, const sipTypeDef *);}
static void *cast_QFileIconProvider(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QFileIconProvider)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFileIconProvider(void *, int);}
static void release_QFileIconProvider(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQFileIconProvider *>(sipCppV);
    else
        delete reinterpret_cast<QFileIconProvider *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QFileIconProvider(sipSimpleWrapper *);}
static void dealloc_QFileIconProvider(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQFileIconProvider *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QFileIconProvider(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QFileIconProvider(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QFileIconProvider(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQFileIconProvider *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQFileIconProvider();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QFileIconProvider[] = {
    {SIP_MLNAME_CAST(sipName_icon), meth_QFileIconProvider_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileIconProvider_icon)},
    {SIP_MLNAME_CAST(sipName_type), meth_QFileIconProvider_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileIconProvider_type)}
};

static sipEnumMemberDef enummembers_QFileIconProvider[] = {
    {sipName_Computer, QFileIconProvider::Computer, 112},
    {sipName_Desktop, QFileIconProvider::Desktop, 112},
    {sipName_Drive, QFileIconProvider::Drive, 112},
    {sipName_File, QFileIconProvider::File, 112},
    {sipName_Folder, QFileIconProvider::Folder, 112},
    {sipName_Network, QFileIconProvider::Network, 112},
    {sipName_Trashcan, QFileIconProvider::Trashcan, 112},
};

PyDoc_STRVAR(doc_QFileIconProvider, "\1QFileIconProvider()");


pyqt4ClassTypeDef sipTypeDef_QtGui_QFileIconProvider = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QFileIconProvider,
        {0}
    },
    {
        sipNameNr_QFileIconProvider,
        {0, 0, 1},
        2, methods_QFileIconProvider,
        7, enummembers_QFileIconProvider,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QFileIconProvider,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QFileIconProvider,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QFileIconProvider,
    0,
    0,
    0,
    release_QFileIconProvider,
    cast_QFileIconProvider,
    0,
    0,
    0
},
    0,
    0,
    0
};

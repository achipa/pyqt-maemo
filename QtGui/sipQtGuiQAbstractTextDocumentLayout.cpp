/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:03 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 48 "/home/maemo/python-qt4-4.7/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 59 "/home/maemo/python-qt4-4.7/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 43 "sipQtGuiQAbstractTextDocumentLayout.cpp"

#line 66 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 47 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 312 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 50 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 53 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 160 "/home/maemo/python-qt4-4.7/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 56 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 59 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 72 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 62 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 144 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 170 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 67 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 100 "/home/maemo/python-qt4-4.7/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 70 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 102 "/home/maemo/python-qt4-4.7/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 73 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 76 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 79 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 78 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 96 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 84 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 87 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 94 "/home/maemo/python-qt4-4.7/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 90 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 93 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 48 "/home/maemo/python-qt4-4.7/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 59 "/home/maemo/python-qt4-4.7/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 100 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 103 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 106 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 109 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 112 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 115 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 118 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 121 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 124 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 127 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 130 "sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 133 "sipQtGuiQAbstractTextDocumentLayout.cpp"


class sipQAbstractTextDocumentLayout : public QAbstractTextDocumentLayout
{
public:
    sipQAbstractTextDocumentLayout(QTextDocument *);
    virtual ~sipQAbstractTextDocumentLayout();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void draw(QPainter *,const QAbstractTextDocumentLayout::PaintContext&);
    int hitTest(const QPointF&,Qt::HitTestAccuracy) const;
    int pageCount() const;
    QSizeF documentSize() const;
    QRectF frameBoundingRect(QTextFrame *) const;
    QRectF blockBoundingRect(const QTextBlock&) const;
    void documentChanged(int,int,int);
    void resizeInlineObject(QTextInlineObject,int,const QTextFormat&);
    void positionInlineObject(QTextInlineObject,int,const QTextFormat&);
    void drawInlineObject(QPainter *,const QRectF&,QTextInlineObject,int,const QTextFormat&);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractTextDocumentLayout(const sipQAbstractTextDocumentLayout &);
    sipQAbstractTextDocumentLayout &operator = (const sipQAbstractTextDocumentLayout &);

    char sipPyMethods[17];
};

sipQAbstractTextDocumentLayout::sipQAbstractTextDocumentLayout(QTextDocument *a0): QAbstractTextDocumentLayout(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractTextDocumentLayout::~sipQAbstractTextDocumentLayout()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQAbstractTextDocumentLayout::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QAbstractTextDocumentLayout);
}

int sipQAbstractTextDocumentLayout::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QAbstractTextDocumentLayout::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QAbstractTextDocumentLayout,_c,_id,_a);

    return _id;
}

void *sipQAbstractTextDocumentLayout::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QAbstractTextDocumentLayout,_clname)) ? this : QAbstractTextDocumentLayout::qt_metacast(_clname);
}

void sipQAbstractTextDocumentLayout::draw(QPainter *a0,const QAbstractTextDocumentLayout::PaintContext& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QAbstractTextDocumentLayout,sipName_draw);

    if (!meth)
        return;

    extern void sipVH_QtGui_125(sip_gilstate_t,PyObject *,QPainter *,const QAbstractTextDocumentLayout::PaintContext&);

    sipVH_QtGui_125(sipGILState,meth,a0,a1);
}

int sipQAbstractTextDocumentLayout::hitTest(const QPointF& a0,Qt::HitTestAccuracy a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,sipName_QAbstractTextDocumentLayout,sipName_hitTest);

    if (!meth)
        return 0;

    extern int sipVH_QtGui_124(sip_gilstate_t,PyObject *,const QPointF&,Qt::HitTestAccuracy);

    return sipVH_QtGui_124(sipGILState,meth,a0,a1);
}

int sipQAbstractTextDocumentLayout::pageCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,sipName_QAbstractTextDocumentLayout,sipName_pageCount);

    if (!meth)
        return 0;

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

QSizeF sipQAbstractTextDocumentLayout::documentSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,sipName_QAbstractTextDocumentLayout,sipName_documentSize);

    if (!meth)
        return QSizeF();

    extern QSizeF sipVH_QtGui_123(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_123(sipGILState,meth);
}

QRectF sipQAbstractTextDocumentLayout::frameBoundingRect(QTextFrame *a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,sipName_QAbstractTextDocumentLayout,sipName_frameBoundingRect);

    if (!meth)
        return QRectF();

    extern QRectF sipVH_QtGui_122(sip_gilstate_t,PyObject *,QTextFrame *);

    return sipVH_QtGui_122(sipGILState,meth,a0);
}

QRectF sipQAbstractTextDocumentLayout::blockBoundingRect(const QTextBlock& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,sipName_QAbstractTextDocumentLayout,sipName_blockBoundingRect);

    if (!meth)
        return QRectF();

    extern QRectF sipVH_QtGui_121(sip_gilstate_t,PyObject *,const QTextBlock&);

    return sipVH_QtGui_121(sipGILState,meth,a0);
}

void sipQAbstractTextDocumentLayout::documentChanged(int a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,sipName_QAbstractTextDocumentLayout,sipName_documentChanged);

    if (!meth)
        return;

    extern void sipVH_QtGui_120(sip_gilstate_t,PyObject *,int,int,int);

    sipVH_QtGui_120(sipGILState,meth,a0,a1,a2);
}

void sipQAbstractTextDocumentLayout::resizeInlineObject(QTextInlineObject a0,int a1,const QTextFormat& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_resizeInlineObject);

    if (!meth)
    {
        QAbstractTextDocumentLayout::resizeInlineObject(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_232(sip_gilstate_t,PyObject *,QTextInlineObject,int,const QTextFormat&);

    sipVH_QtGui_232(sipGILState,meth,a0,a1,a2);
}

void sipQAbstractTextDocumentLayout::positionInlineObject(QTextInlineObject a0,int a1,const QTextFormat& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_positionInlineObject);

    if (!meth)
    {
        QAbstractTextDocumentLayout::positionInlineObject(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_232(sip_gilstate_t,PyObject *,QTextInlineObject,int,const QTextFormat&);

    sipVH_QtGui_232(sipGILState,meth,a0,a1,a2);
}

void sipQAbstractTextDocumentLayout::drawInlineObject(QPainter *a0,const QRectF& a1,QTextInlineObject a2,int a3,const QTextFormat& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_drawInlineObject);

    if (!meth)
    {
        QAbstractTextDocumentLayout::drawInlineObject(a0,a1,a2,a3,a4);
        return;
    }

    extern void sipVH_QtGui_231(sip_gilstate_t,PyObject *,QPainter *,const QRectF&,QTextInlineObject,int,const QTextFormat&);

    sipVH_QtGui_231(sipGILState,meth,a0,a1,a2,a3,a4);
}

bool sipQAbstractTextDocumentLayout::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQAbstractTextDocumentLayout::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQAbstractTextDocumentLayout::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQAbstractTextDocumentLayout::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQAbstractTextDocumentLayout::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQAbstractTextDocumentLayout::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQAbstractTextDocumentLayout::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_draw, "QAbstractTextDocumentLayout.draw(QPainter, QAbstractTextDocumentLayout.PaintContext)");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_draw(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_draw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QPainter * a0;
        const QAbstractTextDocumentLayout::PaintContext * a1;
        QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QPainter, &a0, sipType_QAbstractTextDocumentLayout_PaintContext, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTextDocumentLayout, sipName_draw);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->draw(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_draw, doc_QAbstractTextDocumentLayout_draw);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_hitTest, "QAbstractTextDocumentLayout.hitTest(QPointF, Qt.HitTestAccuracy) -> int");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_hitTest(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_hitTest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QPointF * a0;
        Qt::HitTestAccuracy a1;
        QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QPointF, &a0, sipType_Qt_HitTestAccuracy, &a1))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTextDocumentLayout, sipName_hitTest);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hitTest(*a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_hitTest, doc_QAbstractTextDocumentLayout_hitTest);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_anchorAt, "QAbstractTextDocumentLayout.anchorAt(QPointF) -> QString");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_anchorAt(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_anchorAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QPointF, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->anchorAt(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_anchorAt, doc_QAbstractTextDocumentLayout_anchorAt);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_pageCount, "QAbstractTextDocumentLayout.pageCount() -> int");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_pageCount(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_pageCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTextDocumentLayout, sipName_pageCount);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pageCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_pageCount, doc_QAbstractTextDocumentLayout_pageCount);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_documentSize, "QAbstractTextDocumentLayout.documentSize() -> QSizeF");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_documentSize(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_documentSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp))
        {
            QSizeF *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTextDocumentLayout, sipName_documentSize);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSizeF(sipCpp->documentSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSizeF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_documentSize, doc_QAbstractTextDocumentLayout_documentSize);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_frameBoundingRect, "QAbstractTextDocumentLayout.frameBoundingRect(QTextFrame) -> QRectF");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_frameBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_frameBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QTextFrame * a0;
        QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QTextFrame, &a0))
        {
            QRectF *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTextDocumentLayout, sipName_frameBoundingRect);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->frameBoundingRect(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_frameBoundingRect, doc_QAbstractTextDocumentLayout_frameBoundingRect);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_blockBoundingRect, "QAbstractTextDocumentLayout.blockBoundingRect(QTextBlock) -> QRectF");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_blockBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_blockBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QTextBlock * a0;
        QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QTextBlock, &a0))
        {
            QRectF *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTextDocumentLayout, sipName_blockBoundingRect);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->blockBoundingRect(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_blockBoundingRect, doc_QAbstractTextDocumentLayout_blockBoundingRect);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_setPaintDevice, "QAbstractTextDocumentLayout.setPaintDevice(QPaintDevice)");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_setPaintDevice(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_setPaintDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPaintDevice * a0;
        QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QPaintDevice, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPaintDevice(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_setPaintDevice, doc_QAbstractTextDocumentLayout_setPaintDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_paintDevice, "QAbstractTextDocumentLayout.paintDevice() -> QPaintDevice");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_paintDevice(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_paintDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp))
        {
            QPaintDevice *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->paintDevice();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPaintDevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_paintDevice, doc_QAbstractTextDocumentLayout_paintDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_document, "QAbstractTextDocumentLayout.document() -> QTextDocument");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_document(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_document(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp))
        {
            QTextDocument *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->document();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextDocument,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_document, doc_QAbstractTextDocumentLayout_document);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_registerHandler, "QAbstractTextDocumentLayout.registerHandler(int, QObject)");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_registerHandler(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_registerHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QObject * a1;
        PyObject *a1Keep;
        QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi@J8", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, &a0, &a1Keep, sipType_QObject, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->registerHandler(a0,a1);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, 5, a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_registerHandler, doc_QAbstractTextDocumentLayout_registerHandler);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_handlerForObject, "QAbstractTextDocumentLayout.handlerForObject(int) -> QTextObjectInterface");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_handlerForObject(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_handlerForObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, &a0))
        {
            QTextObjectInterface *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->handlerForObject(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextObjectInterface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_handlerForObject, doc_QAbstractTextDocumentLayout_handlerForObject);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_documentChanged, "QAbstractTextDocumentLayout.documentChanged(int, int, int)");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_documentChanged(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_documentChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        int a1;
        int a2;
        QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piii", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, &a0, &a1, &a2))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTextDocumentLayout, sipName_documentChanged);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->documentChanged(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_documentChanged, doc_QAbstractTextDocumentLayout_documentChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_resizeInlineObject, "QAbstractTextDocumentLayout.resizeInlineObject(QTextInlineObject, int, QTextFormat)");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_resizeInlineObject(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_resizeInlineObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTextInlineObject * a0;
        int a1;
        const QTextFormat * a2;
        QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9iJ9", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QTextInlineObject, &a0, &a1, sipType_QTextFormat, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractTextDocumentLayout::resizeInlineObject(*a0,a1,*a2) : sipCpp->resizeInlineObject(*a0,a1,*a2));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_resizeInlineObject, doc_QAbstractTextDocumentLayout_resizeInlineObject);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_positionInlineObject, "QAbstractTextDocumentLayout.positionInlineObject(QTextInlineObject, int, QTextFormat)");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_positionInlineObject(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_positionInlineObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTextInlineObject * a0;
        int a1;
        const QTextFormat * a2;
        QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9iJ9", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QTextInlineObject, &a0, &a1, sipType_QTextFormat, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractTextDocumentLayout::positionInlineObject(*a0,a1,*a2) : sipCpp->positionInlineObject(*a0,a1,*a2));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_positionInlineObject, doc_QAbstractTextDocumentLayout_positionInlineObject);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_drawInlineObject, "QAbstractTextDocumentLayout.drawInlineObject(QPainter, QRectF, QTextInlineObject, int, QTextFormat)");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_drawInlineObject(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_drawInlineObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter * a0;
        const QRectF * a1;
        QTextInlineObject * a2;
        int a3;
        const QTextFormat * a4;
        QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J9J9iJ9", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QPainter, &a0, sipType_QRectF, &a1, sipType_QTextInlineObject, &a2, &a3, sipType_QTextFormat, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractTextDocumentLayout::drawInlineObject(a0,*a1,*a2,a3,*a4) : sipCpp->drawInlineObject(a0,*a1,*a2,a3,*a4));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_drawInlineObject, doc_QAbstractTextDocumentLayout_drawInlineObject);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_format, "QAbstractTextDocumentLayout.format(int) -> QTextCharFormat");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_format(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, &a0))
        {
            QTextCharFormat *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextCharFormat(sipCpp->format(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_format, doc_QAbstractTextDocumentLayout_format);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QAbstractTextDocumentLayout(void *, const sipTypeDef *);}
static void *cast_QAbstractTextDocumentLayout(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QAbstractTextDocumentLayout)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QAbstractTextDocumentLayout *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractTextDocumentLayout(void *, int);}
static void release_QAbstractTextDocumentLayout(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQAbstractTextDocumentLayout *>(sipCppV);
    else
        delete reinterpret_cast<QAbstractTextDocumentLayout *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QAbstractTextDocumentLayout(sipSimpleWrapper *);}
static void dealloc_QAbstractTextDocumentLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAbstractTextDocumentLayout *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAbstractTextDocumentLayout(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QAbstractTextDocumentLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QAbstractTextDocumentLayout(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQAbstractTextDocumentLayout *sipCpp = 0;

    {
        QTextDocument * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QTextDocument, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQAbstractTextDocumentLayout(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractTextDocumentLayout[] = {{129, 0, 1}};


static PyMethodDef methods_QAbstractTextDocumentLayout[] = {
    {SIP_MLNAME_CAST(sipName_anchorAt), meth_QAbstractTextDocumentLayout_anchorAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_anchorAt)},
    {SIP_MLNAME_CAST(sipName_blockBoundingRect), meth_QAbstractTextDocumentLayout_blockBoundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_blockBoundingRect)},
    {SIP_MLNAME_CAST(sipName_document), meth_QAbstractTextDocumentLayout_document, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_document)},
    {SIP_MLNAME_CAST(sipName_documentChanged), meth_QAbstractTextDocumentLayout_documentChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_documentChanged)},
    {SIP_MLNAME_CAST(sipName_documentSize), meth_QAbstractTextDocumentLayout_documentSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_documentSize)},
    {SIP_MLNAME_CAST(sipName_draw), meth_QAbstractTextDocumentLayout_draw, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_draw)},
    {SIP_MLNAME_CAST(sipName_drawInlineObject), meth_QAbstractTextDocumentLayout_drawInlineObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_drawInlineObject)},
    {SIP_MLNAME_CAST(sipName_format), meth_QAbstractTextDocumentLayout_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_format)},
    {SIP_MLNAME_CAST(sipName_frameBoundingRect), meth_QAbstractTextDocumentLayout_frameBoundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_frameBoundingRect)},
    {SIP_MLNAME_CAST(sipName_handlerForObject), meth_QAbstractTextDocumentLayout_handlerForObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_handlerForObject)},
    {SIP_MLNAME_CAST(sipName_hitTest), meth_QAbstractTextDocumentLayout_hitTest, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_hitTest)},
    {SIP_MLNAME_CAST(sipName_pageCount), meth_QAbstractTextDocumentLayout_pageCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_pageCount)},
    {SIP_MLNAME_CAST(sipName_paintDevice), meth_QAbstractTextDocumentLayout_paintDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_paintDevice)},
    {SIP_MLNAME_CAST(sipName_positionInlineObject), meth_QAbstractTextDocumentLayout_positionInlineObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_positionInlineObject)},
    {SIP_MLNAME_CAST(sipName_registerHandler), meth_QAbstractTextDocumentLayout_registerHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_registerHandler)},
    {SIP_MLNAME_CAST(sipName_resizeInlineObject), meth_QAbstractTextDocumentLayout_resizeInlineObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_resizeInlineObject)},
    {SIP_MLNAME_CAST(sipName_setPaintDevice), meth_QAbstractTextDocumentLayout_setPaintDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_setPaintDevice)}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QAbstractTextDocumentLayout[] = {
    {"updateBlock(const QTextBlock&)", "\1QAbstractTextDocumentLayout.updateBlock(QTextBlock)", 0},
    {"pageCountChanged(int)", "\1QAbstractTextDocumentLayout.pageCountChanged(int)", 0},
    {"documentSizeChanged(const QSizeF&)", "\1QAbstractTextDocumentLayout.documentSizeChanged(QSizeF)", 0},
    {"update(const QRectF&)", "\1QAbstractTextDocumentLayout.update(QRectF)", 0},
    {"update()", "\1QAbstractTextDocumentLayout.update()", 0},
    {0, 0, 0}
};

PyDoc_STRVAR(doc_QAbstractTextDocumentLayout, "\1QAbstractTextDocumentLayout(QTextDocument)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QAbstractTextDocumentLayout = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QAbstractTextDocumentLayout,
        {0}
    },
    {
        sipNameNr_QAbstractTextDocumentLayout,
        {0, 0, 1},
        17, methods_QAbstractTextDocumentLayout,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractTextDocumentLayout,
    -1,
    -1,
    supers_QAbstractTextDocumentLayout,
    0,
    init_QAbstractTextDocumentLayout,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractTextDocumentLayout,
    0,
    0,
    0,
    release_QAbstractTextDocumentLayout,
    cast_QAbstractTextDocumentLayout,
    0,
    0,
    0
},
    &QAbstractTextDocumentLayout::staticMetaObject,
    0,
    pyqt4_signals_QAbstractTextDocumentLayout
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:03 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 41 "sipQtGuiQTextEdit.cpp"

#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 45 "sipQtGuiQTextEdit.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 48 "sipQtGuiQTextEdit.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 51 "sipQtGuiQTextEdit.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 54 "sipQtGuiQTextEdit.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "sipQtGuiQTextEdit.cpp"
#line 520 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 539 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 62 "sipQtGuiQTextEdit.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 65 "sipQtGuiQTextEdit.cpp"
#line 279 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68 "sipQtGuiQTextEdit.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71 "sipQtGuiQTextEdit.cpp"
#line 466 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 74 "sipQtGuiQTextEdit.cpp"
#line 379 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 77 "sipQtGuiQTextEdit.cpp"
#line 565 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 80 "sipQtGuiQTextEdit.cpp"
#line 590 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 83 "sipQtGuiQTextEdit.cpp"
#line 619 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 86 "sipQtGuiQTextEdit.cpp"
#line 607 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 89 "sipQtGuiQTextEdit.cpp"
#line 490 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 92 "sipQtGuiQTextEdit.cpp"
#line 238 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 95 "sipQtGuiQTextEdit.cpp"
#line 399 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 98 "sipQtGuiQTextEdit.cpp"
#line 428 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 101 "sipQtGuiQTextEdit.cpp"
#line 350 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 104 "sipQtGuiQTextEdit.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 107 "sipQtGuiQTextEdit.cpp"
#line 312 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 110 "sipQtGuiQTextEdit.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 113 "sipQtGuiQTextEdit.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 116 "sipQtGuiQTextEdit.cpp"
#line 39 "/home/maemo/python-qt4-4.7/sip/QtGui/qprinter.sip"
#include <qprinter.h>
#line 119 "sipQtGuiQTextEdit.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextcursor.sip"
#include <qtextcursor.h>
#line 122 "sipQtGuiQTextEdit.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 125 "sipQtGuiQTextEdit.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 130 "sipQtGuiQTextEdit.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 133 "sipQtGuiQTextEdit.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 136 "sipQtGuiQTextEdit.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 139 "sipQtGuiQTextEdit.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qmenu.sip"
#include <qmenu.h>
#line 142 "sipQtGuiQTextEdit.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 145 "sipQtGuiQTextEdit.cpp"
#line 66 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 148 "sipQtGuiQTextEdit.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 109 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 153 "sipQtGuiQTextEdit.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 158 "sipQtGuiQTextEdit.cpp"
#line 66 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 161 "sipQtGuiQTextEdit.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 164 "sipQtGuiQTextEdit.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qscrollbar.sip"
#include <qscrollbar.h>
#line 167 "sipQtGuiQTextEdit.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 170 "sipQtGuiQTextEdit.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 173 "sipQtGuiQTextEdit.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 176 "sipQtGuiQTextEdit.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qframe.sip"
#include <qframe.h>
#line 179 "sipQtGuiQTextEdit.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 182 "sipQtGuiQTextEdit.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 185 "sipQtGuiQTextEdit.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 188 "sipQtGuiQTextEdit.cpp"
#line 39 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 191 "sipQtGuiQTextEdit.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 194 "sipQtGuiQTextEdit.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 197 "sipQtGuiQTextEdit.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 200 "sipQtGuiQTextEdit.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 203 "sipQtGuiQTextEdit.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 206 "sipQtGuiQTextEdit.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 209 "sipQtGuiQTextEdit.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 212 "sipQtGuiQTextEdit.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 215 "sipQtGuiQTextEdit.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 218 "sipQtGuiQTextEdit.cpp"
#line 478 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 221 "sipQtGuiQTextEdit.cpp"
#line 675 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 224 "sipQtGuiQTextEdit.cpp"
#line 301 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 227 "sipQtGuiQTextEdit.cpp"
#line 442 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 230 "sipQtGuiQTextEdit.cpp"
#line 414 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 233 "sipQtGuiQTextEdit.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 236 "sipQtGuiQTextEdit.cpp"
#line 68 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 239 "sipQtGuiQTextEdit.cpp"
#line 42 "/home/maemo/python-qt4-4.7/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 242 "sipQtGuiQTextEdit.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 245 "sipQtGuiQTextEdit.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 248 "sipQtGuiQTextEdit.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 251 "sipQtGuiQTextEdit.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 254 "sipQtGuiQTextEdit.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 257 "sipQtGuiQTextEdit.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 260 "sipQtGuiQTextEdit.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 263 "sipQtGuiQTextEdit.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 266 "sipQtGuiQTextEdit.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 269 "sipQtGuiQTextEdit.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 272 "sipQtGuiQTextEdit.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 275 "sipQtGuiQTextEdit.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 278 "sipQtGuiQTextEdit.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 281 "sipQtGuiQTextEdit.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 284 "sipQtGuiQTextEdit.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 287 "sipQtGuiQTextEdit.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 290 "sipQtGuiQTextEdit.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 293 "sipQtGuiQTextEdit.cpp"


class sipQTextEdit : public QTextEdit
{
public:
    sipQTextEdit(QWidget *);
    sipQTextEdit(const QString&,QWidget *);
    virtual ~sipQTextEdit();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QVariant loadResource(int,const QUrl&);
    bool event(QEvent *);
    void timerEvent(QTimerEvent *);
    void keyPressEvent(QKeyEvent *);
    void keyReleaseEvent(QKeyEvent *);
    void resizeEvent(QResizeEvent *);
    void paintEvent(QPaintEvent *);
    void mousePressEvent(QMouseEvent *);
    void mouseMoveEvent(QMouseEvent *);
    void mouseReleaseEvent(QMouseEvent *);
    void mouseDoubleClickEvent(QMouseEvent *);
    bool focusNextPrevChild(bool);
    void contextMenuEvent(QContextMenuEvent *);
    void dragEnterEvent(QDragEnterEvent *);
    void dragLeaveEvent(QDragLeaveEvent *);
    void dragMoveEvent(QDragMoveEvent *);
    void dropEvent(QDropEvent *);
    void focusInEvent(QFocusEvent *);
    void focusOutEvent(QFocusEvent *);
    void showEvent(QShowEvent *);
    void changeEvent(QEvent *);
    void wheelEvent(QWheelEvent *);
    QMimeData * createMimeDataFromSelection() const;
    bool canInsertFromMimeData(const QMimeData *) const;
    void insertFromMimeData(const QMimeData *);
    void inputMethodEvent(QInputMethodEvent *);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void scrollContentsBy(int,int);
    QSize minimumSizeHint() const;
    QSize sizeHint() const;
    bool viewportEvent(QEvent *);
    int devType() const;
    void setVisible(bool);
    int heightForWidth(int) const;
    QPaintEngine * paintEngine() const;
    void enterEvent(QEvent *);
    void leaveEvent(QEvent *);
    void moveEvent(QMoveEvent *);
    void closeEvent(QCloseEvent *);
    void tabletEvent(QTabletEvent *);
    void actionEvent(QActionEvent *);
    void hideEvent(QHideEvent *);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void enabledChange(bool);
    void paletteChange(const QPalette&);
    void fontChange(const QFont&);
    void windowActivationChange(bool);
    void languageChange();
    bool eventFilter(QObject *,QEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTextEdit(const sipQTextEdit &);
    sipQTextEdit &operator = (const sipQTextEdit &);

    char sipPyMethods[53];
};

sipQTextEdit::sipQTextEdit(QWidget *a0): QTextEdit(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextEdit::sipQTextEdit(const QString& a0,QWidget *a1): QTextEdit(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextEdit::~sipQTextEdit()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTextEdit::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QTextEdit);
}

int sipQTextEdit::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTextEdit::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QTextEdit,_c,_id,_a);

    return _id;
}

void *sipQTextEdit::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QTextEdit,_clname)) ? this : QTextEdit::qt_metacast(_clname);
}

QVariant sipQTextEdit::loadResource(int a0,const QUrl& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_loadResource);

    if (!meth)
        return QTextEdit::loadResource(a0,a1);

    extern QVariant sipVH_QtGui_62(sip_gilstate_t,PyObject *,int,const QUrl&);

    return sipVH_QtGui_62(sipGILState,meth,a0,a1);
}

bool sipQTextEdit::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QTextEdit::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

void sipQTextEdit::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QTextEdit::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQTextEdit::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_keyPressEvent);

    if (!meth)
    {
        QTextEdit::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQTextEdit::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!meth)
    {
        QTextEdit::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQTextEdit::resizeEvent(QResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_resizeEvent);

    if (!meth)
    {
        QTextEdit::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t,PyObject *,QResizeEvent *);

    sipVH_QtGui_2(sipGILState,meth,a0);
}

void sipQTextEdit::paintEvent(QPaintEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_paintEvent);

    if (!meth)
    {
        QTextEdit::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t,PyObject *,QPaintEvent *);

    sipVH_QtGui_3(sipGILState,meth,a0);
}

void sipQTextEdit::mousePressEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_mousePressEvent);

    if (!meth)
    {
        QTextEdit::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQTextEdit::mouseMoveEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!meth)
    {
        QTextEdit::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQTextEdit::mouseReleaseEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!meth)
    {
        QTextEdit::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQTextEdit::mouseDoubleClickEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!meth)
    {
        QTextEdit::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

bool sipQTextEdit::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!meth)
        return QTextEdit::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_11(sip_gilstate_t,PyObject *,bool);

    return sipVH_QtGui_11(sipGILState,meth,a0);
}

void sipQTextEdit::contextMenuEvent(QContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!meth)
    {
        QTextEdit::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t,PyObject *,QContextMenuEvent *);

    sipVH_QtGui_21(sipGILState,meth,a0);
}

void sipQTextEdit::dragEnterEvent(QDragEnterEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!meth)
    {
        QTextEdit::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t,PyObject *,QDragEnterEvent *);

    sipVH_QtGui_18(sipGILState,meth,a0);
}

void sipQTextEdit::dragLeaveEvent(QDragLeaveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!meth)
    {
        QTextEdit::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t,PyObject *,QDragLeaveEvent *);

    sipVH_QtGui_16(sipGILState,meth,a0);
}

void sipQTextEdit::dragMoveEvent(QDragMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!meth)
    {
        QTextEdit::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t,PyObject *,QDragMoveEvent *);

    sipVH_QtGui_17(sipGILState,meth,a0);
}

void sipQTextEdit::dropEvent(QDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_dropEvent);

    if (!meth)
    {
        QTextEdit::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t,PyObject *,QDropEvent *);

    sipVH_QtGui_15(sipGILState,meth,a0);
}

void sipQTextEdit::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_focusInEvent);

    if (!meth)
    {
        QTextEdit::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

void sipQTextEdit::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_focusOutEvent);

    if (!meth)
    {
        QTextEdit::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

void sipQTextEdit::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_showEvent);

    if (!meth)
    {
        QTextEdit::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t,PyObject *,QShowEvent *);

    sipVH_QtGui_1(sipGILState,meth,a0);
}

void sipQTextEdit::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_changeEvent);

    if (!meth)
    {
        QTextEdit::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQTextEdit::wheelEvent(QWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_wheelEvent);

    if (!meth)
    {
        QTextEdit::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t,PyObject *,QWheelEvent *);

    sipVH_QtGui_5(sipGILState,meth,a0);
}

QMimeData * sipQTextEdit::createMimeDataFromSelection() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_createMimeDataFromSelection);

    if (!meth)
        return QTextEdit::createMimeDataFromSelection();

    extern QMimeData * sipVH_QtGui_61(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_61(sipGILState,meth);
}

bool sipQTextEdit::canInsertFromMimeData(const QMimeData *a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_canInsertFromMimeData);

    if (!meth)
        return QTextEdit::canInsertFromMimeData(a0);

    extern bool sipVH_QtGui_60(sip_gilstate_t,PyObject *,const QMimeData *);

    return sipVH_QtGui_60(sipGILState,meth,a0);
}

void sipQTextEdit::insertFromMimeData(const QMimeData *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_insertFromMimeData);

    if (!meth)
    {
        QTextEdit::insertFromMimeData(a0);
        return;
    }

    extern void sipVH_QtGui_59(sip_gilstate_t,PyObject *,const QMimeData *);

    sipVH_QtGui_59(sipGILState,meth,a0);
}

void sipQTextEdit::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!meth)
    {
        QTextEdit::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t,PyObject *,QInputMethodEvent *);

    sipVH_QtGui_13(sipGILState,meth,a0);
}

QVariant sipQTextEdit::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!meth)
        return QTextEdit::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t,PyObject *,Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState,meth,a0);
}

void sipQTextEdit::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!meth)
    {
        QTextEdit::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtGui_32(sip_gilstate_t,PyObject *,int,int);

    sipVH_QtGui_32(sipGILState,meth,a0,a1);
}

QSize sipQTextEdit::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!meth)
        return QAbstractScrollArea::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_4(sipGILState,meth);
}

QSize sipQTextEdit::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QAbstractScrollArea::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_4(sipGILState,meth);
}

bool sipQTextEdit::viewportEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_viewportEvent);

    if (!meth)
        return QAbstractScrollArea::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

int sipQTextEdit::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

void sipQTextEdit::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_setVisible);

    if (!meth)
    {
        QWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

int sipQTextEdit::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QWidget::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

QPaintEngine * sipQTextEdit::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QWidget::paintEngine();

    extern QPaintEngine * sipVH_QtGui_27(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_27(sipGILState,meth);
}

void sipQTextEdit::enterEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_enterEvent);

    if (!meth)
    {
        QWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQTextEdit::leaveEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_leaveEvent);

    if (!meth)
    {
        QWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQTextEdit::moveEvent(QMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_moveEvent);

    if (!meth)
    {
        QWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t,PyObject *,QMoveEvent *);

    sipVH_QtGui_23(sipGILState,meth,a0);
}

void sipQTextEdit::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_closeEvent);

    if (!meth)
    {
        QWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t,PyObject *,QCloseEvent *);

    sipVH_QtGui_22(sipGILState,meth,a0);
}

void sipQTextEdit::tabletEvent(QTabletEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_tabletEvent);

    if (!meth)
    {
        QWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t,PyObject *,QTabletEvent *);

    sipVH_QtGui_20(sipGILState,meth,a0);
}

void sipQTextEdit::actionEvent(QActionEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_actionEvent);

    if (!meth)
    {
        QWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t,PyObject *,QActionEvent *);

    sipVH_QtGui_19(sipGILState,meth,a0);
}

void sipQTextEdit::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_hideEvent);

    if (!meth)
    {
        QWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t,PyObject *,QHideEvent *);

    sipVH_QtGui_0(sipGILState,meth,a0);
}

int sipQTextEdit::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QWidget::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t,PyObject *,QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState,meth,a0);
}

void sipQTextEdit::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_enabledChange);

    if (!meth)
    {
        QWidget::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQTextEdit::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_paletteChange);

    if (!meth)
    {
        QWidget::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t,PyObject *,const QPalette&);

    sipVH_QtGui_10(sipGILState,meth,a0);
}

void sipQTextEdit::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_fontChange);

    if (!meth)
    {
        QWidget::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t,PyObject *,const QFont&);

    sipVH_QtGui_9(sipGILState,meth,a0);
}

void sipQTextEdit::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_windowActivationChange);

    if (!meth)
    {
        QWidget::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQTextEdit::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_languageChange);

    if (!meth)
    {
        QWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

bool sipQTextEdit::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQTextEdit::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQTextEdit::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQTextEdit::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQTextEdit::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QTextEdit_setDocument, "QTextEdit.setDocument(QTextDocument)");

extern "C" {static PyObject *meth_QTextEdit_setDocument(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextDocument * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextDocument, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDocument(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setDocument, doc_QTextEdit_setDocument);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_document, "QTextEdit.document() -> QTextDocument");

extern "C" {static PyObject *meth_QTextEdit_document(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_document(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QTextDocument *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->document();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextDocument,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_document, doc_QTextEdit_document);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setTextCursor, "QTextEdit.setTextCursor(QTextCursor)");

extern "C" {static PyObject *meth_QTextEdit_setTextCursor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTextCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextCursor, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextCursor(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTextCursor, doc_QTextEdit_setTextCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_textCursor, "QTextEdit.textCursor() -> QTextCursor");

extern "C" {static PyObject *meth_QTextEdit_textCursor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_textCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QTextCursor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextCursor(sipCpp->textCursor());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_textCursor, doc_QTextEdit_textCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_isReadOnly, "QTextEdit.isReadOnly() -> bool");

extern "C" {static PyObject *meth_QTextEdit_isReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_isReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isReadOnly();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_isReadOnly, doc_QTextEdit_isReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setReadOnly, "QTextEdit.setReadOnly(bool)");

extern "C" {static PyObject *meth_QTextEdit_setReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setReadOnly(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setReadOnly, doc_QTextEdit_setReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_fontPointSize, "QTextEdit.fontPointSize() -> float");

extern "C" {static PyObject *meth_QTextEdit_fontPointSize(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_fontPointSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontPointSize();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_fontPointSize, doc_QTextEdit_fontPointSize);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_fontFamily, "QTextEdit.fontFamily() -> QString");

extern "C" {static PyObject *meth_QTextEdit_fontFamily(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_fontFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->fontFamily());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_fontFamily, doc_QTextEdit_fontFamily);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_fontWeight, "QTextEdit.fontWeight() -> int");

extern "C" {static PyObject *meth_QTextEdit_fontWeight(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_fontWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontWeight();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_fontWeight, doc_QTextEdit_fontWeight);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_fontUnderline, "QTextEdit.fontUnderline() -> bool");

extern "C" {static PyObject *meth_QTextEdit_fontUnderline(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_fontUnderline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontUnderline();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_fontUnderline, doc_QTextEdit_fontUnderline);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_fontItalic, "QTextEdit.fontItalic() -> bool");

extern "C" {static PyObject *meth_QTextEdit_fontItalic(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_fontItalic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontItalic();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_fontItalic, doc_QTextEdit_fontItalic);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_textColor, "QTextEdit.textColor() -> QColor");

extern "C" {static PyObject *meth_QTextEdit_textColor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_textColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->textColor());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_textColor, doc_QTextEdit_textColor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_currentFont, "QTextEdit.currentFont() -> QFont");

extern "C" {static PyObject *meth_QTextEdit_currentFont(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_currentFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QFont *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFont(sipCpp->currentFont());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_currentFont, doc_QTextEdit_currentFont);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_alignment, "QTextEdit.alignment() -> Qt.Alignment");

extern "C" {static PyObject *meth_QTextEdit_alignment(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            Qt::Alignment *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::Alignment(sipCpp->alignment());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_alignment, doc_QTextEdit_alignment);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_mergeCurrentCharFormat, "QTextEdit.mergeCurrentCharFormat(QTextCharFormat)");

extern "C" {static PyObject *meth_QTextEdit_mergeCurrentCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_mergeCurrentCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextCharFormat, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->mergeCurrentCharFormat(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_mergeCurrentCharFormat, doc_QTextEdit_mergeCurrentCharFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setCurrentCharFormat, "QTextEdit.setCurrentCharFormat(QTextCharFormat)");

extern "C" {static PyObject *meth_QTextEdit_setCurrentCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setCurrentCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextCharFormat, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentCharFormat(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setCurrentCharFormat, doc_QTextEdit_setCurrentCharFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_currentCharFormat, "QTextEdit.currentCharFormat() -> QTextCharFormat");

extern "C" {static PyObject *meth_QTextEdit_currentCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_currentCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QTextCharFormat *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextCharFormat(sipCpp->currentCharFormat());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_currentCharFormat, doc_QTextEdit_currentCharFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_autoFormatting, "QTextEdit.autoFormatting() -> QTextEdit.AutoFormatting");

extern "C" {static PyObject *meth_QTextEdit_autoFormatting(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_autoFormatting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QTextEdit::AutoFormatting *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextEdit::AutoFormatting(sipCpp->autoFormatting());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextEdit_AutoFormatting,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_autoFormatting, doc_QTextEdit_autoFormatting);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setAutoFormatting, "QTextEdit.setAutoFormatting(QTextEdit.AutoFormatting)");

extern "C" {static PyObject *meth_QTextEdit_setAutoFormatting(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setAutoFormatting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit::AutoFormatting * a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextEdit_AutoFormatting, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoFormatting(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QTextEdit_AutoFormatting,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setAutoFormatting, doc_QTextEdit_setAutoFormatting);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_tabChangesFocus, "QTextEdit.tabChangesFocus() -> bool");

extern "C" {static PyObject *meth_QTextEdit_tabChangesFocus(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_tabChangesFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tabChangesFocus();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_tabChangesFocus, doc_QTextEdit_tabChangesFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setTabChangesFocus, "QTextEdit.setTabChangesFocus(bool)");

extern "C" {static PyObject *meth_QTextEdit_setTabChangesFocus(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTabChangesFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabChangesFocus(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTabChangesFocus, doc_QTextEdit_setTabChangesFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setDocumentTitle, "QTextEdit.setDocumentTitle(QString)");

extern "C" {static PyObject *meth_QTextEdit_setDocumentTitle(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setDocumentTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDocumentTitle(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setDocumentTitle, doc_QTextEdit_setDocumentTitle);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_documentTitle, "QTextEdit.documentTitle() -> QString");

extern "C" {static PyObject *meth_QTextEdit_documentTitle(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_documentTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->documentTitle());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_documentTitle, doc_QTextEdit_documentTitle);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_isUndoRedoEnabled, "QTextEdit.isUndoRedoEnabled() -> bool");

extern "C" {static PyObject *meth_QTextEdit_isUndoRedoEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_isUndoRedoEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isUndoRedoEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_isUndoRedoEnabled, doc_QTextEdit_isUndoRedoEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setUndoRedoEnabled, "QTextEdit.setUndoRedoEnabled(bool)");

extern "C" {static PyObject *meth_QTextEdit_setUndoRedoEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setUndoRedoEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUndoRedoEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setUndoRedoEnabled, doc_QTextEdit_setUndoRedoEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_lineWrapMode, "QTextEdit.lineWrapMode() -> QTextEdit.LineWrapMode");

extern "C" {static PyObject *meth_QTextEdit_lineWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_lineWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QTextEdit::LineWrapMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lineWrapMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTextEdit_LineWrapMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_lineWrapMode, doc_QTextEdit_lineWrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setLineWrapMode, "QTextEdit.setLineWrapMode(QTextEdit.LineWrapMode)");

extern "C" {static PyObject *meth_QTextEdit_setLineWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setLineWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit::LineWrapMode a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextEdit_LineWrapMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLineWrapMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setLineWrapMode, doc_QTextEdit_setLineWrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_lineWrapColumnOrWidth, "QTextEdit.lineWrapColumnOrWidth() -> int");

extern "C" {static PyObject *meth_QTextEdit_lineWrapColumnOrWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_lineWrapColumnOrWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lineWrapColumnOrWidth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_lineWrapColumnOrWidth, doc_QTextEdit_lineWrapColumnOrWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setLineWrapColumnOrWidth, "QTextEdit.setLineWrapColumnOrWidth(int)");

extern "C" {static PyObject *meth_QTextEdit_setLineWrapColumnOrWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setLineWrapColumnOrWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLineWrapColumnOrWidth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setLineWrapColumnOrWidth, doc_QTextEdit_setLineWrapColumnOrWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_wordWrapMode, "QTextEdit.wordWrapMode() -> QTextOption.WrapMode");

extern "C" {static PyObject *meth_QTextEdit_wordWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_wordWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QTextOption::WrapMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wordWrapMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTextOption_WrapMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_wordWrapMode, doc_QTextEdit_wordWrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setWordWrapMode, "QTextEdit.setWordWrapMode(QTextOption.WrapMode)");

extern "C" {static PyObject *meth_QTextEdit_setWordWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setWordWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextOption::WrapMode a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextOption_WrapMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWordWrapMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setWordWrapMode, doc_QTextEdit_setWordWrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_find, "QTextEdit.find(QString, QTextDocument.FindFlags options=0) -> bool");

extern "C" {static PyObject *meth_QTextEdit_find(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_find(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QTextDocument::FindFlags a1def = 0;
        QTextDocument::FindFlags * a1 = &a1def;
        int a1State = 0;
        QTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State, sipType_QTextDocument_FindFlags, &a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->find(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QTextDocument_FindFlags,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_find, doc_QTextEdit_find);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_toPlainText, "QTextEdit.toPlainText() -> QString");

extern "C" {static PyObject *meth_QTextEdit_toPlainText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_toPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toPlainText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_toPlainText, doc_QTextEdit_toPlainText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_toHtml, "QTextEdit.toHtml() -> QString");

extern "C" {static PyObject *meth_QTextEdit_toHtml(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_toHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toHtml());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_toHtml, doc_QTextEdit_toHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_append, "QTextEdit.append(QString)");

extern "C" {static PyObject *meth_QTextEdit_append(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_append(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->append(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_append, doc_QTextEdit_append);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_ensureCursorVisible, "QTextEdit.ensureCursorVisible()");

extern "C" {static PyObject *meth_QTextEdit_ensureCursorVisible(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_ensureCursorVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ensureCursorVisible();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_ensureCursorVisible, doc_QTextEdit_ensureCursorVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_loadResource, "QTextEdit.loadResource(int, QUrl) -> QVariant");

extern "C" {static PyObject *meth_QTextEdit_loadResource(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_loadResource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QUrl * a1;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTextEdit, &sipCpp, &a0, sipType_QUrl, &a1))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QTextEdit::loadResource(a0,*a1) : sipCpp->loadResource(a0,*a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_loadResource, doc_QTextEdit_loadResource);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_createStandardContextMenu, "QTextEdit.createStandardContextMenu() -> QMenu\n"
    "QTextEdit.createStandardContextMenu(QPoint) -> QMenu");

extern "C" {static PyObject *meth_QTextEdit_createStandardContextMenu(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_createStandardContextMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QMenu *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->createStandardContextMenu();
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMenu,NULL);
        }
    }

    {
        const QPoint * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPoint, &a0))
        {
            QMenu *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->createStandardContextMenu(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMenu,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_createStandardContextMenu, doc_QTextEdit_createStandardContextMenu);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_cursorForPosition, "QTextEdit.cursorForPosition(QPoint) -> QTextCursor");

extern "C" {static PyObject *meth_QTextEdit_cursorForPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_cursorForPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPoint, &a0))
        {
            QTextCursor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextCursor(sipCpp->cursorForPosition(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_cursorForPosition, doc_QTextEdit_cursorForPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_cursorRect, "QTextEdit.cursorRect(QTextCursor) -> QRect\n"
    "QTextEdit.cursorRect() -> QRect");

extern "C" {static PyObject *meth_QTextEdit_cursorRect(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_cursorRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextCursor, &a0))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->cursorRect(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->cursorRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_cursorRect, doc_QTextEdit_cursorRect);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_anchorAt, "QTextEdit.anchorAt(QPoint) -> QString");

extern "C" {static PyObject *meth_QTextEdit_anchorAt(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_anchorAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPoint, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->anchorAt(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_anchorAt, doc_QTextEdit_anchorAt);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_overwriteMode, "QTextEdit.overwriteMode() -> bool");

extern "C" {static PyObject *meth_QTextEdit_overwriteMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_overwriteMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->overwriteMode();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_overwriteMode, doc_QTextEdit_overwriteMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setOverwriteMode, "QTextEdit.setOverwriteMode(bool)");

extern "C" {static PyObject *meth_QTextEdit_setOverwriteMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setOverwriteMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOverwriteMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setOverwriteMode, doc_QTextEdit_setOverwriteMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_tabStopWidth, "QTextEdit.tabStopWidth() -> int");

extern "C" {static PyObject *meth_QTextEdit_tabStopWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_tabStopWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tabStopWidth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_tabStopWidth, doc_QTextEdit_tabStopWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setTabStopWidth, "QTextEdit.setTabStopWidth(int)");

extern "C" {static PyObject *meth_QTextEdit_setTabStopWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTabStopWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabStopWidth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTabStopWidth, doc_QTextEdit_setTabStopWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_acceptRichText, "QTextEdit.acceptRichText() -> bool");

extern "C" {static PyObject *meth_QTextEdit_acceptRichText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_acceptRichText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->acceptRichText();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_acceptRichText, doc_QTextEdit_acceptRichText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setAcceptRichText, "QTextEdit.setAcceptRichText(bool)");

extern "C" {static PyObject *meth_QTextEdit_setAcceptRichText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setAcceptRichText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAcceptRichText(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setAcceptRichText, doc_QTextEdit_setAcceptRichText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setTextInteractionFlags, "QTextEdit.setTextInteractionFlags(Qt.TextInteractionFlags)");

extern "C" {static PyObject *meth_QTextEdit_setTextInteractionFlags(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTextInteractionFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::TextInteractionFlags * a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_Qt_TextInteractionFlags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextInteractionFlags(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_TextInteractionFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTextInteractionFlags, doc_QTextEdit_setTextInteractionFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_textInteractionFlags, "QTextEdit.textInteractionFlags() -> Qt.TextInteractionFlags");

extern "C" {static PyObject *meth_QTextEdit_textInteractionFlags(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_textInteractionFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            Qt::TextInteractionFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::TextInteractionFlags(sipCpp->textInteractionFlags());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_TextInteractionFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_textInteractionFlags, doc_QTextEdit_textInteractionFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setCursorWidth, "QTextEdit.setCursorWidth(int)");

extern "C" {static PyObject *meth_QTextEdit_setCursorWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setCursorWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCursorWidth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setCursorWidth, doc_QTextEdit_setCursorWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_cursorWidth, "QTextEdit.cursorWidth() -> int");

extern "C" {static PyObject *meth_QTextEdit_cursorWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_cursorWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cursorWidth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_cursorWidth, doc_QTextEdit_cursorWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setExtraSelections, "QTextEdit.setExtraSelections(list-of-QTextEdit.ExtraSelection)");

extern "C" {static PyObject *meth_QTextEdit_setExtraSelections(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setExtraSelections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QTextEdit::ExtraSelection> * a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QList_0100QTextEdit_ExtraSelection,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setExtraSelections(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QTextEdit::ExtraSelection> *>(a0),sipType_QList_0100QTextEdit_ExtraSelection,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setExtraSelections, doc_QTextEdit_setExtraSelections);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_extraSelections, "QTextEdit.extraSelections() -> list-of-QTextEdit.ExtraSelection");

extern "C" {static PyObject *meth_QTextEdit_extraSelections(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_extraSelections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QList<QTextEdit::ExtraSelection> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QTextEdit::ExtraSelection>(sipCpp->extraSelections());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QTextEdit_ExtraSelection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_extraSelections, doc_QTextEdit_extraSelections);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_canPaste, "QTextEdit.canPaste() -> bool");

extern "C" {static PyObject *meth_QTextEdit_canPaste(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_canPaste(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->canPaste();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_canPaste, doc_QTextEdit_canPaste);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_moveCursor, "QTextEdit.moveCursor(QTextCursor.MoveOperation, QTextCursor.MoveMode mode=QTextCursor.MoveAnchor)");

extern "C" {static PyObject *meth_QTextEdit_moveCursor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_moveCursor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCursor::MoveOperation a0;
        QTextCursor::MoveMode a1 = QTextCursor::MoveAnchor;
        QTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|E", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextCursor_MoveOperation, &a0, sipType_QTextCursor_MoveMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveCursor(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_moveCursor, doc_QTextEdit_moveCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_print_, "QTextEdit.print_(QPrinter)");

extern "C" {static PyObject *meth_QTextEdit_print_(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_print_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPrinter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->print(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_print_, doc_QTextEdit_print_);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_print, "QTextEdit.print(QPrinter)");

extern "C" {static PyObject *meth_QTextEdit_print(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_print(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter * a0;
        QTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            sipName_printer,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPrinter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->print(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_print, doc_QTextEdit_print);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setFontPointSize, "QTextEdit.setFontPointSize(float)");

extern "C" {static PyObject *meth_QTextEdit_setFontPointSize(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setFontPointSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontPointSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setFontPointSize, doc_QTextEdit_setFontPointSize);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setFontFamily, "QTextEdit.setFontFamily(QString)");

extern "C" {static PyObject *meth_QTextEdit_setFontFamily(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setFontFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontFamily(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setFontFamily, doc_QTextEdit_setFontFamily);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setFontWeight, "QTextEdit.setFontWeight(int)");

extern "C" {static PyObject *meth_QTextEdit_setFontWeight(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setFontWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontWeight(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setFontWeight, doc_QTextEdit_setFontWeight);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setFontUnderline, "QTextEdit.setFontUnderline(bool)");

extern "C" {static PyObject *meth_QTextEdit_setFontUnderline(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setFontUnderline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontUnderline(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setFontUnderline, doc_QTextEdit_setFontUnderline);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setFontItalic, "QTextEdit.setFontItalic(bool)");

extern "C" {static PyObject *meth_QTextEdit_setFontItalic(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setFontItalic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontItalic(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setFontItalic, doc_QTextEdit_setFontItalic);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setText, "QTextEdit.setText(QString)");

extern "C" {static PyObject *meth_QTextEdit_setText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setText(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setText, doc_QTextEdit_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setTextColor, "QTextEdit.setTextColor(QColor)");

extern "C" {static PyObject *meth_QTextEdit_setTextColor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTextColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor * a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextColor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTextColor, doc_QTextEdit_setTextColor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setCurrentFont, "QTextEdit.setCurrentFont(QFont)");

extern "C" {static PyObject *meth_QTextEdit_setCurrentFont(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setCurrentFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QFont, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentFont(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setCurrentFont, doc_QTextEdit_setCurrentFont);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setAlignment, "QTextEdit.setAlignment(Qt.Alignment)");

extern "C" {static PyObject *meth_QTextEdit_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Alignment * a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAlignment(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setAlignment, doc_QTextEdit_setAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setPlainText, "QTextEdit.setPlainText(QString)");

extern "C" {static PyObject *meth_QTextEdit_setPlainText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPlainText(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setPlainText, doc_QTextEdit_setPlainText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setHtml, "QTextEdit.setHtml(QString)");

extern "C" {static PyObject *meth_QTextEdit_setHtml(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHtml(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setHtml, doc_QTextEdit_setHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_cut, "QTextEdit.cut()");

extern "C" {static PyObject *meth_QTextEdit_cut(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_cut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->cut();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_cut, doc_QTextEdit_cut);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_copy, "QTextEdit.copy()");

extern "C" {static PyObject *meth_QTextEdit_copy(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_copy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->copy();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_copy, doc_QTextEdit_copy);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_paste, "QTextEdit.paste()");

extern "C" {static PyObject *meth_QTextEdit_paste(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_paste(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->paste();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_paste, doc_QTextEdit_paste);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_clear, "QTextEdit.clear()");

extern "C" {static PyObject *meth_QTextEdit_clear(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_clear, doc_QTextEdit_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_selectAll, "QTextEdit.selectAll()");

extern "C" {static PyObject *meth_QTextEdit_selectAll(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_selectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->selectAll();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_selectAll, doc_QTextEdit_selectAll);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_insertPlainText, "QTextEdit.insertPlainText(QString)");

extern "C" {static PyObject *meth_QTextEdit_insertPlainText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_insertPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertPlainText(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_insertPlainText, doc_QTextEdit_insertPlainText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_insertHtml, "QTextEdit.insertHtml(QString)");

extern "C" {static PyObject *meth_QTextEdit_insertHtml(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_insertHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertHtml(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_insertHtml, doc_QTextEdit_insertHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_scrollToAnchor, "QTextEdit.scrollToAnchor(QString)");

extern "C" {static PyObject *meth_QTextEdit_scrollToAnchor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_scrollToAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->scrollToAnchor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_scrollToAnchor, doc_QTextEdit_scrollToAnchor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_redo, "QTextEdit.redo()");

extern "C" {static PyObject *meth_QTextEdit_redo(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_redo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->redo();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_redo, doc_QTextEdit_redo);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_undo, "QTextEdit.undo()");

extern "C" {static PyObject *meth_QTextEdit_undo(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_undo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->undo();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_undo, doc_QTextEdit_undo);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_zoomIn, "QTextEdit.zoomIn(int range=1)");

extern "C" {static PyObject *meth_QTextEdit_zoomIn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_zoomIn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 1;
        QTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->zoomIn(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_zoomIn, doc_QTextEdit_zoomIn);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_zoomOut, "QTextEdit.zoomOut(int range=1)");

extern "C" {static PyObject *meth_QTextEdit_zoomOut(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_zoomOut(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 1;
        QTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->zoomOut(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_zoomOut, doc_QTextEdit_zoomOut);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_event, "QTextEdit.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QTextEdit_event(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTextEdit::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_event, doc_QTextEdit_event);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_timerEvent, "QTextEdit.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QTextEdit_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextEdit::timerEvent(a0) : sipCpp->timerEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_timerEvent, doc_QTextEdit_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_keyPressEvent, "QTextEdit.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QTextEdit_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextEdit::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_keyPressEvent, doc_QTextEdit_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_keyReleaseEvent, "QTextEdit.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QTextEdit_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextEdit::keyReleaseEvent(a0) : sipCpp->keyReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_keyReleaseEvent, doc_QTextEdit_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_resizeEvent, "QTextEdit.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QTextEdit_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextEdit::resizeEvent(a0) : sipCpp->resizeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_resizeEvent, doc_QTextEdit_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_paintEvent, "QTextEdit.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QTextEdit_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPaintEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextEdit::paintEvent(a0) : sipCpp->paintEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_paintEvent, doc_QTextEdit_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_mousePressEvent, "QTextEdit.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTextEdit_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextEdit::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_mousePressEvent, doc_QTextEdit_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_mouseMoveEvent, "QTextEdit.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTextEdit_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextEdit::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_mouseMoveEvent, doc_QTextEdit_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_mouseReleaseEvent, "QTextEdit.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTextEdit_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextEdit::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_mouseReleaseEvent, doc_QTextEdit_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_mouseDoubleClickEvent, "QTextEdit.mouseDoubleClickEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTextEdit_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextEdit::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_mouseDoubleClickEvent, doc_QTextEdit_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_focusNextPrevChild, "QTextEdit.focusNextPrevChild(bool) -> bool");

extern "C" {static PyObject *meth_QTextEdit_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTextEdit::focusNextPrevChild(a0) : sipCpp->focusNextPrevChild(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_focusNextPrevChild, doc_QTextEdit_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_contextMenuEvent, "QTextEdit.contextMenuEvent(QContextMenuEvent)");

extern "C" {static PyObject *meth_QTextEdit_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextEdit::contextMenuEvent(a0) : sipCpp->contextMenuEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_contextMenuEvent, doc_QTextEdit_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_dragEnterEvent, "QTextEdit.dragEnterEvent(QDragEnterEvent)");

extern "C" {static PyObject *meth_QTextEdit_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextEdit::dragEnterEvent(a0) : sipCpp->dragEnterEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_dragEnterEvent, doc_QTextEdit_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_dragLeaveEvent, "QTextEdit.dragLeaveEvent(QDragLeaveEvent)");

extern "C" {static PyObject *meth_QTextEdit_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextEdit::dragLeaveEvent(a0) : sipCpp->dragLeaveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_dragLeaveEvent, doc_QTextEdit_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_dragMoveEvent, "QTextEdit.dragMoveEvent(QDragMoveEvent)");

extern "C" {static PyObject *meth_QTextEdit_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextEdit::dragMoveEvent(a0) : sipCpp->dragMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_dragMoveEvent, doc_QTextEdit_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_dropEvent, "QTextEdit.dropEvent(QDropEvent)");

extern "C" {static PyObject *meth_QTextEdit_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QDropEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextEdit::dropEvent(a0) : sipCpp->dropEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_dropEvent, doc_QTextEdit_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_focusInEvent, "QTextEdit.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QTextEdit_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextEdit::focusInEvent(a0) : sipCpp->focusInEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_focusInEvent, doc_QTextEdit_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_focusOutEvent, "QTextEdit.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QTextEdit_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextEdit::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_focusOutEvent, doc_QTextEdit_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_showEvent, "QTextEdit.showEvent(QShowEvent)");

extern "C" {static PyObject *meth_QTextEdit_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QShowEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextEdit::showEvent(a0) : sipCpp->showEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_showEvent, doc_QTextEdit_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_changeEvent, "QTextEdit.changeEvent(QEvent)");

extern "C" {static PyObject *meth_QTextEdit_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextEdit::changeEvent(a0) : sipCpp->changeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_changeEvent, doc_QTextEdit_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_wheelEvent, "QTextEdit.wheelEvent(QWheelEvent)");

extern "C" {static PyObject *meth_QTextEdit_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QWheelEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextEdit::wheelEvent(a0) : sipCpp->wheelEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_wheelEvent, doc_QTextEdit_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_createMimeDataFromSelection, "QTextEdit.createMimeDataFromSelection() -> QMimeData");

extern "C" {static PyObject *meth_QTextEdit_createMimeDataFromSelection(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_createMimeDataFromSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QMimeData *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTextEdit::createMimeDataFromSelection() : sipCpp->createMimeDataFromSelection());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMimeData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_createMimeDataFromSelection, doc_QTextEdit_createMimeDataFromSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_canInsertFromMimeData, "QTextEdit.canInsertFromMimeData(QMimeData) -> bool");

extern "C" {static PyObject *meth_QTextEdit_canInsertFromMimeData(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_canInsertFromMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMimeData * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMimeData, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTextEdit::canInsertFromMimeData(a0) : sipCpp->canInsertFromMimeData(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_canInsertFromMimeData, doc_QTextEdit_canInsertFromMimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_insertFromMimeData, "QTextEdit.insertFromMimeData(QMimeData)");

extern "C" {static PyObject *meth_QTextEdit_insertFromMimeData(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_insertFromMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMimeData * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMimeData, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextEdit::insertFromMimeData(a0) : sipCpp->insertFromMimeData(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_insertFromMimeData, doc_QTextEdit_insertFromMimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_inputMethodEvent, "QTextEdit.inputMethodEvent(QInputMethodEvent)");

extern "C" {static PyObject *meth_QTextEdit_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent * a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextEdit::inputMethodEvent(a0) : sipCpp->inputMethodEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_inputMethodEvent, doc_QTextEdit_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_inputMethodQuery, "QTextEdit.inputMethodQuery(Qt.InputMethodQuery) -> QVariant");

extern "C" {static PyObject *meth_QTextEdit_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::InputMethodQuery a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QTextEdit::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_inputMethodQuery, doc_QTextEdit_inputMethodQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_scrollContentsBy, "QTextEdit.scrollContentsBy(int, int)");

extern "C" {static PyObject *meth_QTextEdit_scrollContentsBy(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QTextEdit, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextEdit::scrollContentsBy(a0,a1) : sipCpp->scrollContentsBy(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_scrollContentsBy, doc_QTextEdit_scrollContentsBy);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_textBackgroundColor, "QTextEdit.textBackgroundColor() -> QColor");

extern "C" {static PyObject *meth_QTextEdit_textBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_textBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->textBackgroundColor());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_textBackgroundColor, doc_QTextEdit_textBackgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setTextBackgroundColor, "QTextEdit.setTextBackgroundColor(QColor)");

extern "C" {static PyObject *meth_QTextEdit_setTextBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTextBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor * a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextBackgroundColor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTextBackgroundColor, doc_QTextEdit_setTextBackgroundColor);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextEdit(void *, const sipTypeDef *);}
static void *cast_QTextEdit(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTextEdit)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractScrollArea)->ctd_cast((QAbstractScrollArea *)(QTextEdit *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextEdit(void *, int);}
static void release_QTextEdit(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTextEdit *>(sipCppV);
    else
        delete reinterpret_cast<QTextEdit *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTextEdit(sipSimpleWrapper *);}
static void dealloc_QTextEdit(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTextEdit *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTextEdit(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QTextEdit(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QTextEdit(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTextEdit *sipCpp = 0;

    {
        QWidget * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTextEdit(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        QWidget * a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QWidget, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTextEdit(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextEdit[] = {{21, 255, 1}};


static PyMethodDef methods_QTextEdit[] = {
    {SIP_MLNAME_CAST(sipName_acceptRichText), meth_QTextEdit_acceptRichText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_acceptRichText)},
    {SIP_MLNAME_CAST(sipName_alignment), meth_QTextEdit_alignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_alignment)},
    {SIP_MLNAME_CAST(sipName_anchorAt), meth_QTextEdit_anchorAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_anchorAt)},
    {SIP_MLNAME_CAST(sipName_append), meth_QTextEdit_append, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_append)},
    {SIP_MLNAME_CAST(sipName_autoFormatting), meth_QTextEdit_autoFormatting, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_autoFormatting)},
    {SIP_MLNAME_CAST(sipName_canInsertFromMimeData), meth_QTextEdit_canInsertFromMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_canInsertFromMimeData)},
    {SIP_MLNAME_CAST(sipName_canPaste), meth_QTextEdit_canPaste, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_canPaste)},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QTextEdit_changeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_changeEvent)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QTextEdit_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_clear)},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QTextEdit_contextMenuEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_contextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_copy), meth_QTextEdit_copy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_copy)},
    {SIP_MLNAME_CAST(sipName_createMimeDataFromSelection), meth_QTextEdit_createMimeDataFromSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_createMimeDataFromSelection)},
    {SIP_MLNAME_CAST(sipName_createStandardContextMenu), meth_QTextEdit_createStandardContextMenu, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_createStandardContextMenu)},
    {SIP_MLNAME_CAST(sipName_currentCharFormat), meth_QTextEdit_currentCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_currentCharFormat)},
    {SIP_MLNAME_CAST(sipName_currentFont), meth_QTextEdit_currentFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_currentFont)},
    {SIP_MLNAME_CAST(sipName_cursorForPosition), meth_QTextEdit_cursorForPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_cursorForPosition)},
    {SIP_MLNAME_CAST(sipName_cursorRect), meth_QTextEdit_cursorRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_cursorRect)},
    {SIP_MLNAME_CAST(sipName_cursorWidth), meth_QTextEdit_cursorWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_cursorWidth)},
    {SIP_MLNAME_CAST(sipName_cut), meth_QTextEdit_cut, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_cut)},
    {SIP_MLNAME_CAST(sipName_document), meth_QTextEdit_document, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_document)},
    {SIP_MLNAME_CAST(sipName_documentTitle), meth_QTextEdit_documentTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_documentTitle)},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QTextEdit_dragEnterEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_dragEnterEvent)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QTextEdit_dragLeaveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QTextEdit_dragMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QTextEdit_dropEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_dropEvent)},
    {SIP_MLNAME_CAST(sipName_ensureCursorVisible), meth_QTextEdit_ensureCursorVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_ensureCursorVisible)},
    {SIP_MLNAME_CAST(sipName_event), meth_QTextEdit_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_event)},
    {SIP_MLNAME_CAST(sipName_extraSelections), meth_QTextEdit_extraSelections, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_extraSelections)},
    {SIP_MLNAME_CAST(sipName_find), (PyCFunction)meth_QTextEdit_find, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_find)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QTextEdit_focusInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QTextEdit_focusNextPrevChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QTextEdit_focusOutEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_fontFamily), meth_QTextEdit_fontFamily, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_fontFamily)},
    {SIP_MLNAME_CAST(sipName_fontItalic), meth_QTextEdit_fontItalic, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_fontItalic)},
    {SIP_MLNAME_CAST(sipName_fontPointSize), meth_QTextEdit_fontPointSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_fontPointSize)},
    {SIP_MLNAME_CAST(sipName_fontUnderline), meth_QTextEdit_fontUnderline, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_fontUnderline)},
    {SIP_MLNAME_CAST(sipName_fontWeight), meth_QTextEdit_fontWeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_fontWeight)},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_QTextEdit_inputMethodEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_inputMethodEvent)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QTextEdit_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_insertFromMimeData), meth_QTextEdit_insertFromMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_insertFromMimeData)},
    {SIP_MLNAME_CAST(sipName_insertHtml), meth_QTextEdit_insertHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_insertHtml)},
    {SIP_MLNAME_CAST(sipName_insertPlainText), meth_QTextEdit_insertPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_insertPlainText)},
    {SIP_MLNAME_CAST(sipName_isReadOnly), meth_QTextEdit_isReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_isReadOnly)},
    {SIP_MLNAME_CAST(sipName_isUndoRedoEnabled), meth_QTextEdit_isUndoRedoEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_isUndoRedoEnabled)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QTextEdit_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QTextEdit_keyReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_lineWrapColumnOrWidth), meth_QTextEdit_lineWrapColumnOrWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_lineWrapColumnOrWidth)},
    {SIP_MLNAME_CAST(sipName_lineWrapMode), meth_QTextEdit_lineWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_lineWrapMode)},
    {SIP_MLNAME_CAST(sipName_loadResource), meth_QTextEdit_loadResource, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_loadResource)},
    {SIP_MLNAME_CAST(sipName_mergeCurrentCharFormat), meth_QTextEdit_mergeCurrentCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_mergeCurrentCharFormat)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QTextEdit_mouseDoubleClickEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QTextEdit_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QTextEdit_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QTextEdit_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveCursor), (PyCFunction)meth_QTextEdit_moveCursor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_moveCursor)},
    {SIP_MLNAME_CAST(sipName_overwriteMode), meth_QTextEdit_overwriteMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_overwriteMode)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QTextEdit_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_paintEvent)},
    {SIP_MLNAME_CAST(sipName_paste), meth_QTextEdit_paste, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_paste)},
    {SIP_MLNAME_CAST(sipName_print), (PyCFunction)meth_QTextEdit_print, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_print)},
    {SIP_MLNAME_CAST(sipName_print_), meth_QTextEdit_print_, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_print_)},
    {SIP_MLNAME_CAST(sipName_redo), meth_QTextEdit_redo, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_redo)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QTextEdit_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_scrollContentsBy), meth_QTextEdit_scrollContentsBy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_scrollContentsBy)},
    {SIP_MLNAME_CAST(sipName_scrollToAnchor), meth_QTextEdit_scrollToAnchor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_scrollToAnchor)},
    {SIP_MLNAME_CAST(sipName_selectAll), meth_QTextEdit_selectAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_selectAll)},
    {SIP_MLNAME_CAST(sipName_setAcceptRichText), meth_QTextEdit_setAcceptRichText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setAcceptRichText)},
    {SIP_MLNAME_CAST(sipName_setAlignment), meth_QTextEdit_setAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setAlignment)},
    {SIP_MLNAME_CAST(sipName_setAutoFormatting), meth_QTextEdit_setAutoFormatting, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setAutoFormatting)},
    {SIP_MLNAME_CAST(sipName_setCurrentCharFormat), meth_QTextEdit_setCurrentCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setCurrentCharFormat)},
    {SIP_MLNAME_CAST(sipName_setCurrentFont), meth_QTextEdit_setCurrentFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setCurrentFont)},
    {SIP_MLNAME_CAST(sipName_setCursorWidth), meth_QTextEdit_setCursorWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setCursorWidth)},
    {SIP_MLNAME_CAST(sipName_setDocument), meth_QTextEdit_setDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setDocument)},
    {SIP_MLNAME_CAST(sipName_setDocumentTitle), meth_QTextEdit_setDocumentTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setDocumentTitle)},
    {SIP_MLNAME_CAST(sipName_setExtraSelections), meth_QTextEdit_setExtraSelections, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setExtraSelections)},
    {SIP_MLNAME_CAST(sipName_setFontFamily), meth_QTextEdit_setFontFamily, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setFontFamily)},
    {SIP_MLNAME_CAST(sipName_setFontItalic), meth_QTextEdit_setFontItalic, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setFontItalic)},
    {SIP_MLNAME_CAST(sipName_setFontPointSize), meth_QTextEdit_setFontPointSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setFontPointSize)},
    {SIP_MLNAME_CAST(sipName_setFontUnderline), meth_QTextEdit_setFontUnderline, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setFontUnderline)},
    {SIP_MLNAME_CAST(sipName_setFontWeight), meth_QTextEdit_setFontWeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setFontWeight)},
    {SIP_MLNAME_CAST(sipName_setHtml), meth_QTextEdit_setHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setHtml)},
    {SIP_MLNAME_CAST(sipName_setLineWrapColumnOrWidth), meth_QTextEdit_setLineWrapColumnOrWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setLineWrapColumnOrWidth)},
    {SIP_MLNAME_CAST(sipName_setLineWrapMode), meth_QTextEdit_setLineWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setLineWrapMode)},
    {SIP_MLNAME_CAST(sipName_setOverwriteMode), meth_QTextEdit_setOverwriteMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setOverwriteMode)},
    {SIP_MLNAME_CAST(sipName_setPlainText), meth_QTextEdit_setPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setPlainText)},
    {SIP_MLNAME_CAST(sipName_setReadOnly), meth_QTextEdit_setReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setReadOnly)},
    {SIP_MLNAME_CAST(sipName_setTabChangesFocus), meth_QTextEdit_setTabChangesFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setTabChangesFocus)},
    {SIP_MLNAME_CAST(sipName_setTabStopWidth), meth_QTextEdit_setTabStopWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setTabStopWidth)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QTextEdit_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setText)},
    {SIP_MLNAME_CAST(sipName_setTextBackgroundColor), meth_QTextEdit_setTextBackgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setTextBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_setTextColor), meth_QTextEdit_setTextColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setTextColor)},
    {SIP_MLNAME_CAST(sipName_setTextCursor), meth_QTextEdit_setTextCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setTextCursor)},
    {SIP_MLNAME_CAST(sipName_setTextInteractionFlags), meth_QTextEdit_setTextInteractionFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setTextInteractionFlags)},
    {SIP_MLNAME_CAST(sipName_setUndoRedoEnabled), meth_QTextEdit_setUndoRedoEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setUndoRedoEnabled)},
    {SIP_MLNAME_CAST(sipName_setWordWrapMode), meth_QTextEdit_setWordWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setWordWrapMode)},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QTextEdit_showEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_showEvent)},
    {SIP_MLNAME_CAST(sipName_tabChangesFocus), meth_QTextEdit_tabChangesFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_tabChangesFocus)},
    {SIP_MLNAME_CAST(sipName_tabStopWidth), meth_QTextEdit_tabStopWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_tabStopWidth)},
    {SIP_MLNAME_CAST(sipName_textBackgroundColor), meth_QTextEdit_textBackgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_textBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_textColor), meth_QTextEdit_textColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_textColor)},
    {SIP_MLNAME_CAST(sipName_textCursor), meth_QTextEdit_textCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_textCursor)},
    {SIP_MLNAME_CAST(sipName_textInteractionFlags), meth_QTextEdit_textInteractionFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_textInteractionFlags)},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QTextEdit_timerEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_timerEvent)},
    {SIP_MLNAME_CAST(sipName_toHtml), meth_QTextEdit_toHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_toHtml)},
    {SIP_MLNAME_CAST(sipName_toPlainText), meth_QTextEdit_toPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_toPlainText)},
    {SIP_MLNAME_CAST(sipName_undo), meth_QTextEdit_undo, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_undo)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QTextEdit_wheelEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_wheelEvent)},
    {SIP_MLNAME_CAST(sipName_wordWrapMode), meth_QTextEdit_wordWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_wordWrapMode)},
    {SIP_MLNAME_CAST(sipName_zoomIn), (PyCFunction)meth_QTextEdit_zoomIn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_zoomIn)},
    {SIP_MLNAME_CAST(sipName_zoomOut), (PyCFunction)meth_QTextEdit_zoomOut, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_zoomOut)}
};

static sipEnumMemberDef enummembers_QTextEdit[] = {
    {sipName_AutoAll, QTextEdit::AutoAll, 655},
    {sipName_AutoBulletList, QTextEdit::AutoBulletList, 655},
    {sipName_AutoNone, QTextEdit::AutoNone, 655},
    {sipName_FixedColumnWidth, QTextEdit::FixedColumnWidth, 657},
    {sipName_FixedPixelWidth, QTextEdit::FixedPixelWidth, 657},
    {sipName_NoWrap, QTextEdit::NoWrap, 657},
    {sipName_WidgetWidth, QTextEdit::WidgetWidth, 657},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QTextEdit[] = {
    {"cursorPositionChanged()", "\1QTextEdit.cursorPositionChanged()", 0},
    {"selectionChanged()", "\1QTextEdit.selectionChanged()", 0},
    {"copyAvailable(bool)", "\1QTextEdit.copyAvailable(bool)", 0},
    {"currentCharFormatChanged(const QTextCharFormat&)", "\1QTextEdit.currentCharFormatChanged(QTextCharFormat)", 0},
    {"redoAvailable(bool)", "\1QTextEdit.redoAvailable(bool)", 0},
    {"undoAvailable(bool)", "\1QTextEdit.undoAvailable(bool)", 0},
    {"textChanged()", "\1QTextEdit.textChanged()", 0},
    {0, 0, 0}
};

PyDoc_STRVAR(doc_QTextEdit, "\1QTextEdit(QWidget parent=None)\n"
    "QTextEdit(QString, QWidget parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QTextEdit = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QTextEdit,
        {0}
    },
    {
        sipNameNr_QTextEdit,
        {0, 0, 1},
        109, methods_QTextEdit,
        7, enummembers_QTextEdit,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTextEdit,
    -1,
    -1,
    supers_QTextEdit,
    0,
    init_QTextEdit,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextEdit,
    0,
    0,
    0,
    release_QTextEdit,
    cast_QTextEdit,
    0,
    0,
    0
},
    &QTextEdit::staticMetaObject,
    0,
    pyqt4_signals_QTextEdit
};

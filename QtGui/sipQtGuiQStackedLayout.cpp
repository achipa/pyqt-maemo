/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:03 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qstackedlayout.sip"
#include <qstackedlayout.h>
#line 39 "sipQtGuiQStackedLayout.cpp"

#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 43 "sipQtGuiQStackedLayout.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 46 "sipQtGuiQStackedLayout.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 49 "sipQtGuiQStackedLayout.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 52 "sipQtGuiQStackedLayout.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 55 "sipQtGuiQStackedLayout.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 58 "sipQtGuiQStackedLayout.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 61 "sipQtGuiQStackedLayout.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 64 "sipQtGuiQStackedLayout.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67 "sipQtGuiQStackedLayout.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 70 "sipQtGuiQStackedLayout.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 73 "sipQtGuiQStackedLayout.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 76 "sipQtGuiQStackedLayout.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 79 "sipQtGuiQStackedLayout.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 82 "sipQtGuiQStackedLayout.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 85 "sipQtGuiQStackedLayout.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 88 "sipQtGuiQStackedLayout.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 91 "sipQtGuiQStackedLayout.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 94 "sipQtGuiQStackedLayout.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 97 "sipQtGuiQStackedLayout.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 100 "sipQtGuiQStackedLayout.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 103 "sipQtGuiQStackedLayout.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 106 "sipQtGuiQStackedLayout.cpp"
#line 79 "/home/maemo/python-qt4-4.7/sip/QtGui/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 109 "sipQtGuiQStackedLayout.cpp"


class sipQStackedLayout : public QStackedLayout
{
public:
    sipQStackedLayout();
    sipQStackedLayout(QWidget *);
    sipQStackedLayout(QLayout *);
    virtual ~sipQStackedLayout();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QWidget * widget();
    int count() const;
    void addItem(QLayoutItem *);
    QSize sizeHint() const;
    QSize minimumSize() const;
    QLayoutItem * itemAt(int) const;
    QLayoutItem * takeAt(int);
    void setGeometry(const QRect&);
    void invalidate();
    QRect geometry() const;
    Qt::Orientations expandingDirections() const;
    QSize maximumSize() const;
    int indexOf(QWidget *) const;
    bool isEmpty() const;
    QLayout * layout();
    void childEvent(QChildEvent *);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);
    bool hasHeightForWidth() const;
    int heightForWidth(int) const;
    int minimumHeightForWidth(int) const;
    QSpacerItem * spacerItem();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQStackedLayout(const sipQStackedLayout &);
    sipQStackedLayout &operator = (const sipQStackedLayout &);

    char sipPyMethods[26];
};

sipQStackedLayout::sipQStackedLayout(): QStackedLayout(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStackedLayout::sipQStackedLayout(QWidget *a0): QStackedLayout(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStackedLayout::sipQStackedLayout(QLayout *a0): QStackedLayout(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStackedLayout::~sipQStackedLayout()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQStackedLayout::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QStackedLayout);
}

int sipQStackedLayout::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QStackedLayout::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QStackedLayout,_c,_id,_a);

    return _id;
}

void *sipQStackedLayout::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QStackedLayout,_clname)) ? this : QStackedLayout::qt_metacast(_clname);
}

QWidget * sipQStackedLayout::widget()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_widget);

    if (!meth)
        return QStackedLayout::widget();

    extern QWidget * sipVH_QtGui_106(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_106(sipGILState,meth);
}

int sipQStackedLayout::count() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_count);

    if (!meth)
        return QStackedLayout::count();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

void sipQStackedLayout::addItem(QLayoutItem *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_addItem);

    if (!meth)
    {
        QStackedLayout::addItem(a0);
        return;
    }

    extern void sipVH_QtGui_105(sip_gilstate_t,PyObject *,QLayoutItem *);

    sipVH_QtGui_105(sipGILState,meth,a0);
}

QSize sipQStackedLayout::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QStackedLayout::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_4(sipGILState,meth);
}

QSize sipQStackedLayout::minimumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_minimumSize);

    if (!meth)
        return QStackedLayout::minimumSize();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_4(sipGILState,meth);
}

QLayoutItem * sipQStackedLayout::itemAt(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_itemAt);

    if (!meth)
        return QStackedLayout::itemAt(a0);

    extern QLayoutItem * sipVH_QtGui_104(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_104(sipGILState,meth,a0);
}

QLayoutItem * sipQStackedLayout::takeAt(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_takeAt);

    if (!meth)
        return QStackedLayout::takeAt(a0);

    extern QLayoutItem * sipVH_QtGui_103(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_103(sipGILState,meth,a0);
}

void sipQStackedLayout::setGeometry(const QRect& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_setGeometry);

    if (!meth)
    {
        QStackedLayout::setGeometry(a0);
        return;
    }

    extern void sipVH_QtGui_102(sip_gilstate_t,PyObject *,const QRect&);

    sipVH_QtGui_102(sipGILState,meth,a0);
}

void sipQStackedLayout::invalidate()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_invalidate);

    if (!meth)
    {
        QLayout::invalidate();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

QRect sipQStackedLayout::geometry() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_geometry);

    if (!meth)
        return QLayout::geometry();

    extern QRect sipVH_QtGui_154(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_154(sipGILState,meth);
}

Qt::Orientations sipQStackedLayout::expandingDirections() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_expandingDirections);

    if (!meth)
        return QLayout::expandingDirections();

    extern Qt::Orientations sipVH_QtGui_155(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_155(sipGILState,meth);
}

QSize sipQStackedLayout::maximumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_maximumSize);

    if (!meth)
        return QLayout::maximumSize();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_4(sipGILState,meth);
}

int sipQStackedLayout::indexOf(QWidget *a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_indexOf);

    if (!meth)
        return QLayout::indexOf(a0);

    extern int sipVH_QtGui_158(sip_gilstate_t,PyObject *,QWidget *);

    return sipVH_QtGui_158(sipGILState,meth,a0);
}

bool sipQStackedLayout::isEmpty() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_isEmpty);

    if (!meth)
        return QLayout::isEmpty();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

QLayout * sipQStackedLayout::layout()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_layout);

    if (!meth)
        return QLayout::layout();

    extern QLayout * sipVH_QtGui_157(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_157(sipGILState,meth);
}

void sipQStackedLayout::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QLayout::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

bool sipQStackedLayout::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQStackedLayout::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQStackedLayout::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQStackedLayout::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQStackedLayout::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQStackedLayout::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

bool sipQStackedLayout::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!meth)
        return QLayoutItem::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

int sipQStackedLayout::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QLayoutItem::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

int sipQStackedLayout::minimumHeightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_minimumHeightForWidth);

    if (!meth)
        return QLayoutItem::minimumHeightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

QSpacerItem * sipQStackedLayout::spacerItem()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_spacerItem);

    if (!meth)
        return QLayoutItem::spacerItem();

    extern QSpacerItem * sipVH_QtGui_156(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_156(sipGILState,meth);
}


PyDoc_STRVAR(doc_QStackedLayout_addWidget, "QStackedLayout.addWidget(QWidget) -> int");

extern "C" {static PyObject *meth_QStackedLayout_addWidget(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_addWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget * a0;
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QStackedLayout, &sipCpp, sipType_QWidget, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addWidget(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_addWidget, doc_QStackedLayout_addWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_insertWidget, "QStackedLayout.insertWidget(int, QWidget) -> int");

extern "C" {static PyObject *meth_QStackedLayout_insertWidget(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_insertWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWidget * a1;
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QStackedLayout, &sipCpp, &a0, sipType_QWidget, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->insertWidget(a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_insertWidget, doc_QStackedLayout_insertWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_currentWidget, "QStackedLayout.currentWidget() -> QWidget");

extern "C" {static PyObject *meth_QStackedLayout_currentWidget(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_currentWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStackedLayout, &sipCpp))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_currentWidget, doc_QStackedLayout_currentWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_currentIndex, "QStackedLayout.currentIndex() -> int");

extern "C" {static PyObject *meth_QStackedLayout_currentIndex(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_currentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStackedLayout, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentIndex();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_currentIndex, doc_QStackedLayout_currentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_widget, "QStackedLayout.widget(int) -> QWidget\n"
    "QStackedLayout.widget() -> QWidget");

extern "C" {static PyObject *meth_QStackedLayout_widget(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_widget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStackedLayout, &sipCpp, &a0))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->widget(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    {
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStackedLayout, &sipCpp))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QStackedLayout::widget() : sipCpp->widget());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_widget, doc_QStackedLayout_widget);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_count, "QStackedLayout.count() -> int");

extern "C" {static PyObject *meth_QStackedLayout_count(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStackedLayout, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QStackedLayout::count() : sipCpp->count());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_count, doc_QStackedLayout_count);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_addItem, "QStackedLayout.addItem(QLayoutItem)");

extern "C" {static PyObject *meth_QStackedLayout_addItem(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_addItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QLayoutItem * a0;
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QStackedLayout, &sipCpp, sipType_QLayoutItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QStackedLayout::addItem(a0) : sipCpp->addItem(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_addItem, doc_QStackedLayout_addItem);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_sizeHint, "QStackedLayout.sizeHint() -> QSize");

extern "C" {static PyObject *meth_QStackedLayout_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStackedLayout, &sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QStackedLayout::sizeHint() : sipCpp->sizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_sizeHint, doc_QStackedLayout_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_minimumSize, "QStackedLayout.minimumSize() -> QSize");

extern "C" {static PyObject *meth_QStackedLayout_minimumSize(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_minimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStackedLayout, &sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QStackedLayout::minimumSize() : sipCpp->minimumSize()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_minimumSize, doc_QStackedLayout_minimumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_itemAt, "QStackedLayout.itemAt(int) -> QLayoutItem");

extern "C" {static PyObject *meth_QStackedLayout_itemAt(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_itemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStackedLayout, &sipCpp, &a0))
        {
            QLayoutItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QStackedLayout::itemAt(a0) : sipCpp->itemAt(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QLayoutItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_itemAt, doc_QStackedLayout_itemAt);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_takeAt, "QStackedLayout.takeAt(int) -> QLayoutItem");

extern "C" {static PyObject *meth_QStackedLayout_takeAt(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_takeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStackedLayout, &sipCpp, &a0))
        {
            QLayoutItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QStackedLayout::takeAt(a0) : sipCpp->takeAt(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QLayoutItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_takeAt, doc_QStackedLayout_takeAt);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_setGeometry, "QStackedLayout.setGeometry(QRect)");

extern "C" {static PyObject *meth_QStackedLayout_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect * a0;
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStackedLayout, &sipCpp, sipType_QRect, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QStackedLayout::setGeometry(*a0) : sipCpp->setGeometry(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_setGeometry, doc_QStackedLayout_setGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_setCurrentIndex, "QStackedLayout.setCurrentIndex(int)");

extern "C" {static PyObject *meth_QStackedLayout_setCurrentIndex(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_setCurrentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStackedLayout, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentIndex(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_setCurrentIndex, doc_QStackedLayout_setCurrentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_setCurrentWidget, "QStackedLayout.setCurrentWidget(QWidget)");

extern "C" {static PyObject *meth_QStackedLayout_setCurrentWidget(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_setCurrentWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget * a0;
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QStackedLayout, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentWidget(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_setCurrentWidget, doc_QStackedLayout_setCurrentWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_stackingMode, "QStackedLayout.stackingMode() -> QStackedLayout.StackingMode");

extern "C" {static PyObject *meth_QStackedLayout_stackingMode(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_stackingMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStackedLayout, &sipCpp))
        {
            QStackedLayout::StackingMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->stackingMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QStackedLayout_StackingMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_stackingMode, doc_QStackedLayout_stackingMode);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_setStackingMode, "QStackedLayout.setStackingMode(QStackedLayout.StackingMode)");

extern "C" {static PyObject *meth_QStackedLayout_setStackingMode(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_setStackingMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStackedLayout::StackingMode a0;
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QStackedLayout, &sipCpp, sipType_QStackedLayout_StackingMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStackingMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_setStackingMode, doc_QStackedLayout_setStackingMode);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QStackedLayout(void *, const sipTypeDef *);}
static void *cast_QStackedLayout(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QStackedLayout)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QLayout)->ctd_cast((QLayout *)(QStackedLayout *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStackedLayout(void *, int);}
static void release_QStackedLayout(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQStackedLayout *>(sipCppV);
    else
        delete reinterpret_cast<QStackedLayout *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QStackedLayout(sipSimpleWrapper *);}
static void dealloc_QStackedLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQStackedLayout *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QStackedLayout(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QStackedLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QStackedLayout(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQStackedLayout *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQStackedLayout();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QWidget * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQStackedLayout(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QLayout * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QLayout, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQStackedLayout(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QStackedLayout[] = {{271, 255, 1}};


static PyMethodDef methods_QStackedLayout[] = {
    {SIP_MLNAME_CAST(sipName_addItem), meth_QStackedLayout_addItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_addItem)},
    {SIP_MLNAME_CAST(sipName_addWidget), meth_QStackedLayout_addWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_addWidget)},
    {SIP_MLNAME_CAST(sipName_count), meth_QStackedLayout_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_count)},
    {SIP_MLNAME_CAST(sipName_currentIndex), meth_QStackedLayout_currentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_currentIndex)},
    {SIP_MLNAME_CAST(sipName_currentWidget), meth_QStackedLayout_currentWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_currentWidget)},
    {SIP_MLNAME_CAST(sipName_insertWidget), meth_QStackedLayout_insertWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_insertWidget)},
    {SIP_MLNAME_CAST(sipName_itemAt), meth_QStackedLayout_itemAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_itemAt)},
    {SIP_MLNAME_CAST(sipName_minimumSize), meth_QStackedLayout_minimumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_minimumSize)},
    {SIP_MLNAME_CAST(sipName_setCurrentIndex), meth_QStackedLayout_setCurrentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_setCurrentIndex)},
    {SIP_MLNAME_CAST(sipName_setCurrentWidget), meth_QStackedLayout_setCurrentWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_setCurrentWidget)},
    {SIP_MLNAME_CAST(sipName_setGeometry), meth_QStackedLayout_setGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_setGeometry)},
    {SIP_MLNAME_CAST(sipName_setStackingMode), meth_QStackedLayout_setStackingMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_setStackingMode)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QStackedLayout_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_sizeHint)},
    {SIP_MLNAME_CAST(sipName_stackingMode), meth_QStackedLayout_stackingMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_stackingMode)},
    {SIP_MLNAME_CAST(sipName_takeAt), meth_QStackedLayout_takeAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_takeAt)},
    {SIP_MLNAME_CAST(sipName_widget), meth_QStackedLayout_widget, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_widget)}
};

static sipEnumMemberDef enummembers_QStackedLayout[] = {
    {sipName_StackAll, QStackedLayout::StackAll, 453},
    {sipName_StackOne, QStackedLayout::StackOne, 453},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QStackedLayout[] = {
    {"currentChanged(int)", "\1QStackedLayout.currentChanged(int)", 0},
    {"widgetRemoved(int)", "\1QStackedLayout.widgetRemoved(int)", 0},
    {0, 0, 0}
};

PyDoc_STRVAR(doc_QStackedLayout, "\1QStackedLayout()\n"
    "QStackedLayout(QWidget)\n"
    "QStackedLayout(QLayout)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QStackedLayout = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QStackedLayout,
        {0}
    },
    {
        sipNameNr_QStackedLayout,
        {0, 0, 1},
        16, methods_QStackedLayout,
        2, enummembers_QStackedLayout,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QStackedLayout,
    -1,
    -1,
    supers_QStackedLayout,
    0,
    init_QStackedLayout,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QStackedLayout,
    0,
    0,
    0,
    release_QStackedLayout,
    cast_QStackedLayout,
    0,
    0,
    0
},
    &QStackedLayout::staticMetaObject,
    0,
    pyqt4_signals_QStackedLayout
};

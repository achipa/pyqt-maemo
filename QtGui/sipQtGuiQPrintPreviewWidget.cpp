/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:03 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 40 "/home/maemo/python-qt4-4.7/sip/QtGui/qprintpreviewwidget.sip"
#include <qprintpreviewwidget.h>
#line 39 "sipQtGuiQPrintPreviewWidget.cpp"

#line 39 "/home/maemo/python-qt4-4.7/sip/QtGui/qprinter.sip"
#include <qprinter.h>
#line 43 "sipQtGuiQPrintPreviewWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 46 "sipQtGuiQPrintPreviewWidget.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 49 "sipQtGuiQPrintPreviewWidget.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 52 "sipQtGuiQPrintPreviewWidget.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 55 "sipQtGuiQPrintPreviewWidget.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 58 "sipQtGuiQPrintPreviewWidget.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 61 "sipQtGuiQPrintPreviewWidget.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 64 "sipQtGuiQPrintPreviewWidget.cpp"
#line 39 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 67 "sipQtGuiQPrintPreviewWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 70 "sipQtGuiQPrintPreviewWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 73 "sipQtGuiQPrintPreviewWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 76 "sipQtGuiQPrintPreviewWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 79 "sipQtGuiQPrintPreviewWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 82 "sipQtGuiQPrintPreviewWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 85 "sipQtGuiQPrintPreviewWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 88 "sipQtGuiQPrintPreviewWidget.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 91 "sipQtGuiQPrintPreviewWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 94 "sipQtGuiQPrintPreviewWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 97 "sipQtGuiQPrintPreviewWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 100 "sipQtGuiQPrintPreviewWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 103 "sipQtGuiQPrintPreviewWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 106 "sipQtGuiQPrintPreviewWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 109 "sipQtGuiQPrintPreviewWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 112 "sipQtGuiQPrintPreviewWidget.cpp"
#line 520 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 539 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 117 "sipQtGuiQPrintPreviewWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 120 "sipQtGuiQPrintPreviewWidget.cpp"
#line 478 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 123 "sipQtGuiQPrintPreviewWidget.cpp"
#line 466 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 126 "sipQtGuiQPrintPreviewWidget.cpp"
#line 565 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 129 "sipQtGuiQPrintPreviewWidget.cpp"
#line 619 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 132 "sipQtGuiQPrintPreviewWidget.cpp"
#line 590 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 135 "sipQtGuiQPrintPreviewWidget.cpp"
#line 607 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 138 "sipQtGuiQPrintPreviewWidget.cpp"
#line 675 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "sipQtGuiQPrintPreviewWidget.cpp"
#line 301 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "sipQtGuiQPrintPreviewWidget.cpp"
#line 490 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "sipQtGuiQPrintPreviewWidget.cpp"
#line 442 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "sipQtGuiQPrintPreviewWidget.cpp"
#line 428 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "sipQtGuiQPrintPreviewWidget.cpp"
#line 414 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "sipQtGuiQPrintPreviewWidget.cpp"
#line 399 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "sipQtGuiQPrintPreviewWidget.cpp"
#line 379 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "sipQtGuiQPrintPreviewWidget.cpp"
#line 350 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "sipQtGuiQPrintPreviewWidget.cpp"
#line 279 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "sipQtGuiQPrintPreviewWidget.cpp"
#line 238 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "sipQtGuiQPrintPreviewWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 174 "sipQtGuiQPrintPreviewWidget.cpp"
#line 68 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 177 "sipQtGuiQPrintPreviewWidget.cpp"
#line 42 "/home/maemo/python-qt4-4.7/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 180 "sipQtGuiQPrintPreviewWidget.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 183 "sipQtGuiQPrintPreviewWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 186 "sipQtGuiQPrintPreviewWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 189 "sipQtGuiQPrintPreviewWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 192 "sipQtGuiQPrintPreviewWidget.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 195 "sipQtGuiQPrintPreviewWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 198 "sipQtGuiQPrintPreviewWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 201 "sipQtGuiQPrintPreviewWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 204 "sipQtGuiQPrintPreviewWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 207 "sipQtGuiQPrintPreviewWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 210 "sipQtGuiQPrintPreviewWidget.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 213 "sipQtGuiQPrintPreviewWidget.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 216 "sipQtGuiQPrintPreviewWidget.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 219 "sipQtGuiQPrintPreviewWidget.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 222 "sipQtGuiQPrintPreviewWidget.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 225 "sipQtGuiQPrintPreviewWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 228 "sipQtGuiQPrintPreviewWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 231 "sipQtGuiQPrintPreviewWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 234 "sipQtGuiQPrintPreviewWidget.cpp"


class sipQPrintPreviewWidget : public QPrintPreviewWidget
{
public:
    sipQPrintPreviewWidget(QPrinter *,QWidget *,Qt::WindowFlags);
    sipQPrintPreviewWidget(QWidget *,Qt::WindowFlags);
    virtual ~sipQPrintPreviewWidget();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void setVisible(bool);
    int devType() const;
    QSize sizeHint() const;
    QSize minimumSizeHint() const;
    int heightForWidth(int) const;
    QPaintEngine * paintEngine() const;
    bool event(QEvent *);
    void mousePressEvent(QMouseEvent *);
    void mouseReleaseEvent(QMouseEvent *);
    void mouseDoubleClickEvent(QMouseEvent *);
    void mouseMoveEvent(QMouseEvent *);
    void wheelEvent(QWheelEvent *);
    void keyPressEvent(QKeyEvent *);
    void keyReleaseEvent(QKeyEvent *);
    void focusInEvent(QFocusEvent *);
    void focusOutEvent(QFocusEvent *);
    void enterEvent(QEvent *);
    void leaveEvent(QEvent *);
    void paintEvent(QPaintEvent *);
    void moveEvent(QMoveEvent *);
    void resizeEvent(QResizeEvent *);
    void closeEvent(QCloseEvent *);
    void contextMenuEvent(QContextMenuEvent *);
    void tabletEvent(QTabletEvent *);
    void actionEvent(QActionEvent *);
    void dragEnterEvent(QDragEnterEvent *);
    void dragMoveEvent(QDragMoveEvent *);
    void dragLeaveEvent(QDragLeaveEvent *);
    void dropEvent(QDropEvent *);
    void showEvent(QShowEvent *);
    void hideEvent(QHideEvent *);
    void changeEvent(QEvent *);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void inputMethodEvent(QInputMethodEvent *);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    void enabledChange(bool);
    void paletteChange(const QPalette&);
    void fontChange(const QFont&);
    void windowActivationChange(bool);
    void languageChange();
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPrintPreviewWidget(const sipQPrintPreviewWidget &);
    sipQPrintPreviewWidget &operator = (const sipQPrintPreviewWidget &);

    char sipPyMethods[47];
};

sipQPrintPreviewWidget::sipQPrintPreviewWidget(QPrinter *a0,QWidget *a1,Qt::WindowFlags a2): QPrintPreviewWidget(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPrintPreviewWidget::sipQPrintPreviewWidget(QWidget *a0,Qt::WindowFlags a1): QPrintPreviewWidget(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPrintPreviewWidget::~sipQPrintPreviewWidget()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQPrintPreviewWidget::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QPrintPreviewWidget);
}

int sipQPrintPreviewWidget::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QPrintPreviewWidget::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QPrintPreviewWidget,_c,_id,_a);

    return _id;
}

void *sipQPrintPreviewWidget::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QPrintPreviewWidget,_clname)) ? this : QPrintPreviewWidget::qt_metacast(_clname);
}

void sipQPrintPreviewWidget::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_setVisible);

    if (!meth)
    {
        QPrintPreviewWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

int sipQPrintPreviewWidget::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

QSize sipQPrintPreviewWidget::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QWidget::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_4(sipGILState,meth);
}

QSize sipQPrintPreviewWidget::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!meth)
        return QWidget::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_4(sipGILState,meth);
}

int sipQPrintPreviewWidget::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QWidget::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

QPaintEngine * sipQPrintPreviewWidget::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QWidget::paintEngine();

    extern QPaintEngine * sipVH_QtGui_27(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_27(sipGILState,meth);
}

bool sipQPrintPreviewWidget::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QWidget::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::mousePressEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_mousePressEvent);

    if (!meth)
    {
        QWidget::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::mouseReleaseEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!meth)
    {
        QWidget::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::mouseDoubleClickEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!meth)
    {
        QWidget::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::mouseMoveEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!meth)
    {
        QWidget::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::wheelEvent(QWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_wheelEvent);

    if (!meth)
    {
        QWidget::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t,PyObject *,QWheelEvent *);

    sipVH_QtGui_5(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_keyPressEvent);

    if (!meth)
    {
        QWidget::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!meth)
    {
        QWidget::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_focusInEvent);

    if (!meth)
    {
        QWidget::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_focusOutEvent);

    if (!meth)
    {
        QWidget::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::enterEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_enterEvent);

    if (!meth)
    {
        QWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::leaveEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_leaveEvent);

    if (!meth)
    {
        QWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::paintEvent(QPaintEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_paintEvent);

    if (!meth)
    {
        QWidget::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t,PyObject *,QPaintEvent *);

    sipVH_QtGui_3(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::moveEvent(QMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_moveEvent);

    if (!meth)
    {
        QWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t,PyObject *,QMoveEvent *);

    sipVH_QtGui_23(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::resizeEvent(QResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_resizeEvent);

    if (!meth)
    {
        QWidget::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t,PyObject *,QResizeEvent *);

    sipVH_QtGui_2(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_closeEvent);

    if (!meth)
    {
        QWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t,PyObject *,QCloseEvent *);

    sipVH_QtGui_22(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::contextMenuEvent(QContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!meth)
    {
        QWidget::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t,PyObject *,QContextMenuEvent *);

    sipVH_QtGui_21(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::tabletEvent(QTabletEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_tabletEvent);

    if (!meth)
    {
        QWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t,PyObject *,QTabletEvent *);

    sipVH_QtGui_20(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::actionEvent(QActionEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_actionEvent);

    if (!meth)
    {
        QWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t,PyObject *,QActionEvent *);

    sipVH_QtGui_19(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::dragEnterEvent(QDragEnterEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!meth)
    {
        QWidget::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t,PyObject *,QDragEnterEvent *);

    sipVH_QtGui_18(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::dragMoveEvent(QDragMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!meth)
    {
        QWidget::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t,PyObject *,QDragMoveEvent *);

    sipVH_QtGui_17(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::dragLeaveEvent(QDragLeaveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!meth)
    {
        QWidget::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t,PyObject *,QDragLeaveEvent *);

    sipVH_QtGui_16(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::dropEvent(QDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_dropEvent);

    if (!meth)
    {
        QWidget::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t,PyObject *,QDropEvent *);

    sipVH_QtGui_15(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_showEvent);

    if (!meth)
    {
        QWidget::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t,PyObject *,QShowEvent *);

    sipVH_QtGui_1(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_hideEvent);

    if (!meth)
    {
        QWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t,PyObject *,QHideEvent *);

    sipVH_QtGui_0(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_changeEvent);

    if (!meth)
    {
        QWidget::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

int sipQPrintPreviewWidget::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QWidget::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t,PyObject *,QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!meth)
    {
        QWidget::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t,PyObject *,QInputMethodEvent *);

    sipVH_QtGui_13(sipGILState,meth,a0);
}

QVariant sipQPrintPreviewWidget::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!meth)
        return QWidget::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t,PyObject *,Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState,meth,a0);
}

bool sipQPrintPreviewWidget::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!meth)
        return QWidget::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_11(sip_gilstate_t,PyObject *,bool);

    return sipVH_QtGui_11(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_enabledChange);

    if (!meth)
    {
        QWidget::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_paletteChange);

    if (!meth)
    {
        QWidget::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t,PyObject *,const QPalette&);

    sipVH_QtGui_10(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_fontChange);

    if (!meth)
    {
        QWidget::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t,PyObject *,const QFont&);

    sipVH_QtGui_9(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_windowActivationChange);

    if (!meth)
    {
        QWidget::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_languageChange);

    if (!meth)
    {
        QWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

bool sipQPrintPreviewWidget::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQPrintPreviewWidget::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQPrintPreviewWidget::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_zoomFactor, "QPrintPreviewWidget.zoomFactor() -> float");

extern "C" {static PyObject *meth_QPrintPreviewWidget_zoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_zoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrintPreviewWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->zoomFactor();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_zoomFactor, doc_QPrintPreviewWidget_zoomFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_orientation, "QPrintPreviewWidget.orientation() -> QPrinter.Orientation");

extern "C" {static PyObject *meth_QPrintPreviewWidget_orientation(PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_orientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrintPreviewWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp))
        {
            QPrinter::Orientation sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->orientation();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPrinter_Orientation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_orientation, doc_QPrintPreviewWidget_orientation);

    return NULL;
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_viewMode, "QPrintPreviewWidget.viewMode() -> QPrintPreviewWidget.ViewMode");

extern "C" {static PyObject *meth_QPrintPreviewWidget_viewMode(PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_viewMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrintPreviewWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp))
        {
            QPrintPreviewWidget::ViewMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->viewMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPrintPreviewWidget_ViewMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_viewMode, doc_QPrintPreviewWidget_viewMode);

    return NULL;
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_zoomMode, "QPrintPreviewWidget.zoomMode() -> QPrintPreviewWidget.ZoomMode");

extern "C" {static PyObject *meth_QPrintPreviewWidget_zoomMode(PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_zoomMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrintPreviewWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp))
        {
            QPrintPreviewWidget::ZoomMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->zoomMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPrintPreviewWidget_ZoomMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_zoomMode, doc_QPrintPreviewWidget_zoomMode);

    return NULL;
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_currentPage, "QPrintPreviewWidget.currentPage() -> int");

extern "C" {static PyObject *meth_QPrintPreviewWidget_currentPage(PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_currentPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrintPreviewWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentPage();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_currentPage, doc_QPrintPreviewWidget_currentPage);

    return NULL;
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_numPages, "QPrintPreviewWidget.numPages() -> int");

extern "C" {static PyObject *meth_QPrintPreviewWidget_numPages(PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_numPages(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrintPreviewWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->numPages();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_numPages, doc_QPrintPreviewWidget_numPages);

    return NULL;
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_setVisible, "QPrintPreviewWidget.setVisible(bool)");

extern "C" {static PyObject *meth_QPrintPreviewWidget_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QPrintPreviewWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QPrintPreviewWidget::setVisible(a0) : sipCpp->setVisible(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_setVisible, doc_QPrintPreviewWidget_setVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_print_, "QPrintPreviewWidget.print_()");

extern "C" {static PyObject *meth_QPrintPreviewWidget_print_(PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_print_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrintPreviewWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->print();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_print_, doc_QPrintPreviewWidget_print_);

    return NULL;
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_zoomIn, "QPrintPreviewWidget.zoomIn(float factor=1.1)");

extern "C" {static PyObject *meth_QPrintPreviewWidget_zoomIn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_zoomIn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0 = 1.1;
        QPrintPreviewWidget *sipCpp;

        static const char *sipKwdList[] = {
            sipName_factor,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|d", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->zoomIn(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_zoomIn, doc_QPrintPreviewWidget_zoomIn);

    return NULL;
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_zoomOut, "QPrintPreviewWidget.zoomOut(float factor=1.1)");

extern "C" {static PyObject *meth_QPrintPreviewWidget_zoomOut(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_zoomOut(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0 = 1.1;
        QPrintPreviewWidget *sipCpp;

        static const char *sipKwdList[] = {
            sipName_factor,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|d", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->zoomOut(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_zoomOut, doc_QPrintPreviewWidget_zoomOut);

    return NULL;
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_setZoomFactor, "QPrintPreviewWidget.setZoomFactor(float)");

extern "C" {static PyObject *meth_QPrintPreviewWidget_setZoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_setZoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QPrintPreviewWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setZoomFactor(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_setZoomFactor, doc_QPrintPreviewWidget_setZoomFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_setOrientation, "QPrintPreviewWidget.setOrientation(QPrinter.Orientation)");

extern "C" {static PyObject *meth_QPrintPreviewWidget_setOrientation(PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_setOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::Orientation a0;
        QPrintPreviewWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp, sipType_QPrinter_Orientation, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOrientation(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_setOrientation, doc_QPrintPreviewWidget_setOrientation);

    return NULL;
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_setViewMode, "QPrintPreviewWidget.setViewMode(QPrintPreviewWidget.ViewMode)");

extern "C" {static PyObject *meth_QPrintPreviewWidget_setViewMode(PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_setViewMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrintPreviewWidget::ViewMode a0;
        QPrintPreviewWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp, sipType_QPrintPreviewWidget_ViewMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setViewMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_setViewMode, doc_QPrintPreviewWidget_setViewMode);

    return NULL;
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_setZoomMode, "QPrintPreviewWidget.setZoomMode(QPrintPreviewWidget.ZoomMode)");

extern "C" {static PyObject *meth_QPrintPreviewWidget_setZoomMode(PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_setZoomMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrintPreviewWidget::ZoomMode a0;
        QPrintPreviewWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp, sipType_QPrintPreviewWidget_ZoomMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setZoomMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_setZoomMode, doc_QPrintPreviewWidget_setZoomMode);

    return NULL;
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_setCurrentPage, "QPrintPreviewWidget.setCurrentPage(int)");

extern "C" {static PyObject *meth_QPrintPreviewWidget_setCurrentPage(PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_setCurrentPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QPrintPreviewWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentPage(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_setCurrentPage, doc_QPrintPreviewWidget_setCurrentPage);

    return NULL;
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_fitToWidth, "QPrintPreviewWidget.fitToWidth()");

extern "C" {static PyObject *meth_QPrintPreviewWidget_fitToWidth(PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_fitToWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrintPreviewWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fitToWidth();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_fitToWidth, doc_QPrintPreviewWidget_fitToWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_fitInView, "QPrintPreviewWidget.fitInView()");

extern "C" {static PyObject *meth_QPrintPreviewWidget_fitInView(PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_fitInView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrintPreviewWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fitInView();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_fitInView, doc_QPrintPreviewWidget_fitInView);

    return NULL;
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_setLandscapeOrientation, "QPrintPreviewWidget.setLandscapeOrientation()");

extern "C" {static PyObject *meth_QPrintPreviewWidget_setLandscapeOrientation(PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_setLandscapeOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrintPreviewWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLandscapeOrientation();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_setLandscapeOrientation, doc_QPrintPreviewWidget_setLandscapeOrientation);

    return NULL;
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_setPortraitOrientation, "QPrintPreviewWidget.setPortraitOrientation()");

extern "C" {static PyObject *meth_QPrintPreviewWidget_setPortraitOrientation(PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_setPortraitOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrintPreviewWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPortraitOrientation();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_setPortraitOrientation, doc_QPrintPreviewWidget_setPortraitOrientation);

    return NULL;
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_setSinglePageViewMode, "QPrintPreviewWidget.setSinglePageViewMode()");

extern "C" {static PyObject *meth_QPrintPreviewWidget_setSinglePageViewMode(PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_setSinglePageViewMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrintPreviewWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSinglePageViewMode();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_setSinglePageViewMode, doc_QPrintPreviewWidget_setSinglePageViewMode);

    return NULL;
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_setFacingPagesViewMode, "QPrintPreviewWidget.setFacingPagesViewMode()");

extern "C" {static PyObject *meth_QPrintPreviewWidget_setFacingPagesViewMode(PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_setFacingPagesViewMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrintPreviewWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFacingPagesViewMode();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_setFacingPagesViewMode, doc_QPrintPreviewWidget_setFacingPagesViewMode);

    return NULL;
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_setAllPagesViewMode, "QPrintPreviewWidget.setAllPagesViewMode()");

extern "C" {static PyObject *meth_QPrintPreviewWidget_setAllPagesViewMode(PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_setAllPagesViewMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrintPreviewWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAllPagesViewMode();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_setAllPagesViewMode, doc_QPrintPreviewWidget_setAllPagesViewMode);

    return NULL;
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_updatePreview, "QPrintPreviewWidget.updatePreview()");

extern "C" {static PyObject *meth_QPrintPreviewWidget_updatePreview(PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_updatePreview(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrintPreviewWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->updatePreview();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_updatePreview, doc_QPrintPreviewWidget_updatePreview);

    return NULL;
}


PyDoc_STRVAR(doc_QPrintPreviewWidget_pageCount, "QPrintPreviewWidget.pageCount() -> int");

extern "C" {static PyObject *meth_QPrintPreviewWidget_pageCount(PyObject *, PyObject *);}
static PyObject *meth_QPrintPreviewWidget_pageCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrintPreviewWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrintPreviewWidget, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pageCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrintPreviewWidget, sipName_pageCount, doc_QPrintPreviewWidget_pageCount);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QPrintPreviewWidget(void *, const sipTypeDef *);}
static void *cast_QPrintPreviewWidget(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QPrintPreviewWidget)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QWidget)->ctd_cast((QWidget *)(QPrintPreviewWidget *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPrintPreviewWidget(void *, int);}
static void release_QPrintPreviewWidget(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPrintPreviewWidget *>(sipCppV);
    else
        delete reinterpret_cast<QPrintPreviewWidget *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QPrintPreviewWidget(sipSimpleWrapper *);}
static void dealloc_QPrintPreviewWidget(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQPrintPreviewWidget *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QPrintPreviewWidget(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QPrintPreviewWidget(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QPrintPreviewWidget(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQPrintPreviewWidget *sipCpp = 0;

    {
        QPrinter * a0;
        QWidget * a1 = 0;
        Qt::WindowFlags a2def = 0;
        Qt::WindowFlags * a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|JHJ1", sipType_QPrinter, &a0, sipType_QWidget, &a1, sipOwner, sipType_Qt_WindowFlags, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPrintPreviewWidget(a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(a2,sipType_Qt_WindowFlags,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QWidget * a0 = 0;
        Qt::WindowFlags a1def = 0;
        Qt::WindowFlags * a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JHJ1", sipType_QWidget, &a0, sipOwner, sipType_Qt_WindowFlags, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPrintPreviewWidget(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_Qt_WindowFlags,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPrintPreviewWidget[] = {{741, 255, 1}};


static PyMethodDef methods_QPrintPreviewWidget[] = {
    {SIP_MLNAME_CAST(sipName_currentPage), meth_QPrintPreviewWidget_currentPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_currentPage)},
    {SIP_MLNAME_CAST(sipName_fitInView), meth_QPrintPreviewWidget_fitInView, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_fitInView)},
    {SIP_MLNAME_CAST(sipName_fitToWidth), meth_QPrintPreviewWidget_fitToWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_fitToWidth)},
    {SIP_MLNAME_CAST(sipName_numPages), meth_QPrintPreviewWidget_numPages, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_numPages)},
    {SIP_MLNAME_CAST(sipName_orientation), meth_QPrintPreviewWidget_orientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_orientation)},
    {SIP_MLNAME_CAST(sipName_pageCount), meth_QPrintPreviewWidget_pageCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_pageCount)},
    {SIP_MLNAME_CAST(sipName_print_), meth_QPrintPreviewWidget_print_, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_print_)},
    {SIP_MLNAME_CAST(sipName_setAllPagesViewMode), meth_QPrintPreviewWidget_setAllPagesViewMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_setAllPagesViewMode)},
    {SIP_MLNAME_CAST(sipName_setCurrentPage), meth_QPrintPreviewWidget_setCurrentPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_setCurrentPage)},
    {SIP_MLNAME_CAST(sipName_setFacingPagesViewMode), meth_QPrintPreviewWidget_setFacingPagesViewMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_setFacingPagesViewMode)},
    {SIP_MLNAME_CAST(sipName_setLandscapeOrientation), meth_QPrintPreviewWidget_setLandscapeOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_setLandscapeOrientation)},
    {SIP_MLNAME_CAST(sipName_setOrientation), meth_QPrintPreviewWidget_setOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_setOrientation)},
    {SIP_MLNAME_CAST(sipName_setPortraitOrientation), meth_QPrintPreviewWidget_setPortraitOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_setPortraitOrientation)},
    {SIP_MLNAME_CAST(sipName_setSinglePageViewMode), meth_QPrintPreviewWidget_setSinglePageViewMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_setSinglePageViewMode)},
    {SIP_MLNAME_CAST(sipName_setViewMode), meth_QPrintPreviewWidget_setViewMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_setViewMode)},
    {SIP_MLNAME_CAST(sipName_setVisible), meth_QPrintPreviewWidget_setVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_setVisible)},
    {SIP_MLNAME_CAST(sipName_setZoomFactor), meth_QPrintPreviewWidget_setZoomFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_setZoomFactor)},
    {SIP_MLNAME_CAST(sipName_setZoomMode), meth_QPrintPreviewWidget_setZoomMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_setZoomMode)},
    {SIP_MLNAME_CAST(sipName_updatePreview), meth_QPrintPreviewWidget_updatePreview, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_updatePreview)},
    {SIP_MLNAME_CAST(sipName_viewMode), meth_QPrintPreviewWidget_viewMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_viewMode)},
    {SIP_MLNAME_CAST(sipName_zoomFactor), meth_QPrintPreviewWidget_zoomFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_zoomFactor)},
    {SIP_MLNAME_CAST(sipName_zoomIn), (PyCFunction)meth_QPrintPreviewWidget_zoomIn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_zoomIn)},
    {SIP_MLNAME_CAST(sipName_zoomMode), meth_QPrintPreviewWidget_zoomMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_zoomMode)},
    {SIP_MLNAME_CAST(sipName_zoomOut), (PyCFunction)meth_QPrintPreviewWidget_zoomOut, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPrintPreviewWidget_zoomOut)}
};

static sipEnumMemberDef enummembers_QPrintPreviewWidget[] = {
    {sipName_AllPagesView, QPrintPreviewWidget::AllPagesView, 400},
    {sipName_CustomZoom, QPrintPreviewWidget::CustomZoom, 401},
    {sipName_FacingPagesView, QPrintPreviewWidget::FacingPagesView, 400},
    {sipName_FitInView, QPrintPreviewWidget::FitInView, 401},
    {sipName_FitToWidth, QPrintPreviewWidget::FitToWidth, 401},
    {sipName_SinglePageView, QPrintPreviewWidget::SinglePageView, 400},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QPrintPreviewWidget[] = {
    {"previewChanged()", "\1QPrintPreviewWidget.previewChanged()", 0},
    {"paintRequested(QPrinter *)", "\1QPrintPreviewWidget.paintRequested(QPrinter)", 0},
    {0, 0, 0}
};

PyDoc_STRVAR(doc_QPrintPreviewWidget, "\1QPrintPreviewWidget(QPrinter, QWidget parent=None, Qt.WindowFlags flags=0)\n"
    "QPrintPreviewWidget(QWidget parent=None, Qt.WindowFlags flags=0)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QPrintPreviewWidget = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QPrintPreviewWidget,
        {0}
    },
    {
        sipNameNr_QPrintPreviewWidget,
        {0, 0, 1},
        24, methods_QPrintPreviewWidget,
        6, enummembers_QPrintPreviewWidget,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPrintPreviewWidget,
    -1,
    -1,
    supers_QPrintPreviewWidget,
    0,
    init_QPrintPreviewWidget,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPrintPreviewWidget,
    0,
    0,
    0,
    release_QPrintPreviewWidget,
    cast_QPrintPreviewWidget,
    0,
    0,
    0
},
    &QPrintPreviewWidget::staticMetaObject,
    0,
    pyqt4_signals_QPrintPreviewWidget
};

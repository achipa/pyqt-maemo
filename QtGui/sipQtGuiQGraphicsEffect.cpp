/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:03 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 45 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 39 "sipQtGuiQGraphicsEffect.cpp"

#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtGuiQGraphicsEffect.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 46 "sipQtGuiQGraphicsEffect.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 49 "sipQtGuiQGraphicsEffect.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 52 "sipQtGuiQGraphicsEffect.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 55 "sipQtGuiQGraphicsEffect.cpp"
#line 160 "/home/maemo/python-qt4-4.7/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 58 "sipQtGuiQGraphicsEffect.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 61 "sipQtGuiQGraphicsEffect.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 64 "sipQtGuiQGraphicsEffect.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 67 "sipQtGuiQGraphicsEffect.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70 "sipQtGuiQGraphicsEffect.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 73 "sipQtGuiQGraphicsEffect.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 76 "sipQtGuiQGraphicsEffect.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 79 "sipQtGuiQGraphicsEffect.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 82 "sipQtGuiQGraphicsEffect.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 85 "sipQtGuiQGraphicsEffect.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 88 "sipQtGuiQGraphicsEffect.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 91 "sipQtGuiQGraphicsEffect.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 94 "sipQtGuiQGraphicsEffect.cpp"


class sipQGraphicsEffect : public QGraphicsEffect
{
public:
    sipQGraphicsEffect(QObject *);
    virtual ~sipQGraphicsEffect();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QRectF boundingRectFor(const QRectF&) const;
    void draw(QPainter *);
    void sourceChanged(QGraphicsEffect::ChangeFlags);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGraphicsEffect(const sipQGraphicsEffect &);
    sipQGraphicsEffect &operator = (const sipQGraphicsEffect &);

    char sipPyMethods[10];
};

sipQGraphicsEffect::sipQGraphicsEffect(QObject *a0): QGraphicsEffect(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGraphicsEffect::~sipQGraphicsEffect()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQGraphicsEffect::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QGraphicsEffect);
}

int sipQGraphicsEffect::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QGraphicsEffect::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QGraphicsEffect,_c,_id,_a);

    return _id;
}

void *sipQGraphicsEffect::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QGraphicsEffect,_clname)) ? this : QGraphicsEffect::qt_metacast(_clname);
}

QRectF sipQGraphicsEffect::boundingRectFor(const QRectF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_boundingRectFor);

    if (!meth)
        return QGraphicsEffect::boundingRectFor(a0);

    extern QRectF sipVH_QtGui_211(sip_gilstate_t,PyObject *,const QRectF&);

    return sipVH_QtGui_211(sipGILState,meth,a0);
}

void sipQGraphicsEffect::draw(QPainter *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_QGraphicsEffect,sipName_draw);

    if (!meth)
        return;

    extern void sipVH_QtGui_108(sip_gilstate_t,PyObject *,QPainter *);

    sipVH_QtGui_108(sipGILState,meth,a0);
}

void sipQGraphicsEffect::sourceChanged(QGraphicsEffect::ChangeFlags a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_sourceChanged);

    if (!meth)
    {
        QGraphicsEffect::sourceChanged(a0);
        return;
    }

    extern void sipVH_QtGui_212(sip_gilstate_t,PyObject *,QGraphicsEffect::ChangeFlags);

    sipVH_QtGui_212(sipGILState,meth,a0);
}

bool sipQGraphicsEffect::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQGraphicsEffect::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQGraphicsEffect::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQGraphicsEffect::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQGraphicsEffect::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQGraphicsEffect::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQGraphicsEffect::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QGraphicsEffect_boundingRectFor, "QGraphicsEffect.boundingRectFor(QRectF) -> QRectF");

extern "C" {static PyObject *meth_QGraphicsEffect_boundingRectFor(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsEffect_boundingRectFor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRectF * a0;
        QGraphicsEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsEffect, &sipCpp, sipType_QRectF, &a0))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF((sipSelfWasArg ? sipCpp->QGraphicsEffect::boundingRectFor(*a0) : sipCpp->boundingRectFor(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsEffect, sipName_boundingRectFor, doc_QGraphicsEffect_boundingRectFor);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsEffect_boundingRect, "QGraphicsEffect.boundingRect() -> QRectF");

extern "C" {static PyObject *meth_QGraphicsEffect_boundingRect(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsEffect_boundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsEffect, &sipCpp))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->boundingRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsEffect, sipName_boundingRect, doc_QGraphicsEffect_boundingRect);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsEffect_isEnabled, "QGraphicsEffect.isEnabled() -> bool");

extern "C" {static PyObject *meth_QGraphicsEffect_isEnabled(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsEffect_isEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsEffect, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsEffect, sipName_isEnabled, doc_QGraphicsEffect_isEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsEffect_setEnabled, "QGraphicsEffect.setEnabled(bool)");

extern "C" {static PyObject *meth_QGraphicsEffect_setEnabled(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsEffect_setEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QGraphicsEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGraphicsEffect, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsEffect, sipName_setEnabled, doc_QGraphicsEffect_setEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsEffect_update, "QGraphicsEffect.update()");

extern "C" {static PyObject *meth_QGraphicsEffect_update(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsEffect_update(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsEffect, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->update();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsEffect, sipName_update, doc_QGraphicsEffect_update);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsEffect_draw, "QGraphicsEffect.draw(QPainter)");

extern "C" {static PyObject *meth_QGraphicsEffect_draw(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsEffect_draw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QPainter * a0;
        QGraphicsEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsEffect, &sipCpp, sipType_QPainter, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGraphicsEffect, sipName_draw);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->draw(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsEffect, sipName_draw, doc_QGraphicsEffect_draw);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsEffect_sourceChanged, "QGraphicsEffect.sourceChanged(QGraphicsEffect.ChangeFlags)");

extern "C" {static PyObject *meth_QGraphicsEffect_sourceChanged(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsEffect_sourceChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsEffect::ChangeFlags * a0;
        int a0State = 0;
        QGraphicsEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QGraphicsEffect, &sipCpp, sipType_QGraphicsEffect_ChangeFlags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsEffect::sourceChanged(*a0) : sipCpp->sourceChanged(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QGraphicsEffect_ChangeFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsEffect, sipName_sourceChanged, doc_QGraphicsEffect_sourceChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsEffect_updateBoundingRect, "QGraphicsEffect.updateBoundingRect()");

extern "C" {static PyObject *meth_QGraphicsEffect_updateBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsEffect_updateBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QGraphicsEffect, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->updateBoundingRect();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsEffect, sipName_updateBoundingRect, doc_QGraphicsEffect_updateBoundingRect);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsEffect_sourceIsPixmap, "QGraphicsEffect.sourceIsPixmap() -> bool");

extern "C" {static PyObject *meth_QGraphicsEffect_sourceIsPixmap(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsEffect_sourceIsPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QGraphicsEffect, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sourceIsPixmap();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsEffect, sipName_sourceIsPixmap, doc_QGraphicsEffect_sourceIsPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsEffect_sourceBoundingRect, "QGraphicsEffect.sourceBoundingRect(Qt.CoordinateSystem system=Qt.LogicalCoordinates) -> QRectF");

extern "C" {static PyObject *meth_QGraphicsEffect_sourceBoundingRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsEffect_sourceBoundingRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::CoordinateSystem a0 = Qt::LogicalCoordinates;
        QGraphicsEffect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_system,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "p|E", &sipSelf, sipType_QGraphicsEffect, &sipCpp, sipType_Qt_CoordinateSystem, &a0))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->sourceBoundingRect(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsEffect, sipName_sourceBoundingRect, doc_QGraphicsEffect_sourceBoundingRect);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsEffect_drawSource, "QGraphicsEffect.drawSource(QPainter)");

extern "C" {static PyObject *meth_QGraphicsEffect_drawSource(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsEffect_drawSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter * a0;
        QGraphicsEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsEffect, &sipCpp, sipType_QPainter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawSource(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsEffect, sipName_drawSource, doc_QGraphicsEffect_drawSource);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsEffect_sourcePixmap, "QGraphicsEffect.sourcePixmap(Qt.CoordinateSystem system=Qt.LogicalCoordinates, QGraphicsEffect.PixmapPadMode mode=QGraphicsEffect.PadToEffectiveBoundingRect) -> (QPixmap, QPoint)");

extern "C" {static PyObject *meth_QGraphicsEffect_sourcePixmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsEffect_sourcePixmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::CoordinateSystem a0 = Qt::LogicalCoordinates;
        QPoint * a1;
        QGraphicsEffect::PixmapPadMode a2 = QGraphicsEffect::PadToEffectiveBoundingRect;
        QGraphicsEffect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_system,
            sipName_offset,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "p|EE", &sipSelf, sipType_QGraphicsEffect, &sipCpp, sipType_Qt_CoordinateSystem, &a0, sipType_QGraphicsEffect_PixmapPadMode, &a2))
        {
            QPixmap *sipRes;
            a1 = new QPoint();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->sourcePixmap(a0,a1,a2));
            Py_END_ALLOW_THREADS

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
            return sipBuildResult(0,"(RN)",sipResObj,a1,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsEffect, sipName_sourcePixmap, doc_QGraphicsEffect_sourcePixmap);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGraphicsEffect(void *, const sipTypeDef *);}
static void *cast_QGraphicsEffect(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QGraphicsEffect)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QGraphicsEffect *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGraphicsEffect(void *, int);}
static void release_QGraphicsEffect(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQGraphicsEffect *>(sipCppV);
    else
        delete reinterpret_cast<QGraphicsEffect *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QGraphicsEffect(sipSimpleWrapper *);}
static void dealloc_QGraphicsEffect(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGraphicsEffect *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGraphicsEffect(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QGraphicsEffect(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QGraphicsEffect(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGraphicsEffect *sipCpp = 0;

    {
        QObject * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGraphicsEffect(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGraphicsEffect[] = {{129, 0, 1}};


static PyMethodDef methods_QGraphicsEffect[] = {
    {SIP_MLNAME_CAST(sipName_boundingRect), meth_QGraphicsEffect_boundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsEffect_boundingRect)},
    {SIP_MLNAME_CAST(sipName_boundingRectFor), meth_QGraphicsEffect_boundingRectFor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsEffect_boundingRectFor)},
    {SIP_MLNAME_CAST(sipName_draw), meth_QGraphicsEffect_draw, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsEffect_draw)},
    {SIP_MLNAME_CAST(sipName_drawSource), meth_QGraphicsEffect_drawSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsEffect_drawSource)},
    {SIP_MLNAME_CAST(sipName_isEnabled), meth_QGraphicsEffect_isEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsEffect_isEnabled)},
    {SIP_MLNAME_CAST(sipName_setEnabled), meth_QGraphicsEffect_setEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsEffect_setEnabled)},
    {SIP_MLNAME_CAST(sipName_sourceBoundingRect), (PyCFunction)meth_QGraphicsEffect_sourceBoundingRect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsEffect_sourceBoundingRect)},
    {SIP_MLNAME_CAST(sipName_sourceChanged), meth_QGraphicsEffect_sourceChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsEffect_sourceChanged)},
    {SIP_MLNAME_CAST(sipName_sourceIsPixmap), meth_QGraphicsEffect_sourceIsPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsEffect_sourceIsPixmap)},
    {SIP_MLNAME_CAST(sipName_sourcePixmap), (PyCFunction)meth_QGraphicsEffect_sourcePixmap, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsEffect_sourcePixmap)},
    {SIP_MLNAME_CAST(sipName_update), meth_QGraphicsEffect_update, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsEffect_update)},
    {SIP_MLNAME_CAST(sipName_updateBoundingRect), meth_QGraphicsEffect_updateBoundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsEffect_updateBoundingRect)}
};

static sipEnumMemberDef enummembers_QGraphicsEffect[] = {
    {sipName_NoPad, QGraphicsEffect::NoPad, 165},
    {sipName_PadToEffectiveBoundingRect, QGraphicsEffect::PadToEffectiveBoundingRect, 165},
    {sipName_PadToTransparentBorder, QGraphicsEffect::PadToTransparentBorder, 165},
    {sipName_SourceAttached, QGraphicsEffect::SourceAttached, 163},
    {sipName_SourceBoundingRectChanged, QGraphicsEffect::SourceBoundingRectChanged, 163},
    {sipName_SourceDetached, QGraphicsEffect::SourceDetached, 163},
    {sipName_SourceInvalidated, QGraphicsEffect::SourceInvalidated, 163},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QGraphicsEffect[] = {
    {"enabledChanged(bool)", "\1QGraphicsEffect.enabledChanged(bool)", 0},
    {0, 0, 0}
};

PyDoc_STRVAR(doc_QGraphicsEffect, "\1QGraphicsEffect(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QGraphicsEffect = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QGraphicsEffect,
        {0}
    },
    {
        sipNameNr_QGraphicsEffect,
        {0, 0, 1},
        12, methods_QGraphicsEffect,
        7, enummembers_QGraphicsEffect,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGraphicsEffect,
    -1,
    -1,
    supers_QGraphicsEffect,
    0,
    init_QGraphicsEffect,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGraphicsEffect,
    0,
    0,
    0,
    release_QGraphicsEffect,
    cast_QGraphicsEffect,
    0,
    0,
    0
},
    &QGraphicsEffect::staticMetaObject,
    0,
    pyqt4_signals_QGraphicsEffect
};

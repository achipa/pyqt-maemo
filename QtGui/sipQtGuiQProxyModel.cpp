/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:03 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qproxymodel.sip"
#include <qproxymodel.h>
#line 39 "sipQtGuiQProxyModel.cpp"

#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtGuiQProxyModel.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 46 "sipQtGuiQProxyModel.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 49 "sipQtGuiQProxyModel.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 52 "sipQtGuiQProxyModel.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 55 "sipQtGuiQProxyModel.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 58 "sipQtGuiQProxyModel.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 61 "sipQtGuiQProxyModel.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 64 "sipQtGuiQProxyModel.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67 "sipQtGuiQProxyModel.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 70 "sipQtGuiQProxyModel.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 73 "sipQtGuiQProxyModel.cpp"
#line 128 "/home/maemo/python-qt4-4.7/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 76 "sipQtGuiQProxyModel.cpp"
#line 149 "/home/maemo/python-qt4-4.7/sip/QtCore/qhash.sip"
#include <qmap.h>
#line 79 "sipQtGuiQProxyModel.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 82 "sipQtGuiQProxyModel.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 85 "sipQtGuiQProxyModel.cpp"
#line 149 "/home/maemo/python-qt4-4.7/sip/QtCore/qmap.sip"
#include <qmap.h>
#line 88 "sipQtGuiQProxyModel.cpp"
#line 131 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 91 "sipQtGuiQProxyModel.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 94 "sipQtGuiQProxyModel.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 97 "sipQtGuiQProxyModel.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 100 "sipQtGuiQProxyModel.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 103 "sipQtGuiQProxyModel.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 106 "sipQtGuiQProxyModel.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 109 "sipQtGuiQProxyModel.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 112 "sipQtGuiQProxyModel.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 115 "sipQtGuiQProxyModel.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 118 "sipQtGuiQProxyModel.cpp"


class sipQProxyModel : public QProxyModel
{
public:
    sipQProxyModel(QObject *);
    virtual ~sipQProxyModel();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void setModel(QAbstractItemModel *);
    QModelIndex index(int,int,const QModelIndex&) const;
    QModelIndex parent(const QModelIndex&) const;
    int rowCount(const QModelIndex&) const;
    int columnCount(const QModelIndex&) const;
    bool hasChildren(const QModelIndex&) const;
    QVariant data(const QModelIndex&,int) const;
    bool setData(const QModelIndex&,const QVariant&,int);
    QVariant headerData(int,Qt::Orientation,int) const;
    bool setHeaderData(int,Qt::Orientation,const QVariant&,int);
    QStringList mimeTypes() const;
    QMimeData * mimeData(const QModelIndexList&) const;
    bool dropMimeData(const QMimeData *,Qt::DropAction,int,int,const QModelIndex&);
    Qt::DropActions supportedDropActions() const;
    bool insertRows(int,int,const QModelIndex&);
    bool insertColumns(int,int,const QModelIndex&);
    void fetchMore(const QModelIndex&);
    Qt::ItemFlags flags(const QModelIndex&) const;
    void sort(int,Qt::SortOrder);
    QModelIndexList match(const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags) const;
    QSize span(const QModelIndex&) const;
    bool submit();
    void revert();
    QMap<int,QVariant> itemData(const QModelIndex&) const;
    bool setItemData(const QModelIndex&,const QMap<int,QVariant>&);
    bool removeRows(int,int,const QModelIndex&);
    bool removeColumns(int,int,const QModelIndex&);
    bool canFetchMore(const QModelIndex&) const;
    QModelIndex buddy(const QModelIndex&) const;
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQProxyModel(const sipQProxyModel &);
    sipQProxyModel &operator = (const sipQProxyModel &);

    char sipPyMethods[36];
};

sipQProxyModel::sipQProxyModel(QObject *a0): QProxyModel(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQProxyModel::~sipQProxyModel()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQProxyModel::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QProxyModel);
}

int sipQProxyModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QProxyModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QProxyModel,_c,_id,_a);

    return _id;
}

void *sipQProxyModel::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QProxyModel,_clname)) ? this : QProxyModel::qt_metacast(_clname);
}

void sipQProxyModel::setModel(QAbstractItemModel *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_setModel);

    if (!meth)
    {
        QProxyModel::setModel(a0);
        return;
    }

    extern void sipVH_QtGui_36(sip_gilstate_t,PyObject *,QAbstractItemModel *);

    sipVH_QtGui_36(sipGILState,meth,a0);
}

QModelIndex sipQProxyModel::index(int a0,int a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_index);

    if (!meth)
        return QProxyModel::index(a0,a1,a2);

    typedef QModelIndex (*sipVH_QtCore_46)(sip_gilstate_t,PyObject *,int,int,const QModelIndex&);

    return ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState,meth,a0,a1,a2);
}

QModelIndex sipQProxyModel::parent(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_parent);

    if (!meth)
        return QProxyModel::parent(a0);

    typedef QModelIndex (*sipVH_QtCore_44)(sip_gilstate_t,PyObject *,const QModelIndex&);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtGui_QtCore->em_virthandlers[44]))(sipGILState,meth,a0);
}

int sipQProxyModel::rowCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_rowCount);

    if (!meth)
        return QProxyModel::rowCount(a0);

    typedef int (*sipVH_QtCore_43)(sip_gilstate_t,PyObject *,const QModelIndex&);

    return ((sipVH_QtCore_43)(sipModuleAPI_QtGui_QtCore->em_virthandlers[43]))(sipGILState,meth,a0);
}

int sipQProxyModel::columnCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_columnCount);

    if (!meth)
        return QProxyModel::columnCount(a0);

    typedef int (*sipVH_QtCore_43)(sip_gilstate_t,PyObject *,const QModelIndex&);

    return ((sipVH_QtCore_43)(sipModuleAPI_QtGui_QtCore->em_virthandlers[43]))(sipGILState,meth,a0);
}

bool sipQProxyModel::hasChildren(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_hasChildren);

    if (!meth)
        return QProxyModel::hasChildren(a0);

    typedef bool (*sipVH_QtCore_42)(sip_gilstate_t,PyObject *,const QModelIndex&);

    return ((sipVH_QtCore_42)(sipModuleAPI_QtGui_QtCore->em_virthandlers[42]))(sipGILState,meth,a0);
}

QVariant sipQProxyModel::data(const QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_data);

    if (!meth)
        return QProxyModel::data(a0,a1);

    typedef QVariant (*sipVH_QtCore_60)(sip_gilstate_t,PyObject *,const QModelIndex&,int);

    return ((sipVH_QtCore_60)(sipModuleAPI_QtGui_QtCore->em_virthandlers[60]))(sipGILState,meth,a0,a1);
}

bool sipQProxyModel::setData(const QModelIndex& a0,const QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_setData);

    if (!meth)
        return QProxyModel::setData(a0,a1,a2);

    typedef bool (*sipVH_QtCore_59)(sip_gilstate_t,PyObject *,const QModelIndex&,const QVariant&,int);

    return ((sipVH_QtCore_59)(sipModuleAPI_QtGui_QtCore->em_virthandlers[59]))(sipGILState,meth,a0,a1,a2);
}

QVariant sipQProxyModel::headerData(int a0,Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_headerData);

    if (!meth)
        return QProxyModel::headerData(a0,a1,a2);

    typedef QVariant (*sipVH_QtCore_58)(sip_gilstate_t,PyObject *,int,Qt::Orientation,int);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtGui_QtCore->em_virthandlers[58]))(sipGILState,meth,a0,a1,a2);
}

bool sipQProxyModel::setHeaderData(int a0,Qt::Orientation a1,const QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_setHeaderData);

    if (!meth)
        return QProxyModel::setHeaderData(a0,a1,a2,a3);

    typedef bool (*sipVH_QtCore_57)(sip_gilstate_t,PyObject *,int,Qt::Orientation,const QVariant&,int);

    return ((sipVH_QtCore_57)(sipModuleAPI_QtGui_QtCore->em_virthandlers[57]))(sipGILState,meth,a0,a1,a2,a3);
}

QStringList sipQProxyModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_mimeTypes);

    if (!meth)
        return QProxyModel::mimeTypes();

    typedef QStringList (*sipVH_QtCore_27)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_27)(sipModuleAPI_QtGui_QtCore->em_virthandlers[27]))(sipGILState,meth);
}

QMimeData * sipQProxyModel::mimeData(const QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_mimeData);

    if (!meth)
        return QProxyModel::mimeData(a0);

    typedef QMimeData * (*sipVH_QtCore_54)(sip_gilstate_t,PyObject *,const QList<QModelIndex>&);

    return ((sipVH_QtCore_54)(sipModuleAPI_QtGui_QtCore->em_virthandlers[54]))(sipGILState,meth,a0);
}

bool sipQProxyModel::dropMimeData(const QMimeData *a0,Qt::DropAction a1,int a2,int a3,const QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_dropMimeData);

    if (!meth)
        return QProxyModel::dropMimeData(a0,a1,a2,a3,a4);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t,PyObject *,const QMimeData *,Qt::DropAction,int,int,const QModelIndex&);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtGui_QtCore->em_virthandlers[45]))(sipGILState,meth,a0,a1,a2,a3,a4);
}

Qt::DropActions sipQProxyModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!meth)
        return QProxyModel::supportedDropActions();

    typedef Qt::DropActions (*sipVH_QtCore_53)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_53)(sipModuleAPI_QtGui_QtCore->em_virthandlers[53]))(sipGILState,meth);
}

bool sipQProxyModel::insertRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_insertRows);

    if (!meth)
        return QProxyModel::insertRows(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t,PyObject *,int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_QtGui_QtCore->em_virthandlers[52]))(sipGILState,meth,a0,a1,a2);
}

bool sipQProxyModel::insertColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_insertColumns);

    if (!meth)
        return QProxyModel::insertColumns(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t,PyObject *,int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_QtGui_QtCore->em_virthandlers[52]))(sipGILState,meth,a0,a1,a2);
}

void sipQProxyModel::fetchMore(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_fetchMore);

    if (!meth)
    {
        QProxyModel::fetchMore(a0);
        return;
    }

    typedef void (*sipVH_QtCore_51)(sip_gilstate_t,PyObject *,const QModelIndex&);

    ((sipVH_QtCore_51)(sipModuleAPI_QtGui_QtCore->em_virthandlers[51]))(sipGILState,meth,a0);
}

Qt::ItemFlags sipQProxyModel::flags(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_flags);

    if (!meth)
        return QProxyModel::flags(a0);

    typedef Qt::ItemFlags (*sipVH_QtCore_50)(sip_gilstate_t,PyObject *,const QModelIndex&);

    return ((sipVH_QtCore_50)(sipModuleAPI_QtGui_QtCore->em_virthandlers[50]))(sipGILState,meth,a0);
}

void sipQProxyModel::sort(int a0,Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_sort);

    if (!meth)
    {
        QProxyModel::sort(a0,a1);
        return;
    }

    typedef void (*sipVH_QtCore_49)(sip_gilstate_t,PyObject *,int,Qt::SortOrder);

    ((sipVH_QtCore_49)(sipModuleAPI_QtGui_QtCore->em_virthandlers[49]))(sipGILState,meth,a0,a1);
}

QModelIndexList sipQProxyModel::match(const QModelIndex& a0,int a1,const QVariant& a2,int a3,Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_match);

    if (!meth)
        return QProxyModel::match(a0,a1,a2,a3,a4);

    typedef QList<QModelIndex> (*sipVH_QtCore_48)(sip_gilstate_t,PyObject *,const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags);

    return ((sipVH_QtCore_48)(sipModuleAPI_QtGui_QtCore->em_virthandlers[48]))(sipGILState,meth,a0,a1,a2,a3,a4);
}

QSize sipQProxyModel::span(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_span);

    if (!meth)
        return QProxyModel::span(a0);

    typedef QSize (*sipVH_QtCore_47)(sip_gilstate_t,PyObject *,const QModelIndex&);

    return ((sipVH_QtCore_47)(sipModuleAPI_QtGui_QtCore->em_virthandlers[47]))(sipGILState,meth,a0);
}

bool sipQProxyModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_submit);

    if (!meth)
        return QProxyModel::submit();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

void sipQProxyModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_revert);

    if (!meth)
    {
        QProxyModel::revert();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

QMap<int,QVariant> sipQProxyModel::itemData(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_itemData);

    if (!meth)
        return QAbstractItemModel::itemData(a0);

    typedef QMap<int,QVariant> (*sipVH_QtCore_56)(sip_gilstate_t,PyObject *,const QModelIndex&);

    return ((sipVH_QtCore_56)(sipModuleAPI_QtGui_QtCore->em_virthandlers[56]))(sipGILState,meth,a0);
}

bool sipQProxyModel::setItemData(const QModelIndex& a0,const QMap<int,QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_setItemData);

    if (!meth)
        return QAbstractItemModel::setItemData(a0,a1);

    typedef bool (*sipVH_QtCore_55)(sip_gilstate_t,PyObject *,const QModelIndex&,const QMap<int,QVariant>&);

    return ((sipVH_QtCore_55)(sipModuleAPI_QtGui_QtCore->em_virthandlers[55]))(sipGILState,meth,a0,a1);
}

bool sipQProxyModel::removeRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_removeRows);

    if (!meth)
        return QAbstractItemModel::removeRows(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t,PyObject *,int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_QtGui_QtCore->em_virthandlers[52]))(sipGILState,meth,a0,a1,a2);
}

bool sipQProxyModel::removeColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_removeColumns);

    if (!meth)
        return QAbstractItemModel::removeColumns(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t,PyObject *,int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_QtGui_QtCore->em_virthandlers[52]))(sipGILState,meth,a0,a1,a2);
}

bool sipQProxyModel::canFetchMore(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_canFetchMore);

    if (!meth)
        return QAbstractItemModel::canFetchMore(a0);

    typedef bool (*sipVH_QtCore_42)(sip_gilstate_t,PyObject *,const QModelIndex&);

    return ((sipVH_QtCore_42)(sipModuleAPI_QtGui_QtCore->em_virthandlers[42]))(sipGILState,meth,a0);
}

QModelIndex sipQProxyModel::buddy(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_buddy);

    if (!meth)
        return QAbstractItemModel::buddy(a0);

    typedef QModelIndex (*sipVH_QtCore_44)(sip_gilstate_t,PyObject *,const QModelIndex&);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtGui_QtCore->em_virthandlers[44]))(sipGILState,meth,a0);
}

bool sipQProxyModel::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQProxyModel::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQProxyModel::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQProxyModel::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQProxyModel::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQProxyModel::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQProxyModel::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QProxyModel_setModel, "QProxyModel.setModel(QAbstractItemModel)");

extern "C" {static PyObject *meth_QProxyModel_setModel(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemModel * a0;
        PyObject *a0Keep;
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QProxyModel, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QProxyModel::setModel(a0) : sipCpp->setModel(a0));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, 34, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_setModel, doc_QProxyModel_setModel);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_model, "QProxyModel.model() -> QAbstractItemModel");

extern "C" {static PyObject *meth_QProxyModel_model(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_model(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProxyModel, &sipCpp))
        {
            QAbstractItemModel *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->model();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractItemModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_model, doc_QProxyModel_model);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_index, "QProxyModel.index(int, int, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QProxyModel_index(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_index(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex * a2;
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QProxyModel::index(a0,a1,*a2) : sipCpp->index(a0,a1,*a2)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_index, doc_QProxyModel_index);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_parent, "QProxyModel.parent(QModelIndex) -> QModelIndex\n"
    "QProxyModel.parent() -> QObject");

extern "C" {static PyObject *meth_QProxyModel_parent(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QProxyModel::parent(*a0) : sipCpp->parent(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    {
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProxyModel, &sipCpp))
        {
            QObject *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->parent();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_parent, doc_QProxyModel_parent);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_rowCount, "QProxyModel.rowCount(QModelIndex) -> int");

extern "C" {static PyObject *meth_QProxyModel_rowCount(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_rowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QProxyModel::rowCount(*a0) : sipCpp->rowCount(*a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_rowCount, doc_QProxyModel_rowCount);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_columnCount, "QProxyModel.columnCount(QModelIndex) -> int");

extern "C" {static PyObject *meth_QProxyModel_columnCount(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_columnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QProxyModel::columnCount(*a0) : sipCpp->columnCount(*a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_columnCount, doc_QProxyModel_columnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_hasChildren, "QProxyModel.hasChildren(QModelIndex) -> bool");

extern "C" {static PyObject *meth_QProxyModel_hasChildren(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_hasChildren(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QProxyModel::hasChildren(*a0) : sipCpp->hasChildren(*a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_hasChildren, doc_QProxyModel_hasChildren);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_data, "QProxyModel.data(QModelIndex, int) -> QVariant");

extern "C" {static PyObject *meth_QProxyModel_data(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        int a1;
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9i", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QProxyModel::data(*a0,a1) : sipCpp->data(*a0,a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_data, doc_QProxyModel_data);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_setData, "QProxyModel.setData(QModelIndex, QVariant, int) -> bool");

extern "C" {static PyObject *meth_QProxyModel_setData(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        const QVariant * a1;
        int a1State = 0;
        int a2;
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1i", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QVariant,&a1, &a1State, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QProxyModel::setData(*a0,*a1,a2) : sipCpp->setData(*a0,*a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_setData, doc_QProxyModel_setData);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_headerData, "QProxyModel.headerData(int, Qt.Orientation, int) -> QVariant");

extern "C" {static PyObject *meth_QProxyModel_headerData(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_headerData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::Orientation a1;
        int a2;
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiEi", &sipSelf, sipType_QProxyModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, &a2))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QProxyModel::headerData(a0,a1,a2) : sipCpp->headerData(a0,a1,a2)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_headerData, doc_QProxyModel_headerData);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_setHeaderData, "QProxyModel.setHeaderData(int, Qt.Orientation, QVariant, int) -> bool");

extern "C" {static PyObject *meth_QProxyModel_setHeaderData(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_setHeaderData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::Orientation a1;
        const QVariant * a2;
        int a2State = 0;
        int a3;
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiEJ1i", &sipSelf, sipType_QProxyModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, sipType_QVariant,&a2, &a2State, &a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QProxyModel::setHeaderData(a0,a1,*a2,a3) : sipCpp->setHeaderData(a0,a1,*a2,a3));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a2),sipType_QVariant,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_setHeaderData, doc_QProxyModel_setHeaderData);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_mimeTypes, "QProxyModel.mimeTypes() -> QStringList");

extern "C" {static PyObject *meth_QProxyModel_mimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_mimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProxyModel, &sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList((sipSelfWasArg ? sipCpp->QProxyModel::mimeTypes() : sipCpp->mimeTypes()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_mimeTypes, doc_QProxyModel_mimeTypes);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_mimeData, "QProxyModel.mimeData(list-of-QModelIndex) -> QMimeData");

extern "C" {static PyObject *meth_QProxyModel_mimeData(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_mimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndexList * a0;
        int a0State = 0;
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State))
        {
            QMimeData *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QProxyModel::mimeData(*a0) : sipCpp->mimeData(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);

            return sipConvertFromType(sipRes,sipType_QMimeData,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_mimeData, doc_QProxyModel_mimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_dropMimeData, "QProxyModel.dropMimeData(QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QProxyModel_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMimeData * a0;
        Qt::DropAction a1;
        int a2;
        int a3;
        const QModelIndex * a4;
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EiiJ9", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QMimeData, &a0, sipType_Qt_DropAction, &a1, &a2, &a3, sipType_QModelIndex, &a4))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QProxyModel::dropMimeData(a0,a1,a2,a3,*a4) : sipCpp->dropMimeData(a0,a1,a2,a3,*a4));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_dropMimeData, doc_QProxyModel_dropMimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_supportedDropActions, "QProxyModel.supportedDropActions() -> Qt.DropActions");

extern "C" {static PyObject *meth_QProxyModel_supportedDropActions(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProxyModel, &sipCpp))
        {
            Qt::DropActions *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::DropActions((sipSelfWasArg ? sipCpp->QProxyModel::supportedDropActions() : sipCpp->supportedDropActions()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_supportedDropActions, doc_QProxyModel_supportedDropActions);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_insertRows, "QProxyModel.insertRows(int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QProxyModel_insertRows(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_insertRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex * a2;
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QProxyModel::insertRows(a0,a1,*a2) : sipCpp->insertRows(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_insertRows, doc_QProxyModel_insertRows);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_insertColumns, "QProxyModel.insertColumns(int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QProxyModel_insertColumns(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_insertColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex * a2;
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QProxyModel::insertColumns(a0,a1,*a2) : sipCpp->insertColumns(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_insertColumns, doc_QProxyModel_insertColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_fetchMore, "QProxyModel.fetchMore(QModelIndex)");

extern "C" {static PyObject *meth_QProxyModel_fetchMore(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_fetchMore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QProxyModel::fetchMore(*a0) : sipCpp->fetchMore(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_fetchMore, doc_QProxyModel_fetchMore);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_flags, "QProxyModel.flags(QModelIndex) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QProxyModel_flags(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            Qt::ItemFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::ItemFlags((sipSelfWasArg ? sipCpp->QProxyModel::flags(*a0) : sipCpp->flags(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_flags, doc_QProxyModel_flags);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_sort, "QProxyModel.sort(int, Qt.SortOrder)");

extern "C" {static PyObject *meth_QProxyModel_sort(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_sort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::SortOrder a1;
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QProxyModel, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QProxyModel::sort(a0,a1) : sipCpp->sort(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_sort, doc_QProxyModel_sort);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_match, "QProxyModel.match(QModelIndex, int, QVariant, int, Qt.MatchFlags) -> list-of-QModelIndex");

extern "C" {static PyObject *meth_QProxyModel_match(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_match(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        int a1;
        const QVariant * a2;
        int a2State = 0;
        int a3;
        Qt::MatchFlags * a4;
        int a4State = 0;
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9iJ1iJ1", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QModelIndex, &a0, &a1, sipType_QVariant,&a2, &a2State, &a3, sipType_Qt_MatchFlags, &a4, &a4State))
        {
            QModelIndexList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndexList((sipSelfWasArg ? sipCpp->QProxyModel::match(*a0,a1,*a2,a3,*a4) : sipCpp->match(*a0,a1,*a2,a3,*a4)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a2),sipType_QVariant,a2State);
            sipReleaseType(a4,sipType_Qt_MatchFlags,a4State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_match, doc_QProxyModel_match);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_span, "QProxyModel.span(QModelIndex) -> QSize");

extern "C" {static PyObject *meth_QProxyModel_span(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_span(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QProxyModel::span(*a0) : sipCpp->span(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_span, doc_QProxyModel_span);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_submit, "QProxyModel.submit() -> bool");

extern "C" {static PyObject *meth_QProxyModel_submit(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_submit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProxyModel, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QProxyModel::submit() : sipCpp->submit());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_submit, doc_QProxyModel_submit);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_revert, "QProxyModel.revert()");

extern "C" {static PyObject *meth_QProxyModel_revert(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_revert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProxyModel, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QProxyModel::revert() : sipCpp->revert());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_revert, doc_QProxyModel_revert);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QProxyModel(void *, const sipTypeDef *);}
static void *cast_QProxyModel(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QProxyModel)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractItemModel)->ctd_cast((QAbstractItemModel *)(QProxyModel *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QProxyModel(void *, int);}
static void release_QProxyModel(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQProxyModel *>(sipCppV);
    else
        delete reinterpret_cast<QProxyModel *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QProxyModel(sipSimpleWrapper *);}
static void dealloc_QProxyModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQProxyModel *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QProxyModel(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QProxyModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QProxyModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQProxyModel *sipCpp = 0;

    {
        QObject * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQProxyModel(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QProxyModel[] = {{13, 0, 1}};


static PyMethodDef methods_QProxyModel[] = {
    {SIP_MLNAME_CAST(sipName_columnCount), meth_QProxyModel_columnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_columnCount)},
    {SIP_MLNAME_CAST(sipName_data), meth_QProxyModel_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_data)},
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_QProxyModel_dropMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_dropMimeData)},
    {SIP_MLNAME_CAST(sipName_fetchMore), meth_QProxyModel_fetchMore, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_fetchMore)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QProxyModel_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_flags)},
    {SIP_MLNAME_CAST(sipName_hasChildren), meth_QProxyModel_hasChildren, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_hasChildren)},
    {SIP_MLNAME_CAST(sipName_headerData), meth_QProxyModel_headerData, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_headerData)},
    {SIP_MLNAME_CAST(sipName_index), meth_QProxyModel_index, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_index)},
    {SIP_MLNAME_CAST(sipName_insertColumns), meth_QProxyModel_insertColumns, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_insertColumns)},
    {SIP_MLNAME_CAST(sipName_insertRows), meth_QProxyModel_insertRows, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_insertRows)},
    {SIP_MLNAME_CAST(sipName_match), meth_QProxyModel_match, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_match)},
    {SIP_MLNAME_CAST(sipName_mimeData), meth_QProxyModel_mimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_mimeData)},
    {SIP_MLNAME_CAST(sipName_mimeTypes), meth_QProxyModel_mimeTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_mimeTypes)},
    {SIP_MLNAME_CAST(sipName_model), meth_QProxyModel_model, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_model)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QProxyModel_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_parent)},
    {SIP_MLNAME_CAST(sipName_revert), meth_QProxyModel_revert, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_revert)},
    {SIP_MLNAME_CAST(sipName_rowCount), meth_QProxyModel_rowCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_rowCount)},
    {SIP_MLNAME_CAST(sipName_setData), meth_QProxyModel_setData, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_setData)},
    {SIP_MLNAME_CAST(sipName_setHeaderData), meth_QProxyModel_setHeaderData, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_setHeaderData)},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QProxyModel_setModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_setModel)},
    {SIP_MLNAME_CAST(sipName_sort), meth_QProxyModel_sort, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_sort)},
    {SIP_MLNAME_CAST(sipName_span), meth_QProxyModel_span, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_span)},
    {SIP_MLNAME_CAST(sipName_submit), meth_QProxyModel_submit, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_submit)},
    {SIP_MLNAME_CAST(sipName_supportedDropActions), meth_QProxyModel_supportedDropActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_supportedDropActions)}
};

PyDoc_STRVAR(doc_QProxyModel, "\1QProxyModel(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QProxyModel = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QProxyModel,
        {0}
    },
    {
        sipNameNr_QProxyModel,
        {0, 0, 1},
        24, methods_QProxyModel,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QProxyModel,
    -1,
    -1,
    supers_QProxyModel,
    0,
    init_QProxyModel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QProxyModel,
    0,
    0,
    0,
    release_QProxyModel,
    cast_QProxyModel,
    0,
    0,
    0
},
    &QProxyModel::staticMetaObject,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:04 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qabstractbutton.sip"
#include <qabstractbutton.h>
#line 39 "sipQtGuiQAbstractButton.cpp"

#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 43 "sipQtGuiQAbstractButton.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 46 "sipQtGuiQAbstractButton.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 49 "sipQtGuiQAbstractButton.cpp"
#line 379 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 52 "sipQtGuiQAbstractButton.cpp"
#line 238 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 55 "sipQtGuiQAbstractButton.cpp"
#line 350 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 58 "sipQtGuiQAbstractButton.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 61 "sipQtGuiQAbstractButton.cpp"
#line 399 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 64 "sipQtGuiQAbstractButton.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 67 "sipQtGuiQAbstractButton.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qbuttongroup.sip"
#include <qbuttongroup.h>
#line 70 "sipQtGuiQAbstractButton.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 73 "sipQtGuiQAbstractButton.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 76 "sipQtGuiQAbstractButton.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 79 "sipQtGuiQAbstractButton.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 82 "sipQtGuiQAbstractButton.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 85 "sipQtGuiQAbstractButton.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 88 "sipQtGuiQAbstractButton.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 91 "sipQtGuiQAbstractButton.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 94 "sipQtGuiQAbstractButton.cpp"
#line 39 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 97 "sipQtGuiQAbstractButton.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 100 "sipQtGuiQAbstractButton.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 103 "sipQtGuiQAbstractButton.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 106 "sipQtGuiQAbstractButton.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 109 "sipQtGuiQAbstractButton.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 112 "sipQtGuiQAbstractButton.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 115 "sipQtGuiQAbstractButton.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 118 "sipQtGuiQAbstractButton.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 121 "sipQtGuiQAbstractButton.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 124 "sipQtGuiQAbstractButton.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 127 "sipQtGuiQAbstractButton.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 130 "sipQtGuiQAbstractButton.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 133 "sipQtGuiQAbstractButton.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 136 "sipQtGuiQAbstractButton.cpp"
#line 520 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 539 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "sipQtGuiQAbstractButton.cpp"
#line 478 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "sipQtGuiQAbstractButton.cpp"
#line 466 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "sipQtGuiQAbstractButton.cpp"
#line 565 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "sipQtGuiQAbstractButton.cpp"
#line 619 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "sipQtGuiQAbstractButton.cpp"
#line 590 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "sipQtGuiQAbstractButton.cpp"
#line 607 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "sipQtGuiQAbstractButton.cpp"
#line 675 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "sipQtGuiQAbstractButton.cpp"
#line 301 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "sipQtGuiQAbstractButton.cpp"
#line 490 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "sipQtGuiQAbstractButton.cpp"
#line 442 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "sipQtGuiQAbstractButton.cpp"
#line 428 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "sipQtGuiQAbstractButton.cpp"
#line 414 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "sipQtGuiQAbstractButton.cpp"
#line 279 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "sipQtGuiQAbstractButton.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 183 "sipQtGuiQAbstractButton.cpp"
#line 68 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 186 "sipQtGuiQAbstractButton.cpp"
#line 42 "/home/maemo/python-qt4-4.7/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 189 "sipQtGuiQAbstractButton.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 192 "sipQtGuiQAbstractButton.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 195 "sipQtGuiQAbstractButton.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 198 "sipQtGuiQAbstractButton.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 201 "sipQtGuiQAbstractButton.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 204 "sipQtGuiQAbstractButton.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 207 "sipQtGuiQAbstractButton.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 210 "sipQtGuiQAbstractButton.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 213 "sipQtGuiQAbstractButton.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 216 "sipQtGuiQAbstractButton.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 219 "sipQtGuiQAbstractButton.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 222 "sipQtGuiQAbstractButton.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 225 "sipQtGuiQAbstractButton.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 228 "sipQtGuiQAbstractButton.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 231 "sipQtGuiQAbstractButton.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 234 "sipQtGuiQAbstractButton.cpp"


class sipQAbstractButton : public QAbstractButton
{
public:
    sipQAbstractButton(QWidget *);
    virtual ~sipQAbstractButton();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void paintEvent(QPaintEvent *);
    bool hitButton(const QPoint&) const;
    void checkStateSet();
    void nextCheckState();
    bool event(QEvent *);
    void keyPressEvent(QKeyEvent *);
    void keyReleaseEvent(QKeyEvent *);
    void mousePressEvent(QMouseEvent *);
    void mouseReleaseEvent(QMouseEvent *);
    void mouseMoveEvent(QMouseEvent *);
    void focusInEvent(QFocusEvent *);
    void focusOutEvent(QFocusEvent *);
    void changeEvent(QEvent *);
    void timerEvent(QTimerEvent *);
    int devType() const;
    void setVisible(bool);
    QSize sizeHint() const;
    QSize minimumSizeHint() const;
    int heightForWidth(int) const;
    QPaintEngine * paintEngine() const;
    void mouseDoubleClickEvent(QMouseEvent *);
    void wheelEvent(QWheelEvent *);
    void enterEvent(QEvent *);
    void leaveEvent(QEvent *);
    void moveEvent(QMoveEvent *);
    void resizeEvent(QResizeEvent *);
    void closeEvent(QCloseEvent *);
    void contextMenuEvent(QContextMenuEvent *);
    void tabletEvent(QTabletEvent *);
    void actionEvent(QActionEvent *);
    void dragEnterEvent(QDragEnterEvent *);
    void dragMoveEvent(QDragMoveEvent *);
    void dragLeaveEvent(QDragLeaveEvent *);
    void dropEvent(QDropEvent *);
    void showEvent(QShowEvent *);
    void hideEvent(QHideEvent *);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void inputMethodEvent(QInputMethodEvent *);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    void enabledChange(bool);
    void paletteChange(const QPalette&);
    void fontChange(const QFont&);
    void windowActivationChange(bool);
    void languageChange();
    bool eventFilter(QObject *,QEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractButton(const sipQAbstractButton &);
    sipQAbstractButton &operator = (const sipQAbstractButton &);

    char sipPyMethods[50];
};

sipQAbstractButton::sipQAbstractButton(QWidget *a0): QAbstractButton(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractButton::~sipQAbstractButton()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQAbstractButton::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QAbstractButton);
}

int sipQAbstractButton::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QAbstractButton::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QAbstractButton,_c,_id,_a);

    return _id;
}

void *sipQAbstractButton::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QAbstractButton,_clname)) ? this : QAbstractButton::qt_metacast(_clname);
}

void sipQAbstractButton::paintEvent(QPaintEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QAbstractButton,sipName_paintEvent);

    if (!meth)
        return;

    extern void sipVH_QtGui_3(sip_gilstate_t,PyObject *,QPaintEvent *);

    sipVH_QtGui_3(sipGILState,meth,a0);
}

bool sipQAbstractButton::hitButton(const QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_hitButton);

    if (!meth)
        return QAbstractButton::hitButton(a0);

    extern bool sipVH_QtGui_57(sip_gilstate_t,PyObject *,const QPoint&);

    return sipVH_QtGui_57(sipGILState,meth,a0);
}

void sipQAbstractButton::checkStateSet()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_checkStateSet);

    if (!meth)
    {
        QAbstractButton::checkStateSet();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQAbstractButton::nextCheckState()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_nextCheckState);

    if (!meth)
    {
        QAbstractButton::nextCheckState();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

bool sipQAbstractButton::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QAbstractButton::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

void sipQAbstractButton::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_keyPressEvent);

    if (!meth)
    {
        QAbstractButton::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQAbstractButton::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!meth)
    {
        QAbstractButton::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQAbstractButton::mousePressEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_mousePressEvent);

    if (!meth)
    {
        QAbstractButton::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQAbstractButton::mouseReleaseEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!meth)
    {
        QAbstractButton::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQAbstractButton::mouseMoveEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!meth)
    {
        QAbstractButton::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQAbstractButton::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_focusInEvent);

    if (!meth)
    {
        QAbstractButton::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

void sipQAbstractButton::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_focusOutEvent);

    if (!meth)
    {
        QAbstractButton::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

void sipQAbstractButton::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_changeEvent);

    if (!meth)
    {
        QAbstractButton::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQAbstractButton::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QAbstractButton::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

int sipQAbstractButton::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

void sipQAbstractButton::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_setVisible);

    if (!meth)
    {
        QWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

QSize sipQAbstractButton::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QWidget::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_4(sipGILState,meth);
}

QSize sipQAbstractButton::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!meth)
        return QWidget::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_4(sipGILState,meth);
}

int sipQAbstractButton::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QWidget::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

QPaintEngine * sipQAbstractButton::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QWidget::paintEngine();

    extern QPaintEngine * sipVH_QtGui_27(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_27(sipGILState,meth);
}

void sipQAbstractButton::mouseDoubleClickEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!meth)
    {
        QWidget::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQAbstractButton::wheelEvent(QWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_wheelEvent);

    if (!meth)
    {
        QWidget::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t,PyObject *,QWheelEvent *);

    sipVH_QtGui_5(sipGILState,meth,a0);
}

void sipQAbstractButton::enterEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_enterEvent);

    if (!meth)
    {
        QWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQAbstractButton::leaveEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_leaveEvent);

    if (!meth)
    {
        QWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQAbstractButton::moveEvent(QMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_moveEvent);

    if (!meth)
    {
        QWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t,PyObject *,QMoveEvent *);

    sipVH_QtGui_23(sipGILState,meth,a0);
}

void sipQAbstractButton::resizeEvent(QResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_resizeEvent);

    if (!meth)
    {
        QWidget::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t,PyObject *,QResizeEvent *);

    sipVH_QtGui_2(sipGILState,meth,a0);
}

void sipQAbstractButton::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_closeEvent);

    if (!meth)
    {
        QWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t,PyObject *,QCloseEvent *);

    sipVH_QtGui_22(sipGILState,meth,a0);
}

void sipQAbstractButton::contextMenuEvent(QContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!meth)
    {
        QWidget::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t,PyObject *,QContextMenuEvent *);

    sipVH_QtGui_21(sipGILState,meth,a0);
}

void sipQAbstractButton::tabletEvent(QTabletEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_tabletEvent);

    if (!meth)
    {
        QWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t,PyObject *,QTabletEvent *);

    sipVH_QtGui_20(sipGILState,meth,a0);
}

void sipQAbstractButton::actionEvent(QActionEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_actionEvent);

    if (!meth)
    {
        QWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t,PyObject *,QActionEvent *);

    sipVH_QtGui_19(sipGILState,meth,a0);
}

void sipQAbstractButton::dragEnterEvent(QDragEnterEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!meth)
    {
        QWidget::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t,PyObject *,QDragEnterEvent *);

    sipVH_QtGui_18(sipGILState,meth,a0);
}

void sipQAbstractButton::dragMoveEvent(QDragMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!meth)
    {
        QWidget::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t,PyObject *,QDragMoveEvent *);

    sipVH_QtGui_17(sipGILState,meth,a0);
}

void sipQAbstractButton::dragLeaveEvent(QDragLeaveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!meth)
    {
        QWidget::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t,PyObject *,QDragLeaveEvent *);

    sipVH_QtGui_16(sipGILState,meth,a0);
}

void sipQAbstractButton::dropEvent(QDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_dropEvent);

    if (!meth)
    {
        QWidget::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t,PyObject *,QDropEvent *);

    sipVH_QtGui_15(sipGILState,meth,a0);
}

void sipQAbstractButton::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_showEvent);

    if (!meth)
    {
        QWidget::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t,PyObject *,QShowEvent *);

    sipVH_QtGui_1(sipGILState,meth,a0);
}

void sipQAbstractButton::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_hideEvent);

    if (!meth)
    {
        QWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t,PyObject *,QHideEvent *);

    sipVH_QtGui_0(sipGILState,meth,a0);
}

int sipQAbstractButton::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QWidget::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t,PyObject *,QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState,meth,a0);
}

void sipQAbstractButton::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!meth)
    {
        QWidget::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t,PyObject *,QInputMethodEvent *);

    sipVH_QtGui_13(sipGILState,meth,a0);
}

QVariant sipQAbstractButton::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!meth)
        return QWidget::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t,PyObject *,Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState,meth,a0);
}

bool sipQAbstractButton::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!meth)
        return QWidget::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_11(sip_gilstate_t,PyObject *,bool);

    return sipVH_QtGui_11(sipGILState,meth,a0);
}

void sipQAbstractButton::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_enabledChange);

    if (!meth)
    {
        QWidget::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQAbstractButton::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_paletteChange);

    if (!meth)
    {
        QWidget::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t,PyObject *,const QPalette&);

    sipVH_QtGui_10(sipGILState,meth,a0);
}

void sipQAbstractButton::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_fontChange);

    if (!meth)
    {
        QWidget::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t,PyObject *,const QFont&);

    sipVH_QtGui_9(sipGILState,meth,a0);
}

void sipQAbstractButton::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_windowActivationChange);

    if (!meth)
    {
        QWidget::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQAbstractButton::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_languageChange);

    if (!meth)
    {
        QWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

bool sipQAbstractButton::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQAbstractButton::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQAbstractButton::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQAbstractButton::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQAbstractButton::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QAbstractButton_setAutoRepeatDelay, "QAbstractButton.setAutoRepeatDelay(int)");

extern "C" {static PyObject *meth_QAbstractButton_setAutoRepeatDelay(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_setAutoRepeatDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractButton, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoRepeatDelay(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_setAutoRepeatDelay, doc_QAbstractButton_setAutoRepeatDelay);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_autoRepeatDelay, "QAbstractButton.autoRepeatDelay() -> int");

extern "C" {static PyObject *meth_QAbstractButton_autoRepeatDelay(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_autoRepeatDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoRepeatDelay();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_autoRepeatDelay, doc_QAbstractButton_autoRepeatDelay);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_setAutoRepeatInterval, "QAbstractButton.setAutoRepeatInterval(int)");

extern "C" {static PyObject *meth_QAbstractButton_setAutoRepeatInterval(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_setAutoRepeatInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractButton, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoRepeatInterval(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_setAutoRepeatInterval, doc_QAbstractButton_setAutoRepeatInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_autoRepeatInterval, "QAbstractButton.autoRepeatInterval() -> int");

extern "C" {static PyObject *meth_QAbstractButton_autoRepeatInterval(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_autoRepeatInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoRepeatInterval();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_autoRepeatInterval, doc_QAbstractButton_autoRepeatInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_setText, "QAbstractButton.setText(QString)");

extern "C" {static PyObject *meth_QAbstractButton_setText(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setText(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_setText, doc_QAbstractButton_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_text, "QAbstractButton.text() -> QString");

extern "C" {static PyObject *meth_QAbstractButton_text(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->text());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_text, doc_QAbstractButton_text);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_setIcon, "QAbstractButton.setIcon(QIcon)");

extern "C" {static PyObject *meth_QAbstractButton_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QIcon * a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QIcon, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIcon(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_setIcon, doc_QAbstractButton_setIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_icon, "QAbstractButton.icon() -> QIcon");

extern "C" {static PyObject *meth_QAbstractButton_icon(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            QIcon *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QIcon(sipCpp->icon());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_icon, doc_QAbstractButton_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_iconSize, "QAbstractButton.iconSize() -> QSize");

extern "C" {static PyObject *meth_QAbstractButton_iconSize(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_iconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->iconSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_iconSize, doc_QAbstractButton_iconSize);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_setShortcut, "QAbstractButton.setShortcut(QKeySequence)");

extern "C" {static PyObject *meth_QAbstractButton_setShortcut(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_setShortcut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QKeySequence * a0;
        int a0State = 0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QKeySequence, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setShortcut(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QKeySequence *>(a0),sipType_QKeySequence,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_setShortcut, doc_QAbstractButton_setShortcut);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_shortcut, "QAbstractButton.shortcut() -> QKeySequence");

extern "C" {static PyObject *meth_QAbstractButton_shortcut(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_shortcut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            QKeySequence *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QKeySequence(sipCpp->shortcut());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QKeySequence,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_shortcut, doc_QAbstractButton_shortcut);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_setCheckable, "QAbstractButton.setCheckable(bool)");

extern "C" {static PyObject *meth_QAbstractButton_setCheckable(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_setCheckable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractButton, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCheckable(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_setCheckable, doc_QAbstractButton_setCheckable);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_isCheckable, "QAbstractButton.isCheckable() -> bool");

extern "C" {static PyObject *meth_QAbstractButton_isCheckable(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_isCheckable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isCheckable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_isCheckable, doc_QAbstractButton_isCheckable);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_isChecked, "QAbstractButton.isChecked() -> bool");

extern "C" {static PyObject *meth_QAbstractButton_isChecked(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_isChecked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isChecked();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_isChecked, doc_QAbstractButton_isChecked);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_setDown, "QAbstractButton.setDown(bool)");

extern "C" {static PyObject *meth_QAbstractButton_setDown(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_setDown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractButton, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDown(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_setDown, doc_QAbstractButton_setDown);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_isDown, "QAbstractButton.isDown() -> bool");

extern "C" {static PyObject *meth_QAbstractButton_isDown(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_isDown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDown();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_isDown, doc_QAbstractButton_isDown);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_setAutoRepeat, "QAbstractButton.setAutoRepeat(bool)");

extern "C" {static PyObject *meth_QAbstractButton_setAutoRepeat(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_setAutoRepeat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractButton, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoRepeat(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_setAutoRepeat, doc_QAbstractButton_setAutoRepeat);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_autoRepeat, "QAbstractButton.autoRepeat() -> bool");

extern "C" {static PyObject *meth_QAbstractButton_autoRepeat(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_autoRepeat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoRepeat();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_autoRepeat, doc_QAbstractButton_autoRepeat);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_setAutoExclusive, "QAbstractButton.setAutoExclusive(bool)");

extern "C" {static PyObject *meth_QAbstractButton_setAutoExclusive(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_setAutoExclusive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractButton, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoExclusive(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_setAutoExclusive, doc_QAbstractButton_setAutoExclusive);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_autoExclusive, "QAbstractButton.autoExclusive() -> bool");

extern "C" {static PyObject *meth_QAbstractButton_autoExclusive(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_autoExclusive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoExclusive();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_autoExclusive, doc_QAbstractButton_autoExclusive);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_group, "QAbstractButton.group() -> QButtonGroup");

extern "C" {static PyObject *meth_QAbstractButton_group(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_group(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            QButtonGroup *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->group();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QButtonGroup,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_group, doc_QAbstractButton_group);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_setIconSize, "QAbstractButton.setIconSize(QSize)");

extern "C" {static PyObject *meth_QAbstractButton_setIconSize(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_setIconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize * a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QSize, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIconSize(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_setIconSize, doc_QAbstractButton_setIconSize);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_animateClick, "QAbstractButton.animateClick(int msecs=100)");

extern "C" {static PyObject *meth_QAbstractButton_animateClick(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_animateClick(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 100;
        QAbstractButton *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QAbstractButton, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->animateClick(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_animateClick, doc_QAbstractButton_animateClick);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_click, "QAbstractButton.click()");

extern "C" {static PyObject *meth_QAbstractButton_click(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_click(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->click();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_click, doc_QAbstractButton_click);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_toggle, "QAbstractButton.toggle()");

extern "C" {static PyObject *meth_QAbstractButton_toggle(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_toggle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->toggle();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_toggle, doc_QAbstractButton_toggle);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_setChecked, "QAbstractButton.setChecked(bool)");

extern "C" {static PyObject *meth_QAbstractButton_setChecked(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_setChecked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractButton, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setChecked(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_setChecked, doc_QAbstractButton_setChecked);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_paintEvent, "QAbstractButton.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QAbstractButton_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QPaintEvent * a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QPaintEvent, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractButton, sipName_paintEvent);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->paintEvent(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_paintEvent, doc_QAbstractButton_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_hitButton, "QAbstractButton.hitButton(QPoint) -> bool");

extern "C" {static PyObject *meth_QAbstractButton_hitButton(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_hitButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPoint * a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QPoint, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractButton::hitButton(*a0) : sipCpp->hitButton(*a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_hitButton, doc_QAbstractButton_hitButton);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_checkStateSet, "QAbstractButton.checkStateSet()");

extern "C" {static PyObject *meth_QAbstractButton_checkStateSet(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_checkStateSet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractButton::checkStateSet() : sipCpp->checkStateSet());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_checkStateSet, doc_QAbstractButton_checkStateSet);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_nextCheckState, "QAbstractButton.nextCheckState()");

extern "C" {static PyObject *meth_QAbstractButton_nextCheckState(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_nextCheckState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractButton::nextCheckState() : sipCpp->nextCheckState());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_nextCheckState, doc_QAbstractButton_nextCheckState);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_event, "QAbstractButton.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QAbstractButton_event(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractButton::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_event, doc_QAbstractButton_event);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_keyPressEvent, "QAbstractButton.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QAbstractButton_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractButton::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_keyPressEvent, doc_QAbstractButton_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_keyReleaseEvent, "QAbstractButton.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QAbstractButton_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractButton::keyReleaseEvent(a0) : sipCpp->keyReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_keyReleaseEvent, doc_QAbstractButton_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_mousePressEvent, "QAbstractButton.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractButton_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractButton::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_mousePressEvent, doc_QAbstractButton_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_mouseReleaseEvent, "QAbstractButton.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractButton_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractButton::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_mouseReleaseEvent, doc_QAbstractButton_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_mouseMoveEvent, "QAbstractButton.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractButton_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractButton::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_mouseMoveEvent, doc_QAbstractButton_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_focusInEvent, "QAbstractButton.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QAbstractButton_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractButton::focusInEvent(a0) : sipCpp->focusInEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_focusInEvent, doc_QAbstractButton_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_focusOutEvent, "QAbstractButton.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QAbstractButton_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractButton::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_focusOutEvent, doc_QAbstractButton_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_changeEvent, "QAbstractButton.changeEvent(QEvent)");

extern "C" {static PyObject *meth_QAbstractButton_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractButton::changeEvent(a0) : sipCpp->changeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_changeEvent, doc_QAbstractButton_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_timerEvent, "QAbstractButton.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QAbstractButton_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractButton::timerEvent(a0) : sipCpp->timerEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_timerEvent, doc_QAbstractButton_timerEvent);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QAbstractButton(void *, const sipTypeDef *);}
static void *cast_QAbstractButton(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QAbstractButton)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QWidget)->ctd_cast((QWidget *)(QAbstractButton *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractButton(void *, int);}
static void release_QAbstractButton(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQAbstractButton *>(sipCppV);
    else
        delete reinterpret_cast<QAbstractButton *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QAbstractButton(sipSimpleWrapper *);}
static void dealloc_QAbstractButton(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAbstractButton *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAbstractButton(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QAbstractButton(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QAbstractButton(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractButton *sipCpp = 0;

    {
        QWidget * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQAbstractButton(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractButton[] = {{741, 255, 1}};


static PyMethodDef methods_QAbstractButton[] = {
    {SIP_MLNAME_CAST(sipName_animateClick), (PyCFunction)meth_QAbstractButton_animateClick, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractButton_animateClick)},
    {SIP_MLNAME_CAST(sipName_autoExclusive), meth_QAbstractButton_autoExclusive, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_autoExclusive)},
    {SIP_MLNAME_CAST(sipName_autoRepeat), meth_QAbstractButton_autoRepeat, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_autoRepeat)},
    {SIP_MLNAME_CAST(sipName_autoRepeatDelay), meth_QAbstractButton_autoRepeatDelay, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_autoRepeatDelay)},
    {SIP_MLNAME_CAST(sipName_autoRepeatInterval), meth_QAbstractButton_autoRepeatInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_autoRepeatInterval)},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QAbstractButton_changeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_changeEvent)},
    {SIP_MLNAME_CAST(sipName_checkStateSet), meth_QAbstractButton_checkStateSet, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_checkStateSet)},
    {SIP_MLNAME_CAST(sipName_click), meth_QAbstractButton_click, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_click)},
    {SIP_MLNAME_CAST(sipName_event), meth_QAbstractButton_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_event)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QAbstractButton_focusInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QAbstractButton_focusOutEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_group), meth_QAbstractButton_group, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_group)},
    {SIP_MLNAME_CAST(sipName_hitButton), meth_QAbstractButton_hitButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_hitButton)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QAbstractButton_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_icon)},
    {SIP_MLNAME_CAST(sipName_iconSize), meth_QAbstractButton_iconSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_iconSize)},
    {SIP_MLNAME_CAST(sipName_isCheckable), meth_QAbstractButton_isCheckable, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_isCheckable)},
    {SIP_MLNAME_CAST(sipName_isChecked), meth_QAbstractButton_isChecked, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_isChecked)},
    {SIP_MLNAME_CAST(sipName_isDown), meth_QAbstractButton_isDown, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_isDown)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QAbstractButton_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QAbstractButton_keyReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QAbstractButton_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QAbstractButton_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QAbstractButton_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_nextCheckState), meth_QAbstractButton_nextCheckState, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_nextCheckState)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QAbstractButton_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_paintEvent)},
    {SIP_MLNAME_CAST(sipName_setAutoExclusive), meth_QAbstractButton_setAutoExclusive, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_setAutoExclusive)},
    {SIP_MLNAME_CAST(sipName_setAutoRepeat), meth_QAbstractButton_setAutoRepeat, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_setAutoRepeat)},
    {SIP_MLNAME_CAST(sipName_setAutoRepeatDelay), meth_QAbstractButton_setAutoRepeatDelay, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_setAutoRepeatDelay)},
    {SIP_MLNAME_CAST(sipName_setAutoRepeatInterval), meth_QAbstractButton_setAutoRepeatInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_setAutoRepeatInterval)},
    {SIP_MLNAME_CAST(sipName_setCheckable), meth_QAbstractButton_setCheckable, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_setCheckable)},
    {SIP_MLNAME_CAST(sipName_setChecked), meth_QAbstractButton_setChecked, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_setChecked)},
    {SIP_MLNAME_CAST(sipName_setDown), meth_QAbstractButton_setDown, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_setDown)},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QAbstractButton_setIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_setIcon)},
    {SIP_MLNAME_CAST(sipName_setIconSize), meth_QAbstractButton_setIconSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_setIconSize)},
    {SIP_MLNAME_CAST(sipName_setShortcut), meth_QAbstractButton_setShortcut, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_setShortcut)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QAbstractButton_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_setText)},
    {SIP_MLNAME_CAST(sipName_shortcut), meth_QAbstractButton_shortcut, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_shortcut)},
    {SIP_MLNAME_CAST(sipName_text), meth_QAbstractButton_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_text)},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QAbstractButton_timerEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_timerEvent)},
    {SIP_MLNAME_CAST(sipName_toggle), meth_QAbstractButton_toggle, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_toggle)}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QAbstractButton[] = {
    {"toggled(bool)", "\1QAbstractButton.toggled(bool)", 0},
    {"clicked(bool)", "\1QAbstractButton.clicked(bool)", 0},
    {"clicked()", "\1QAbstractButton.clicked()", 0},
    {"released()", "\1QAbstractButton.released()", 0},
    {"pressed()", "\1QAbstractButton.pressed()", 0},
    {0, 0, 0}
};

PyDoc_STRVAR(doc_QAbstractButton, "\1QAbstractButton(QWidget parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QAbstractButton = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QAbstractButton,
        {0}
    },
    {
        sipNameNr_QAbstractButton,
        {0, 0, 1},
        40, methods_QAbstractButton,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractButton,
    -1,
    -1,
    supers_QAbstractButton,
    0,
    init_QAbstractButton,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractButton,
    0,
    0,
    0,
    release_QAbstractButton,
    cast_QAbstractButton,
    0,
    0,
    0
},
    &QAbstractButton::staticMetaObject,
    0,
    pyqt4_signals_QAbstractButton
};

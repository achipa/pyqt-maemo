/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:03 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qspinbox.sip"
#include <qspinbox.h>
#line 39 "sipQtGuiQSpinBox.cpp"

#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 43 "sipQtGuiQSpinBox.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "sipQtGuiQSpinBox.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 49 "sipQtGuiQSpinBox.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qvalidator.sip"
#include <qvalidator.h>
#line 52 "sipQtGuiQSpinBox.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 55 "sipQtGuiQSpinBox.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 58 "sipQtGuiQSpinBox.cpp"
#line 1283 "/home/maemo/python-qt4-4.7/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 61 "sipQtGuiQSpinBox.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qabstractspinbox.sip"
#include <qabstractspinbox.h>
#line 64 "sipQtGuiQSpinBox.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qabstractspinbox.sip"
#include <qabstractspinbox.h>
#line 67 "sipQtGuiQSpinBox.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qlineedit.sip"
#include <qlineedit.h>
#line 70 "sipQtGuiQSpinBox.cpp"
#line 466 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 73 "sipQtGuiQSpinBox.cpp"
#line 399 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 76 "sipQtGuiQSpinBox.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 79 "sipQtGuiQSpinBox.cpp"
#line 238 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 82 "sipQtGuiQSpinBox.cpp"
#line 478 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 85 "sipQtGuiQSpinBox.cpp"
#line 442 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 88 "sipQtGuiQSpinBox.cpp"
#line 490 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 91 "sipQtGuiQSpinBox.cpp"
#line 379 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 94 "sipQtGuiQSpinBox.cpp"
#line 279 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 97 "sipQtGuiQSpinBox.cpp"
#line 350 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 100 "sipQtGuiQSpinBox.cpp"
#line 428 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 103 "sipQtGuiQSpinBox.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 106 "sipQtGuiQSpinBox.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 109 "sipQtGuiQSpinBox.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 112 "sipQtGuiQSpinBox.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 115 "sipQtGuiQSpinBox.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 118 "sipQtGuiQSpinBox.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 121 "sipQtGuiQSpinBox.cpp"
#line 39 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 124 "sipQtGuiQSpinBox.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 127 "sipQtGuiQSpinBox.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 130 "sipQtGuiQSpinBox.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 133 "sipQtGuiQSpinBox.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 136 "sipQtGuiQSpinBox.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 139 "sipQtGuiQSpinBox.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 142 "sipQtGuiQSpinBox.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 145 "sipQtGuiQSpinBox.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 148 "sipQtGuiQSpinBox.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 151 "sipQtGuiQSpinBox.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 154 "sipQtGuiQSpinBox.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 157 "sipQtGuiQSpinBox.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 160 "sipQtGuiQSpinBox.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 163 "sipQtGuiQSpinBox.cpp"
#line 520 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 539 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "sipQtGuiQSpinBox.cpp"
#line 565 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "sipQtGuiQSpinBox.cpp"
#line 619 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "sipQtGuiQSpinBox.cpp"
#line 590 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "sipQtGuiQSpinBox.cpp"
#line 607 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "sipQtGuiQSpinBox.cpp"
#line 675 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 183 "sipQtGuiQSpinBox.cpp"
#line 301 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 186 "sipQtGuiQSpinBox.cpp"
#line 414 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 189 "sipQtGuiQSpinBox.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 192 "sipQtGuiQSpinBox.cpp"
#line 68 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 195 "sipQtGuiQSpinBox.cpp"
#line 42 "/home/maemo/python-qt4-4.7/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 198 "sipQtGuiQSpinBox.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 201 "sipQtGuiQSpinBox.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 204 "sipQtGuiQSpinBox.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 207 "sipQtGuiQSpinBox.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 210 "sipQtGuiQSpinBox.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 213 "sipQtGuiQSpinBox.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 216 "sipQtGuiQSpinBox.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 219 "sipQtGuiQSpinBox.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 222 "sipQtGuiQSpinBox.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 225 "sipQtGuiQSpinBox.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 228 "sipQtGuiQSpinBox.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 231 "sipQtGuiQSpinBox.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 234 "sipQtGuiQSpinBox.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 237 "sipQtGuiQSpinBox.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 240 "sipQtGuiQSpinBox.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 243 "sipQtGuiQSpinBox.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 246 "sipQtGuiQSpinBox.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 249 "sipQtGuiQSpinBox.cpp"


class sipQSpinBox : public QSpinBox
{
public:
    sipQSpinBox(QWidget *);
    virtual ~sipQSpinBox();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QValidator::State validate(QString&,int&) const;
    int valueFromText(const QString&) const;
    QString textFromValue(int) const;
    void fixup(QString&) const;
    bool event(QEvent *);
    QSize sizeHint() const;
    QSize minimumSizeHint() const;
    void stepBy(int);
    void clear();
    void resizeEvent(QResizeEvent *);
    void keyPressEvent(QKeyEvent *);
    void keyReleaseEvent(QKeyEvent *);
    void wheelEvent(QWheelEvent *);
    void focusInEvent(QFocusEvent *);
    void focusOutEvent(QFocusEvent *);
    void contextMenuEvent(QContextMenuEvent *);
    void changeEvent(QEvent *);
    void closeEvent(QCloseEvent *);
    void hideEvent(QHideEvent *);
    void mousePressEvent(QMouseEvent *);
    void mouseReleaseEvent(QMouseEvent *);
    void mouseMoveEvent(QMouseEvent *);
    void timerEvent(QTimerEvent *);
    void paintEvent(QPaintEvent *);
    void showEvent(QShowEvent *);
    QAbstractSpinBox::StepEnabled stepEnabled() const;
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    int devType() const;
    void setVisible(bool);
    int heightForWidth(int) const;
    QPaintEngine * paintEngine() const;
    void mouseDoubleClickEvent(QMouseEvent *);
    void enterEvent(QEvent *);
    void leaveEvent(QEvent *);
    void moveEvent(QMoveEvent *);
    void tabletEvent(QTabletEvent *);
    void actionEvent(QActionEvent *);
    void dragEnterEvent(QDragEnterEvent *);
    void dragMoveEvent(QDragMoveEvent *);
    void dragLeaveEvent(QDragLeaveEvent *);
    void dropEvent(QDropEvent *);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void inputMethodEvent(QInputMethodEvent *);
    bool focusNextPrevChild(bool);
    void enabledChange(bool);
    void paletteChange(const QPalette&);
    void fontChange(const QFont&);
    void windowActivationChange(bool);
    void languageChange();
    bool eventFilter(QObject *,QEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSpinBox(const sipQSpinBox &);
    sipQSpinBox &operator = (const sipQSpinBox &);

    char sipPyMethods[56];
};

sipQSpinBox::sipQSpinBox(QWidget *a0): QSpinBox(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSpinBox::~sipQSpinBox()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQSpinBox::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QSpinBox);
}

int sipQSpinBox::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QSpinBox::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QSpinBox,_c,_id,_a);

    return _id;
}

void *sipQSpinBox::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QSpinBox,_clname)) ? this : QSpinBox::qt_metacast(_clname);
}

QValidator::State sipQSpinBox::validate(QString& a0,int& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_validate);

    if (!meth)
        return QSpinBox::validate(a0,a1);

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
        extern QValidator::State sipVH_QtGui_30(sip_gilstate_t,PyObject *,QString&,int&);

        return sipVH_QtGui_30(sipGILState,meth,a0,a1);
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        extern QValidator::State sipVH_QtGui_29(sip_gilstate_t,PyObject *,QString&,int&);

        return sipVH_QtGui_29(sipGILState,meth,a0,a1);
    }

    return QSpinBox::validate(a0,a1);
}

int sipQSpinBox::valueFromText(const QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_valueFromText);

    if (!meth)
        return QSpinBox::valueFromText(a0);

    extern int sipVH_QtGui_112(sip_gilstate_t,PyObject *,const QString&);

    return sipVH_QtGui_112(sipGILState,meth,a0);
}

QString sipQSpinBox::textFromValue(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_textFromValue);

    if (!meth)
        return QSpinBox::textFromValue(a0);

    extern QString sipVH_QtGui_111(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_111(sipGILState,meth,a0);
}

void sipQSpinBox::fixup(QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_fixup);

    if (!meth)
    {
        QSpinBox::fixup(a0);
        return;
    }

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
        extern void sipVH_QtGui_34(sip_gilstate_t,PyObject *,QString&);

        sipVH_QtGui_34(sipGILState,meth,a0);
        return;
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        extern void sipVH_QtGui_33(sip_gilstate_t,PyObject *,QString&);

        sipVH_QtGui_33(sipGILState,meth,a0);
        return;
    }

    QSpinBox::fixup(a0);
}

bool sipQSpinBox::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QSpinBox::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

QSize sipQSpinBox::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QAbstractSpinBox::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_4(sipGILState,meth);
}

QSize sipQSpinBox::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!meth)
        return QAbstractSpinBox::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_4(sipGILState,meth);
}

void sipQSpinBox::stepBy(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_stepBy);

    if (!meth)
    {
        QAbstractSpinBox::stepBy(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState,meth,a0);
}

void sipQSpinBox::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_clear);

    if (!meth)
    {
        QAbstractSpinBox::clear();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQSpinBox::resizeEvent(QResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_resizeEvent);

    if (!meth)
    {
        QAbstractSpinBox::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t,PyObject *,QResizeEvent *);

    sipVH_QtGui_2(sipGILState,meth,a0);
}

void sipQSpinBox::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_keyPressEvent);

    if (!meth)
    {
        QAbstractSpinBox::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQSpinBox::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!meth)
    {
        QAbstractSpinBox::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQSpinBox::wheelEvent(QWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_wheelEvent);

    if (!meth)
    {
        QAbstractSpinBox::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t,PyObject *,QWheelEvent *);

    sipVH_QtGui_5(sipGILState,meth,a0);
}

void sipQSpinBox::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_focusInEvent);

    if (!meth)
    {
        QAbstractSpinBox::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

void sipQSpinBox::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_focusOutEvent);

    if (!meth)
    {
        QAbstractSpinBox::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

void sipQSpinBox::contextMenuEvent(QContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!meth)
    {
        QAbstractSpinBox::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t,PyObject *,QContextMenuEvent *);

    sipVH_QtGui_21(sipGILState,meth,a0);
}

void sipQSpinBox::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_changeEvent);

    if (!meth)
    {
        QAbstractSpinBox::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQSpinBox::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_closeEvent);

    if (!meth)
    {
        QAbstractSpinBox::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t,PyObject *,QCloseEvent *);

    sipVH_QtGui_22(sipGILState,meth,a0);
}

void sipQSpinBox::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_hideEvent);

    if (!meth)
    {
        QAbstractSpinBox::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t,PyObject *,QHideEvent *);

    sipVH_QtGui_0(sipGILState,meth,a0);
}

void sipQSpinBox::mousePressEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_mousePressEvent);

    if (!meth)
    {
        QAbstractSpinBox::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQSpinBox::mouseReleaseEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!meth)
    {
        QAbstractSpinBox::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQSpinBox::mouseMoveEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!meth)
    {
        QAbstractSpinBox::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQSpinBox::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QAbstractSpinBox::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQSpinBox::paintEvent(QPaintEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_paintEvent);

    if (!meth)
    {
        QAbstractSpinBox::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t,PyObject *,QPaintEvent *);

    sipVH_QtGui_3(sipGILState,meth,a0);
}

void sipQSpinBox::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_showEvent);

    if (!meth)
    {
        QAbstractSpinBox::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t,PyObject *,QShowEvent *);

    sipVH_QtGui_1(sipGILState,meth,a0);
}

QAbstractSpinBox::StepEnabled sipQSpinBox::stepEnabled() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_stepEnabled);

    if (!meth)
        return QAbstractSpinBox::stepEnabled();

    extern QAbstractSpinBox::StepEnabled sipVH_QtGui_220(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_220(sipGILState,meth);
}

QVariant sipQSpinBox::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!meth)
        return QAbstractSpinBox::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t,PyObject *,Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState,meth,a0);
}

int sipQSpinBox::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

void sipQSpinBox::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_setVisible);

    if (!meth)
    {
        QWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

int sipQSpinBox::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QWidget::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

QPaintEngine * sipQSpinBox::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QWidget::paintEngine();

    extern QPaintEngine * sipVH_QtGui_27(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_27(sipGILState,meth);
}

void sipQSpinBox::mouseDoubleClickEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!meth)
    {
        QWidget::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQSpinBox::enterEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_enterEvent);

    if (!meth)
    {
        QWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQSpinBox::leaveEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_leaveEvent);

    if (!meth)
    {
        QWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQSpinBox::moveEvent(QMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_moveEvent);

    if (!meth)
    {
        QWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t,PyObject *,QMoveEvent *);

    sipVH_QtGui_23(sipGILState,meth,a0);
}

void sipQSpinBox::tabletEvent(QTabletEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_tabletEvent);

    if (!meth)
    {
        QWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t,PyObject *,QTabletEvent *);

    sipVH_QtGui_20(sipGILState,meth,a0);
}

void sipQSpinBox::actionEvent(QActionEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_actionEvent);

    if (!meth)
    {
        QWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t,PyObject *,QActionEvent *);

    sipVH_QtGui_19(sipGILState,meth,a0);
}

void sipQSpinBox::dragEnterEvent(QDragEnterEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!meth)
    {
        QWidget::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t,PyObject *,QDragEnterEvent *);

    sipVH_QtGui_18(sipGILState,meth,a0);
}

void sipQSpinBox::dragMoveEvent(QDragMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!meth)
    {
        QWidget::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t,PyObject *,QDragMoveEvent *);

    sipVH_QtGui_17(sipGILState,meth,a0);
}

void sipQSpinBox::dragLeaveEvent(QDragLeaveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!meth)
    {
        QWidget::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t,PyObject *,QDragLeaveEvent *);

    sipVH_QtGui_16(sipGILState,meth,a0);
}

void sipQSpinBox::dropEvent(QDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_dropEvent);

    if (!meth)
    {
        QWidget::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t,PyObject *,QDropEvent *);

    sipVH_QtGui_15(sipGILState,meth,a0);
}

int sipQSpinBox::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QWidget::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t,PyObject *,QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState,meth,a0);
}

void sipQSpinBox::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!meth)
    {
        QWidget::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t,PyObject *,QInputMethodEvent *);

    sipVH_QtGui_13(sipGILState,meth,a0);
}

bool sipQSpinBox::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!meth)
        return QWidget::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_11(sip_gilstate_t,PyObject *,bool);

    return sipVH_QtGui_11(sipGILState,meth,a0);
}

void sipQSpinBox::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_enabledChange);

    if (!meth)
    {
        QWidget::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQSpinBox::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_paletteChange);

    if (!meth)
    {
        QWidget::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t,PyObject *,const QPalette&);

    sipVH_QtGui_10(sipGILState,meth,a0);
}

void sipQSpinBox::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_fontChange);

    if (!meth)
    {
        QWidget::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t,PyObject *,const QFont&);

    sipVH_QtGui_9(sipGILState,meth,a0);
}

void sipQSpinBox::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_windowActivationChange);

    if (!meth)
    {
        QWidget::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQSpinBox::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_languageChange);

    if (!meth)
    {
        QWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

bool sipQSpinBox::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQSpinBox::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQSpinBox::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQSpinBox::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQSpinBox::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QSpinBox_value, "QSpinBox.value() -> int");

extern "C" {static PyObject *meth_QSpinBox_value(PyObject *, PyObject *);}
static PyObject *meth_QSpinBox_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSpinBox, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->value();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpinBox, sipName_value, doc_QSpinBox_value);

    return NULL;
}


PyDoc_STRVAR(doc_QSpinBox_prefix, "QSpinBox.prefix() -> QString");

extern "C" {static PyObject *meth_QSpinBox_prefix(PyObject *, PyObject *);}
static PyObject *meth_QSpinBox_prefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSpinBox, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->prefix());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpinBox, sipName_prefix, doc_QSpinBox_prefix);

    return NULL;
}


PyDoc_STRVAR(doc_QSpinBox_setPrefix, "QSpinBox.setPrefix(QString)");

extern "C" {static PyObject *meth_QSpinBox_setPrefix(PyObject *, PyObject *);}
static PyObject *meth_QSpinBox_setPrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSpinBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPrefix(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpinBox, sipName_setPrefix, doc_QSpinBox_setPrefix);

    return NULL;
}


PyDoc_STRVAR(doc_QSpinBox_suffix, "QSpinBox.suffix() -> QString");

extern "C" {static PyObject *meth_QSpinBox_suffix(PyObject *, PyObject *);}
static PyObject *meth_QSpinBox_suffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSpinBox, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->suffix());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpinBox, sipName_suffix, doc_QSpinBox_suffix);

    return NULL;
}


PyDoc_STRVAR(doc_QSpinBox_setSuffix, "QSpinBox.setSuffix(QString)");

extern "C" {static PyObject *meth_QSpinBox_setSuffix(PyObject *, PyObject *);}
static PyObject *meth_QSpinBox_setSuffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSpinBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSuffix(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpinBox, sipName_setSuffix, doc_QSpinBox_setSuffix);

    return NULL;
}


PyDoc_STRVAR(doc_QSpinBox_cleanText, "QSpinBox.cleanText() -> QString");

extern "C" {static PyObject *meth_QSpinBox_cleanText(PyObject *, PyObject *);}
static PyObject *meth_QSpinBox_cleanText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSpinBox, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->cleanText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpinBox, sipName_cleanText, doc_QSpinBox_cleanText);

    return NULL;
}


PyDoc_STRVAR(doc_QSpinBox_singleStep, "QSpinBox.singleStep() -> int");

extern "C" {static PyObject *meth_QSpinBox_singleStep(PyObject *, PyObject *);}
static PyObject *meth_QSpinBox_singleStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSpinBox, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->singleStep();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpinBox, sipName_singleStep, doc_QSpinBox_singleStep);

    return NULL;
}


PyDoc_STRVAR(doc_QSpinBox_setSingleStep, "QSpinBox.setSingleStep(int)");

extern "C" {static PyObject *meth_QSpinBox_setSingleStep(PyObject *, PyObject *);}
static PyObject *meth_QSpinBox_setSingleStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSpinBox, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSingleStep(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpinBox, sipName_setSingleStep, doc_QSpinBox_setSingleStep);

    return NULL;
}


PyDoc_STRVAR(doc_QSpinBox_minimum, "QSpinBox.minimum() -> int");

extern "C" {static PyObject *meth_QSpinBox_minimum(PyObject *, PyObject *);}
static PyObject *meth_QSpinBox_minimum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSpinBox, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->minimum();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpinBox, sipName_minimum, doc_QSpinBox_minimum);

    return NULL;
}


PyDoc_STRVAR(doc_QSpinBox_setMinimum, "QSpinBox.setMinimum(int)");

extern "C" {static PyObject *meth_QSpinBox_setMinimum(PyObject *, PyObject *);}
static PyObject *meth_QSpinBox_setMinimum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSpinBox, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMinimum(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpinBox, sipName_setMinimum, doc_QSpinBox_setMinimum);

    return NULL;
}


PyDoc_STRVAR(doc_QSpinBox_maximum, "QSpinBox.maximum() -> int");

extern "C" {static PyObject *meth_QSpinBox_maximum(PyObject *, PyObject *);}
static PyObject *meth_QSpinBox_maximum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSpinBox, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->maximum();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpinBox, sipName_maximum, doc_QSpinBox_maximum);

    return NULL;
}


PyDoc_STRVAR(doc_QSpinBox_setMaximum, "QSpinBox.setMaximum(int)");

extern "C" {static PyObject *meth_QSpinBox_setMaximum(PyObject *, PyObject *);}
static PyObject *meth_QSpinBox_setMaximum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSpinBox, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMaximum(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpinBox, sipName_setMaximum, doc_QSpinBox_setMaximum);

    return NULL;
}


PyDoc_STRVAR(doc_QSpinBox_setRange, "QSpinBox.setRange(int, int)");

extern "C" {static PyObject *meth_QSpinBox_setRange(PyObject *, PyObject *);}
static PyObject *meth_QSpinBox_setRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QSpinBox, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRange(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpinBox, sipName_setRange, doc_QSpinBox_setRange);

    return NULL;
}


PyDoc_STRVAR(doc_QSpinBox_validate, "QSpinBox.validate(QString, int) -> (QValidator.State, int)");

extern "C" {static PyObject *meth_QSpinBox_validate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSpinBox_validate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
        QString * a0;
        int a0State = 0;
        int a1;
        QSpinBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_input,
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "pJ1i", &sipSelf, sipType_QSpinBox, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            QValidator::State sipRes;
            PyObject *sipResult;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSpinBox::validate(*a0,a1) : sipCpp->validate(*a0,a1));
            Py_END_ALLOW_THREADS

            sipResult = sipBuildResult(0,"(FDi)",sipRes,sipType_QValidator_State,a0,sipType_QString,NULL,a1);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipResult;
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        QString * a0;
        int a1;
        QSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "pJ9i", &sipSelf, sipType_QSpinBox, &sipCpp, sipType_QString,&a0, &a1))
        {
            QValidator::State sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSpinBox::validate(*a0,a1) : sipCpp->validate(*a0,a1));
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(Fi)",sipRes,sipType_QValidator_State,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpinBox, sipName_validate, doc_QSpinBox_validate);

    return NULL;
}


PyDoc_STRVAR(doc_QSpinBox_valueFromText, "QSpinBox.valueFromText(QString) -> int");

extern "C" {static PyObject *meth_QSpinBox_valueFromText(PyObject *, PyObject *);}
static PyObject *meth_QSpinBox_valueFromText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        QSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QSpinBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSpinBox::valueFromText(*a0) : sipCpp->valueFromText(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpinBox, sipName_valueFromText, doc_QSpinBox_valueFromText);

    return NULL;
}


PyDoc_STRVAR(doc_QSpinBox_textFromValue, "QSpinBox.textFromValue(int) -> QString");

extern "C" {static PyObject *meth_QSpinBox_textFromValue(PyObject *, PyObject *);}
static PyObject *meth_QSpinBox_textFromValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QSpinBox, &sipCpp, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((sipSelfWasArg ? sipCpp->QSpinBox::textFromValue(a0) : sipCpp->textFromValue(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpinBox, sipName_textFromValue, doc_QSpinBox_textFromValue);

    return NULL;
}


PyDoc_STRVAR(doc_QSpinBox_fixup, "QSpinBox.fixup(QString)");

extern "C" {static PyObject *meth_QSpinBox_fixup(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSpinBox_fixup(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
        QString * a0;
        int a0State = 0;
        QSpinBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_str,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "pJ1", &sipSelf, sipType_QSpinBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            PyObject *sipResult;

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QSpinBox::fixup(*a0) : sipCpp->fixup(*a0));
            Py_END_ALLOW_THREADS

            sipResult = sipConvertFromType(a0,sipType_QString,NULL);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipResult;
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        QString * a0;
        QSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "pJ9", &sipSelf, sipType_QSpinBox, &sipCpp, sipType_QString,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QSpinBox::fixup(*a0) : sipCpp->fixup(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpinBox, sipName_fixup, doc_QSpinBox_fixup);

    return NULL;
}


PyDoc_STRVAR(doc_QSpinBox_event, "QSpinBox.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QSpinBox_event(PyObject *, PyObject *);}
static PyObject *meth_QSpinBox_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        QSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QSpinBox, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSpinBox::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpinBox, sipName_event, doc_QSpinBox_event);

    return NULL;
}


PyDoc_STRVAR(doc_QSpinBox_setValue, "QSpinBox.setValue(int)");

extern "C" {static PyObject *meth_QSpinBox_setValue(PyObject *, PyObject *);}
static PyObject *meth_QSpinBox_setValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSpinBox, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setValue(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpinBox, sipName_setValue, doc_QSpinBox_setValue);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSpinBox(void *, const sipTypeDef *);}
static void *cast_QSpinBox(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSpinBox)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractSpinBox)->ctd_cast((QAbstractSpinBox *)(QSpinBox *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSpinBox(void *, int);}
static void release_QSpinBox(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSpinBox *>(sipCppV);
    else
        delete reinterpret_cast<QSpinBox *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QSpinBox(sipSimpleWrapper *);}
static void dealloc_QSpinBox(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSpinBox *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSpinBox(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QSpinBox(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QSpinBox(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSpinBox *sipCpp = 0;

    {
        QWidget * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSpinBox(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSpinBox[] = {{25, 255, 1}};


static PyMethodDef methods_QSpinBox[] = {
    {SIP_MLNAME_CAST(sipName_cleanText), meth_QSpinBox_cleanText, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpinBox_cleanText)},
    {SIP_MLNAME_CAST(sipName_event), meth_QSpinBox_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpinBox_event)},
    {SIP_MLNAME_CAST(sipName_fixup), (PyCFunction)meth_QSpinBox_fixup, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSpinBox_fixup)},
    {SIP_MLNAME_CAST(sipName_maximum), meth_QSpinBox_maximum, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpinBox_maximum)},
    {SIP_MLNAME_CAST(sipName_minimum), meth_QSpinBox_minimum, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpinBox_minimum)},
    {SIP_MLNAME_CAST(sipName_prefix), meth_QSpinBox_prefix, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpinBox_prefix)},
    {SIP_MLNAME_CAST(sipName_setMaximum), meth_QSpinBox_setMaximum, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpinBox_setMaximum)},
    {SIP_MLNAME_CAST(sipName_setMinimum), meth_QSpinBox_setMinimum, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpinBox_setMinimum)},
    {SIP_MLNAME_CAST(sipName_setPrefix), meth_QSpinBox_setPrefix, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpinBox_setPrefix)},
    {SIP_MLNAME_CAST(sipName_setRange), meth_QSpinBox_setRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpinBox_setRange)},
    {SIP_MLNAME_CAST(sipName_setSingleStep), meth_QSpinBox_setSingleStep, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpinBox_setSingleStep)},
    {SIP_MLNAME_CAST(sipName_setSuffix), meth_QSpinBox_setSuffix, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpinBox_setSuffix)},
    {SIP_MLNAME_CAST(sipName_setValue), meth_QSpinBox_setValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpinBox_setValue)},
    {SIP_MLNAME_CAST(sipName_singleStep), meth_QSpinBox_singleStep, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpinBox_singleStep)},
    {SIP_MLNAME_CAST(sipName_suffix), meth_QSpinBox_suffix, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpinBox_suffix)},
    {SIP_MLNAME_CAST(sipName_textFromValue), meth_QSpinBox_textFromValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpinBox_textFromValue)},
    {SIP_MLNAME_CAST(sipName_validate), (PyCFunction)meth_QSpinBox_validate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSpinBox_validate)},
    {SIP_MLNAME_CAST(sipName_value), meth_QSpinBox_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpinBox_value)},
    {SIP_MLNAME_CAST(sipName_valueFromText), meth_QSpinBox_valueFromText, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpinBox_valueFromText)}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QSpinBox[] = {
    {"valueChanged(int)", "\1QSpinBox.valueChanged(int)", 0},
    {"valueChanged(const QString&)", "\1QSpinBox.valueChanged(QString)", 0},
    {0, 0, 0}
};

PyDoc_STRVAR(doc_QSpinBox, "\1QSpinBox(QWidget parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QSpinBox = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QSpinBox,
        {0}
    },
    {
        sipNameNr_QSpinBox,
        {0, 0, 1},
        19, methods_QSpinBox,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSpinBox,
    -1,
    -1,
    supers_QSpinBox,
    0,
    init_QSpinBox,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSpinBox,
    0,
    0,
    0,
    release_QSpinBox,
    cast_QSpinBox,
    0,
    0,
    0
},
    &QSpinBox::staticMetaObject,
    0,
    pyqt4_signals_QSpinBox
};

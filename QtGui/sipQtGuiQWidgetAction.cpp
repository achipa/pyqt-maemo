/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:03 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 39 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidgetaction.sip"
#include <qwidgetaction.h>
#line 39 "sipQtGuiQWidgetAction.cpp"

#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtGuiQWidgetAction.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 46 "sipQtGuiQWidgetAction.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 49 "sipQtGuiQWidgetAction.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 52 "sipQtGuiQWidgetAction.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 55 "sipQtGuiQWidgetAction.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 58 "sipQtGuiQWidgetAction.cpp"
#line 194 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicswidget.sip"
#include <qgraphicswidget.h>
#line 61 "sipQtGuiQWidgetAction.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 64 "sipQtGuiQWidgetAction.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 67 "sipQtGuiQWidgetAction.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 70 "sipQtGuiQWidgetAction.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 73 "sipQtGuiQWidgetAction.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 76 "sipQtGuiQWidgetAction.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qmenu.sip"
#include <qmenu.h>
#line 79 "sipQtGuiQWidgetAction.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 82 "sipQtGuiQWidgetAction.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 85 "sipQtGuiQWidgetAction.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qactiongroup.sip"
#include <qactiongroup.h>
#line 88 "sipQtGuiQWidgetAction.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 91 "sipQtGuiQWidgetAction.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 94 "sipQtGuiQWidgetAction.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 97 "sipQtGuiQWidgetAction.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 100 "sipQtGuiQWidgetAction.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 103 "sipQtGuiQWidgetAction.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 106 "sipQtGuiQWidgetAction.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 109 "sipQtGuiQWidgetAction.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 112 "sipQtGuiQWidgetAction.cpp"


class sipQWidgetAction : public QWidgetAction
{
public:
    sipQWidgetAction(QObject *);
    virtual ~sipQWidgetAction();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    QWidget * createWidget(QWidget *);
    void deleteWidget(QWidget *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWidgetAction(const sipQWidgetAction &);
    sipQWidgetAction &operator = (const sipQWidgetAction &);

    char sipPyMethods[9];
};

sipQWidgetAction::sipQWidgetAction(QObject *a0): QWidgetAction(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWidgetAction::~sipQWidgetAction()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWidgetAction::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QWidgetAction);
}

int sipQWidgetAction::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QWidgetAction::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QWidgetAction,_c,_id,_a);

    return _id;
}

void *sipQWidgetAction::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QWidgetAction,_clname)) ? this : QWidgetAction::qt_metacast(_clname);
}

bool sipQWidgetAction::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QWidgetAction::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQWidgetAction::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QWidgetAction::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

QWidget * sipQWidgetAction::createWidget(QWidget *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_createWidget);

    if (!meth)
        return QWidgetAction::createWidget(a0);

    extern QWidget * sipVH_QtGui_8(sip_gilstate_t,PyObject *,QWidget *);

    return sipVH_QtGui_8(sipGILState,meth,a0);
}

void sipQWidgetAction::deleteWidget(QWidget *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_deleteWidget);

    if (!meth)
    {
        QWidgetAction::deleteWidget(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t,PyObject *,QWidget *);

    sipVH_QtGui_7(sipGILState,meth,a0);
}

void sipQWidgetAction::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQWidgetAction::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQWidgetAction::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQWidgetAction::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQWidgetAction::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QWidgetAction_setDefaultWidget, "QWidgetAction.setDefaultWidget(QWidget)");

extern "C" {static PyObject *meth_QWidgetAction_setDefaultWidget(PyObject *, PyObject *);}
static PyObject *meth_QWidgetAction_setDefaultWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget * a0;
        QWidgetAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QWidgetAction, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDefaultWidget(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidgetAction, sipName_setDefaultWidget, doc_QWidgetAction_setDefaultWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QWidgetAction_defaultWidget, "QWidgetAction.defaultWidget() -> QWidget");

extern "C" {static PyObject *meth_QWidgetAction_defaultWidget(PyObject *, PyObject *);}
static PyObject *meth_QWidgetAction_defaultWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidgetAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidgetAction, &sipCpp))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->defaultWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidgetAction, sipName_defaultWidget, doc_QWidgetAction_defaultWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QWidgetAction_requestWidget, "QWidgetAction.requestWidget(QWidget) -> QWidget");

extern "C" {static PyObject *meth_QWidgetAction_requestWidget(PyObject *, PyObject *);}
static PyObject *meth_QWidgetAction_requestWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget * a0;
        sipWrapper *sipOwner = 0;
        QWidgetAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJH", &sipSelf, sipType_QWidgetAction, &sipCpp, sipType_QWidget, &a0, &sipOwner))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->requestWidget(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QWidget,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidgetAction, sipName_requestWidget, doc_QWidgetAction_requestWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QWidgetAction_releaseWidget, "QWidgetAction.releaseWidget(QWidget)");

extern "C" {static PyObject *meth_QWidgetAction_releaseWidget(PyObject *, PyObject *);}
static PyObject *meth_QWidgetAction_releaseWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget * a0;
        QWidgetAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ<", &sipSelf, sipType_QWidgetAction, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->releaseWidget(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidgetAction, sipName_releaseWidget, doc_QWidgetAction_releaseWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QWidgetAction_event, "QWidgetAction.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QWidgetAction_event(PyObject *, PyObject *);}
static PyObject *meth_QWidgetAction_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        QWidgetAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWidgetAction, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QWidgetAction::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidgetAction, sipName_event, doc_QWidgetAction_event);

    return NULL;
}


PyDoc_STRVAR(doc_QWidgetAction_eventFilter, "QWidgetAction.eventFilter(QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QWidgetAction_eventFilter(PyObject *, PyObject *);}
static PyObject *meth_QWidgetAction_eventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject * a0;
        QEvent * a1;
        QWidgetAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J8", &sipSelf, sipType_QWidgetAction, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QWidgetAction::eventFilter(a0,a1) : sipCpp->eventFilter(a0,a1));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidgetAction, sipName_eventFilter, doc_QWidgetAction_eventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QWidgetAction_createWidget, "QWidgetAction.createWidget(QWidget) -> QWidget");

extern "C" {static PyObject *meth_QWidgetAction_createWidget(PyObject *, PyObject *);}
static PyObject *meth_QWidgetAction_createWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0;
        sipWrapper *sipOwner = 0;
        QWidgetAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJH", &sipSelf, sipType_QWidgetAction, &sipCpp, sipType_QWidget, &a0, &sipOwner))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QWidgetAction::createWidget(a0) : sipCpp->createWidget(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QWidget,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidgetAction, sipName_createWidget, doc_QWidgetAction_createWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QWidgetAction_deleteWidget, "QWidgetAction.deleteWidget(QWidget)");

extern "C" {static PyObject *meth_QWidgetAction_deleteWidget(PyObject *, PyObject *);}
static PyObject *meth_QWidgetAction_deleteWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0;
        QWidgetAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ:", &sipSelf, sipType_QWidgetAction, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWidgetAction::deleteWidget(a0) : sipCpp->deleteWidget(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidgetAction, sipName_deleteWidget, doc_QWidgetAction_deleteWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QWidgetAction_createdWidgets, "QWidgetAction.createdWidgets() -> list-of-QWidget");

extern "C" {static PyObject *meth_QWidgetAction_createdWidgets(PyObject *, PyObject *);}
static PyObject *meth_QWidgetAction_createdWidgets(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidgetAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QWidgetAction, &sipCpp))
        {
            QList<QWidget *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QWidget *>(sipCpp->createdWidgets());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidgetAction, sipName_createdWidgets, doc_QWidgetAction_createdWidgets);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWidgetAction(void *, const sipTypeDef *);}
static void *cast_QWidgetAction(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QWidgetAction)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAction)->ctd_cast((QAction *)(QWidgetAction *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWidgetAction(void *, int);}
static void release_QWidgetAction(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQWidgetAction *>(sipCppV);
    else
        delete reinterpret_cast<QWidgetAction *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QWidgetAction(sipSimpleWrapper *);}
static void dealloc_QWidgetAction(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQWidgetAction *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QWidgetAction(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QWidgetAction(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QWidgetAction(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWidgetAction *sipCpp = 0;

    {
        QObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQWidgetAction(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWidgetAction[] = {{33, 255, 1}};


static PyMethodDef methods_QWidgetAction[] = {
    {SIP_MLNAME_CAST(sipName_createWidget), meth_QWidgetAction_createWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidgetAction_createWidget)},
    {SIP_MLNAME_CAST(sipName_createdWidgets), meth_QWidgetAction_createdWidgets, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidgetAction_createdWidgets)},
    {SIP_MLNAME_CAST(sipName_defaultWidget), meth_QWidgetAction_defaultWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidgetAction_defaultWidget)},
    {SIP_MLNAME_CAST(sipName_deleteWidget), meth_QWidgetAction_deleteWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidgetAction_deleteWidget)},
    {SIP_MLNAME_CAST(sipName_event), meth_QWidgetAction_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidgetAction_event)},
    {SIP_MLNAME_CAST(sipName_eventFilter), meth_QWidgetAction_eventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidgetAction_eventFilter)},
    {SIP_MLNAME_CAST(sipName_releaseWidget), meth_QWidgetAction_releaseWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidgetAction_releaseWidget)},
    {SIP_MLNAME_CAST(sipName_requestWidget), meth_QWidgetAction_requestWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidgetAction_requestWidget)},
    {SIP_MLNAME_CAST(sipName_setDefaultWidget), meth_QWidgetAction_setDefaultWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidgetAction_setDefaultWidget)}
};

PyDoc_STRVAR(doc_QWidgetAction, "\1QWidgetAction(QObject)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QWidgetAction = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QWidgetAction,
        {0}
    },
    {
        sipNameNr_QWidgetAction,
        {0, 0, 1},
        9, methods_QWidgetAction,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWidgetAction,
    -1,
    -1,
    supers_QWidgetAction,
    0,
    init_QWidgetAction,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWidgetAction,
    0,
    0,
    0,
    release_QWidgetAction,
    cast_QWidgetAction,
    0,
    0,
    0
},
    &QWidgetAction::staticMetaObject,
    0,
    0
};

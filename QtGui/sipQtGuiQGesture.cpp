/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:03 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 39 "/home/maemo/python-qt4-4.7/sip/QtGui/qgesture.sip"
#include <qgesture.h>
#line 39 "sipQtGuiQGesture.cpp"

#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtGuiQGesture.cpp"
#line 94 "/home/maemo/python-qt4-4.7/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 46 "sipQtGuiQGesture.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 49 "sipQtGuiQGesture.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 52 "sipQtGuiQGesture.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 55 "sipQtGuiQGesture.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 58 "sipQtGuiQGesture.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 61 "sipQtGuiQGesture.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 64 "sipQtGuiQGesture.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 67 "sipQtGuiQGesture.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 70 "sipQtGuiQGesture.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 73 "sipQtGuiQGesture.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 76 "sipQtGuiQGesture.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 79 "sipQtGuiQGesture.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 82 "sipQtGuiQGesture.cpp"


class sipQGesture : public QGesture
{
public:
    sipQGesture(QObject *);
    virtual ~sipQGesture();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGesture(const sipQGesture &);
    sipQGesture &operator = (const sipQGesture &);

    char sipPyMethods[7];
};

sipQGesture::sipQGesture(QObject *a0): QGesture(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGesture::~sipQGesture()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQGesture::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QGesture);
}

int sipQGesture::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QGesture::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QGesture,_c,_id,_a);

    return _id;
}

void *sipQGesture::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QGesture,_clname)) ? this : QGesture::qt_metacast(_clname);
}

bool sipQGesture::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQGesture::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQGesture::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQGesture::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQGesture::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQGesture::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQGesture::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QGesture_gestureType, "QGesture.gestureType() -> Qt.GestureType");

extern "C" {static PyObject *meth_QGesture_gestureType(PyObject *, PyObject *);}
static PyObject *meth_QGesture_gestureType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGesture, &sipCpp))
        {
            Qt::GestureType sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->gestureType();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_GestureType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGesture, sipName_gestureType, doc_QGesture_gestureType);

    return NULL;
}


PyDoc_STRVAR(doc_QGesture_state, "QGesture.state() -> Qt.GestureState");

extern "C" {static PyObject *meth_QGesture_state(PyObject *, PyObject *);}
static PyObject *meth_QGesture_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGesture, &sipCpp))
        {
            Qt::GestureState sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->state();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_GestureState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGesture, sipName_state, doc_QGesture_state);

    return NULL;
}


PyDoc_STRVAR(doc_QGesture_hotSpot, "QGesture.hotSpot() -> QPointF");

extern "C" {static PyObject *meth_QGesture_hotSpot(PyObject *, PyObject *);}
static PyObject *meth_QGesture_hotSpot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGesture, &sipCpp))
        {
            QPointF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->hotSpot());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGesture, sipName_hotSpot, doc_QGesture_hotSpot);

    return NULL;
}


PyDoc_STRVAR(doc_QGesture_setHotSpot, "QGesture.setHotSpot(QPointF)");

extern "C" {static PyObject *meth_QGesture_setHotSpot(PyObject *, PyObject *);}
static PyObject *meth_QGesture_setHotSpot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGesture, &sipCpp, sipType_QPointF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHotSpot(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGesture, sipName_setHotSpot, doc_QGesture_setHotSpot);

    return NULL;
}


PyDoc_STRVAR(doc_QGesture_hasHotSpot, "QGesture.hasHotSpot() -> bool");

extern "C" {static PyObject *meth_QGesture_hasHotSpot(PyObject *, PyObject *);}
static PyObject *meth_QGesture_hasHotSpot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGesture, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasHotSpot();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGesture, sipName_hasHotSpot, doc_QGesture_hasHotSpot);

    return NULL;
}


PyDoc_STRVAR(doc_QGesture_unsetHotSpot, "QGesture.unsetHotSpot()");

extern "C" {static PyObject *meth_QGesture_unsetHotSpot(PyObject *, PyObject *);}
static PyObject *meth_QGesture_unsetHotSpot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGesture, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->unsetHotSpot();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGesture, sipName_unsetHotSpot, doc_QGesture_unsetHotSpot);

    return NULL;
}


PyDoc_STRVAR(doc_QGesture_setGestureCancelPolicy, "QGesture.setGestureCancelPolicy(QGesture.GestureCancelPolicy)");

extern "C" {static PyObject *meth_QGesture_setGestureCancelPolicy(PyObject *, PyObject *);}
static PyObject *meth_QGesture_setGestureCancelPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGesture::GestureCancelPolicy a0;
        QGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGesture, &sipCpp, sipType_QGesture_GestureCancelPolicy, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setGestureCancelPolicy(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGesture, sipName_setGestureCancelPolicy, doc_QGesture_setGestureCancelPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QGesture_gestureCancelPolicy, "QGesture.gestureCancelPolicy() -> QGesture.GestureCancelPolicy");

extern "C" {static PyObject *meth_QGesture_gestureCancelPolicy(PyObject *, PyObject *);}
static PyObject *meth_QGesture_gestureCancelPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGesture, &sipCpp))
        {
            QGesture::GestureCancelPolicy sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->gestureCancelPolicy();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QGesture_GestureCancelPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGesture, sipName_gestureCancelPolicy, doc_QGesture_gestureCancelPolicy);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGesture(void *, const sipTypeDef *);}
static void *cast_QGesture(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QGesture)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QGesture *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGesture(void *, int);}
static void release_QGesture(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQGesture *>(sipCppV);
    else
        delete reinterpret_cast<QGesture *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QGesture(sipSimpleWrapper *);}
static void dealloc_QGesture(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGesture *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGesture(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QGesture(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QGesture(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGesture *sipCpp = 0;

    {
        QObject * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGesture(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGesture[] = {{129, 0, 1}};


static PyMethodDef methods_QGesture[] = {
    {SIP_MLNAME_CAST(sipName_gestureCancelPolicy), meth_QGesture_gestureCancelPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QGesture_gestureCancelPolicy)},
    {SIP_MLNAME_CAST(sipName_gestureType), meth_QGesture_gestureType, METH_VARARGS, SIP_MLDOC_CAST(doc_QGesture_gestureType)},
    {SIP_MLNAME_CAST(sipName_hasHotSpot), meth_QGesture_hasHotSpot, METH_VARARGS, SIP_MLDOC_CAST(doc_QGesture_hasHotSpot)},
    {SIP_MLNAME_CAST(sipName_hotSpot), meth_QGesture_hotSpot, METH_VARARGS, SIP_MLDOC_CAST(doc_QGesture_hotSpot)},
    {SIP_MLNAME_CAST(sipName_setGestureCancelPolicy), meth_QGesture_setGestureCancelPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QGesture_setGestureCancelPolicy)},
    {SIP_MLNAME_CAST(sipName_setHotSpot), meth_QGesture_setHotSpot, METH_VARARGS, SIP_MLDOC_CAST(doc_QGesture_setHotSpot)},
    {SIP_MLNAME_CAST(sipName_state), meth_QGesture_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QGesture_state)},
    {SIP_MLNAME_CAST(sipName_unsetHotSpot), meth_QGesture_unsetHotSpot, METH_VARARGS, SIP_MLDOC_CAST(doc_QGesture_unsetHotSpot)}
};

static sipEnumMemberDef enummembers_QGesture[] = {
    {sipName_CancelAllInContext, QGesture::CancelAllInContext, 146},
    {sipName_CancelNone, QGesture::CancelNone, 146},
};

PyDoc_STRVAR(doc_QGesture, "\1QGesture(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QGesture = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QGesture,
        {0}
    },
    {
        sipNameNr_QGesture,
        {0, 0, 1},
        8, methods_QGesture,
        2, enummembers_QGesture,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGesture,
    -1,
    -1,
    supers_QGesture,
    0,
    init_QGesture,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGesture,
    0,
    0,
    0,
    release_QGesture,
    cast_QGesture,
    0,
    0,
    0
},
    &QGesture::staticMetaObject,
    0,
    0
};

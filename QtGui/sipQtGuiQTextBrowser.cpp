/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:03 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextbrowser.sip"
#include <qtextbrowser.h>
#line 39 "sipQtGuiQTextBrowser.cpp"

#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 43 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 46 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 49 "sipQtGuiQTextBrowser.cpp"
#line 399 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 52 "sipQtGuiQTextBrowser.cpp"
#line 379 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 55 "sipQtGuiQTextBrowser.cpp"
#line 238 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 58 "sipQtGuiQTextBrowser.cpp"
#line 350 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 61 "sipQtGuiQTextBrowser.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 64 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 67 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 70 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 73 "sipQtGuiQTextBrowser.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 76 "sipQtGuiQTextBrowser.cpp"
#line 520 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 539 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "sipQtGuiQTextBrowser.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 84 "sipQtGuiQTextBrowser.cpp"
#line 279 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 87 "sipQtGuiQTextBrowser.cpp"
#line 466 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 90 "sipQtGuiQTextBrowser.cpp"
#line 565 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 93 "sipQtGuiQTextBrowser.cpp"
#line 590 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 96 "sipQtGuiQTextBrowser.cpp"
#line 619 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 99 "sipQtGuiQTextBrowser.cpp"
#line 607 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 102 "sipQtGuiQTextBrowser.cpp"
#line 490 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 105 "sipQtGuiQTextBrowser.cpp"
#line 428 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 108 "sipQtGuiQTextBrowser.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 111 "sipQtGuiQTextBrowser.cpp"
#line 312 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 114 "sipQtGuiQTextBrowser.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 117 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 120 "sipQtGuiQTextBrowser.cpp"
#line 39 "/home/maemo/python-qt4-4.7/sip/QtGui/qprinter.sip"
#include <qprinter.h>
#line 123 "sipQtGuiQTextBrowser.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextcursor.sip"
#include <qtextcursor.h>
#line 126 "sipQtGuiQTextBrowser.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 129 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 134 "sipQtGuiQTextBrowser.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 137 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 140 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 143 "sipQtGuiQTextBrowser.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qmenu.sip"
#include <qmenu.h>
#line 146 "sipQtGuiQTextBrowser.cpp"
#line 66 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 149 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 109 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 154 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 159 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 51 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 164 "sipQtGuiQTextBrowser.cpp"
#line 66 "/home/maemo/python-qt4-4.7/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 167 "sipQtGuiQTextBrowser.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 170 "sipQtGuiQTextBrowser.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qscrollbar.sip"
#include <qscrollbar.h>
#line 173 "sipQtGuiQTextBrowser.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 176 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 179 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 182 "sipQtGuiQTextBrowser.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qframe.sip"
#include <qframe.h>
#line 185 "sipQtGuiQTextBrowser.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 188 "sipQtGuiQTextBrowser.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 191 "sipQtGuiQTextBrowser.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 194 "sipQtGuiQTextBrowser.cpp"
#line 39 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 197 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 200 "sipQtGuiQTextBrowser.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 203 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 206 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 209 "sipQtGuiQTextBrowser.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 212 "sipQtGuiQTextBrowser.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 215 "sipQtGuiQTextBrowser.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 218 "sipQtGuiQTextBrowser.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 221 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 224 "sipQtGuiQTextBrowser.cpp"
#line 478 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 227 "sipQtGuiQTextBrowser.cpp"
#line 675 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 230 "sipQtGuiQTextBrowser.cpp"
#line 301 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 233 "sipQtGuiQTextBrowser.cpp"
#line 442 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 236 "sipQtGuiQTextBrowser.cpp"
#line 414 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 239 "sipQtGuiQTextBrowser.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 242 "sipQtGuiQTextBrowser.cpp"
#line 68 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 245 "sipQtGuiQTextBrowser.cpp"
#line 42 "/home/maemo/python-qt4-4.7/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 248 "sipQtGuiQTextBrowser.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 251 "sipQtGuiQTextBrowser.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 254 "sipQtGuiQTextBrowser.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 257 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 260 "sipQtGuiQTextBrowser.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 263 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 266 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 269 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 272 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 275 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 278 "sipQtGuiQTextBrowser.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 281 "sipQtGuiQTextBrowser.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 284 "sipQtGuiQTextBrowser.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 287 "sipQtGuiQTextBrowser.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 290 "sipQtGuiQTextBrowser.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 293 "sipQtGuiQTextBrowser.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 296 "sipQtGuiQTextBrowser.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 299 "sipQtGuiQTextBrowser.cpp"


class sipQTextBrowser : public QTextBrowser
{
public:
    sipQTextBrowser(QWidget *);
    virtual ~sipQTextBrowser();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QVariant loadResource(int,const QUrl&);
    void setSource(const QUrl&);
    void backward();
    void forward();
    void home();
    void reload();
    bool event(QEvent *);
    void keyPressEvent(QKeyEvent *);
    void mouseMoveEvent(QMouseEvent *);
    void mousePressEvent(QMouseEvent *);
    void mouseReleaseEvent(QMouseEvent *);
    void focusOutEvent(QFocusEvent *);
    bool focusNextPrevChild(bool);
    void paintEvent(QPaintEvent *);
    void timerEvent(QTimerEvent *);
    void keyReleaseEvent(QKeyEvent *);
    void resizeEvent(QResizeEvent *);
    void mouseDoubleClickEvent(QMouseEvent *);
    void contextMenuEvent(QContextMenuEvent *);
    void dragEnterEvent(QDragEnterEvent *);
    void dragLeaveEvent(QDragLeaveEvent *);
    void dragMoveEvent(QDragMoveEvent *);
    void dropEvent(QDropEvent *);
    void focusInEvent(QFocusEvent *);
    void showEvent(QShowEvent *);
    void changeEvent(QEvent *);
    void wheelEvent(QWheelEvent *);
    QMimeData * createMimeDataFromSelection() const;
    bool canInsertFromMimeData(const QMimeData *) const;
    void insertFromMimeData(const QMimeData *);
    void inputMethodEvent(QInputMethodEvent *);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void scrollContentsBy(int,int);
    QSize minimumSizeHint() const;
    QSize sizeHint() const;
    bool viewportEvent(QEvent *);
    int devType() const;
    void setVisible(bool);
    int heightForWidth(int) const;
    QPaintEngine * paintEngine() const;
    void enterEvent(QEvent *);
    void leaveEvent(QEvent *);
    void moveEvent(QMoveEvent *);
    void closeEvent(QCloseEvent *);
    void tabletEvent(QTabletEvent *);
    void actionEvent(QActionEvent *);
    void hideEvent(QHideEvent *);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void enabledChange(bool);
    void paletteChange(const QPalette&);
    void fontChange(const QFont&);
    void windowActivationChange(bool);
    void languageChange();
    bool eventFilter(QObject *,QEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTextBrowser(const sipQTextBrowser &);
    sipQTextBrowser &operator = (const sipQTextBrowser &);

    char sipPyMethods[58];
};

sipQTextBrowser::sipQTextBrowser(QWidget *a0): QTextBrowser(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextBrowser::~sipQTextBrowser()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTextBrowser::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QTextBrowser);
}

int sipQTextBrowser::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTextBrowser::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QTextBrowser,_c,_id,_a);

    return _id;
}

void *sipQTextBrowser::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QTextBrowser,_clname)) ? this : QTextBrowser::qt_metacast(_clname);
}

QVariant sipQTextBrowser::loadResource(int a0,const QUrl& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_loadResource);

    if (!meth)
        return QTextBrowser::loadResource(a0,a1);

    extern QVariant sipVH_QtGui_62(sip_gilstate_t,PyObject *,int,const QUrl&);

    return sipVH_QtGui_62(sipGILState,meth,a0,a1);
}

void sipQTextBrowser::setSource(const QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_setSource);

    if (!meth)
    {
        QTextBrowser::setSource(a0);
        return;
    }

    extern void sipVH_QtGui_64(sip_gilstate_t,PyObject *,const QUrl&);

    sipVH_QtGui_64(sipGILState,meth,a0);
}

void sipQTextBrowser::backward()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_backward);

    if (!meth)
    {
        QTextBrowser::backward();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQTextBrowser::forward()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_forward);

    if (!meth)
    {
        QTextBrowser::forward();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQTextBrowser::home()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_home);

    if (!meth)
    {
        QTextBrowser::home();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQTextBrowser::reload()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_reload);

    if (!meth)
    {
        QTextBrowser::reload();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

bool sipQTextBrowser::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QTextBrowser::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

void sipQTextBrowser::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_keyPressEvent);

    if (!meth)
    {
        QTextBrowser::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQTextBrowser::mouseMoveEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!meth)
    {
        QTextBrowser::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQTextBrowser::mousePressEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_mousePressEvent);

    if (!meth)
    {
        QTextBrowser::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQTextBrowser::mouseReleaseEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!meth)
    {
        QTextBrowser::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQTextBrowser::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_focusOutEvent);

    if (!meth)
    {
        QTextBrowser::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

bool sipQTextBrowser::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!meth)
        return QTextBrowser::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_11(sip_gilstate_t,PyObject *,bool);

    return sipVH_QtGui_11(sipGILState,meth,a0);
}

void sipQTextBrowser::paintEvent(QPaintEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_paintEvent);

    if (!meth)
    {
        QTextBrowser::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t,PyObject *,QPaintEvent *);

    sipVH_QtGui_3(sipGILState,meth,a0);
}

void sipQTextBrowser::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QTextEdit::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQTextBrowser::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!meth)
    {
        QTextEdit::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQTextBrowser::resizeEvent(QResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_resizeEvent);

    if (!meth)
    {
        QTextEdit::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t,PyObject *,QResizeEvent *);

    sipVH_QtGui_2(sipGILState,meth,a0);
}

void sipQTextBrowser::mouseDoubleClickEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!meth)
    {
        QTextEdit::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQTextBrowser::contextMenuEvent(QContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!meth)
    {
        QTextEdit::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t,PyObject *,QContextMenuEvent *);

    sipVH_QtGui_21(sipGILState,meth,a0);
}

void sipQTextBrowser::dragEnterEvent(QDragEnterEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!meth)
    {
        QTextEdit::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t,PyObject *,QDragEnterEvent *);

    sipVH_QtGui_18(sipGILState,meth,a0);
}

void sipQTextBrowser::dragLeaveEvent(QDragLeaveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!meth)
    {
        QTextEdit::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t,PyObject *,QDragLeaveEvent *);

    sipVH_QtGui_16(sipGILState,meth,a0);
}

void sipQTextBrowser::dragMoveEvent(QDragMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!meth)
    {
        QTextEdit::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t,PyObject *,QDragMoveEvent *);

    sipVH_QtGui_17(sipGILState,meth,a0);
}

void sipQTextBrowser::dropEvent(QDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_dropEvent);

    if (!meth)
    {
        QTextEdit::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t,PyObject *,QDropEvent *);

    sipVH_QtGui_15(sipGILState,meth,a0);
}

void sipQTextBrowser::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_focusInEvent);

    if (!meth)
    {
        QTextEdit::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

void sipQTextBrowser::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_showEvent);

    if (!meth)
    {
        QTextEdit::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t,PyObject *,QShowEvent *);

    sipVH_QtGui_1(sipGILState,meth,a0);
}

void sipQTextBrowser::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_changeEvent);

    if (!meth)
    {
        QTextEdit::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQTextBrowser::wheelEvent(QWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_wheelEvent);

    if (!meth)
    {
        QTextEdit::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t,PyObject *,QWheelEvent *);

    sipVH_QtGui_5(sipGILState,meth,a0);
}

QMimeData * sipQTextBrowser::createMimeDataFromSelection() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_createMimeDataFromSelection);

    if (!meth)
        return QTextEdit::createMimeDataFromSelection();

    extern QMimeData * sipVH_QtGui_61(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_61(sipGILState,meth);
}

bool sipQTextBrowser::canInsertFromMimeData(const QMimeData *a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_canInsertFromMimeData);

    if (!meth)
        return QTextEdit::canInsertFromMimeData(a0);

    extern bool sipVH_QtGui_60(sip_gilstate_t,PyObject *,const QMimeData *);

    return sipVH_QtGui_60(sipGILState,meth,a0);
}

void sipQTextBrowser::insertFromMimeData(const QMimeData *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_insertFromMimeData);

    if (!meth)
    {
        QTextEdit::insertFromMimeData(a0);
        return;
    }

    extern void sipVH_QtGui_59(sip_gilstate_t,PyObject *,const QMimeData *);

    sipVH_QtGui_59(sipGILState,meth,a0);
}

void sipQTextBrowser::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!meth)
    {
        QTextEdit::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t,PyObject *,QInputMethodEvent *);

    sipVH_QtGui_13(sipGILState,meth,a0);
}

QVariant sipQTextBrowser::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!meth)
        return QTextEdit::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t,PyObject *,Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState,meth,a0);
}

void sipQTextBrowser::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!meth)
    {
        QTextEdit::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtGui_32(sip_gilstate_t,PyObject *,int,int);

    sipVH_QtGui_32(sipGILState,meth,a0,a1);
}

QSize sipQTextBrowser::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!meth)
        return QAbstractScrollArea::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_4(sipGILState,meth);
}

QSize sipQTextBrowser::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QAbstractScrollArea::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_4(sipGILState,meth);
}

bool sipQTextBrowser::viewportEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_viewportEvent);

    if (!meth)
        return QAbstractScrollArea::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

int sipQTextBrowser::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

void sipQTextBrowser::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_setVisible);

    if (!meth)
    {
        QWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

int sipQTextBrowser::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QWidget::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

QPaintEngine * sipQTextBrowser::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QWidget::paintEngine();

    extern QPaintEngine * sipVH_QtGui_27(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_27(sipGILState,meth);
}

void sipQTextBrowser::enterEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_enterEvent);

    if (!meth)
    {
        QWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQTextBrowser::leaveEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_leaveEvent);

    if (!meth)
    {
        QWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQTextBrowser::moveEvent(QMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_moveEvent);

    if (!meth)
    {
        QWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t,PyObject *,QMoveEvent *);

    sipVH_QtGui_23(sipGILState,meth,a0);
}

void sipQTextBrowser::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_closeEvent);

    if (!meth)
    {
        QWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t,PyObject *,QCloseEvent *);

    sipVH_QtGui_22(sipGILState,meth,a0);
}

void sipQTextBrowser::tabletEvent(QTabletEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_tabletEvent);

    if (!meth)
    {
        QWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t,PyObject *,QTabletEvent *);

    sipVH_QtGui_20(sipGILState,meth,a0);
}

void sipQTextBrowser::actionEvent(QActionEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_actionEvent);

    if (!meth)
    {
        QWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t,PyObject *,QActionEvent *);

    sipVH_QtGui_19(sipGILState,meth,a0);
}

void sipQTextBrowser::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_hideEvent);

    if (!meth)
    {
        QWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t,PyObject *,QHideEvent *);

    sipVH_QtGui_0(sipGILState,meth,a0);
}

int sipQTextBrowser::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[47]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QWidget::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t,PyObject *,QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState,meth,a0);
}

void sipQTextBrowser::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_enabledChange);

    if (!meth)
    {
        QWidget::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQTextBrowser::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_paletteChange);

    if (!meth)
    {
        QWidget::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t,PyObject *,const QPalette&);

    sipVH_QtGui_10(sipGILState,meth,a0);
}

void sipQTextBrowser::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_fontChange);

    if (!meth)
    {
        QWidget::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t,PyObject *,const QFont&);

    sipVH_QtGui_9(sipGILState,meth,a0);
}

void sipQTextBrowser::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_windowActivationChange);

    if (!meth)
    {
        QWidget::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQTextBrowser::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_languageChange);

    if (!meth)
    {
        QWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

bool sipQTextBrowser::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQTextBrowser::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQTextBrowser::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQTextBrowser::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQTextBrowser::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[57],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QTextBrowser_source, "QTextBrowser.source() -> QUrl");

extern "C" {static PyObject *meth_QTextBrowser_source(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_source(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            QUrl *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(sipCpp->source());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_source, doc_QTextBrowser_source);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_searchPaths, "QTextBrowser.searchPaths() -> QStringList");

extern "C" {static PyObject *meth_QTextBrowser_searchPaths(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_searchPaths(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->searchPaths());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_searchPaths, doc_QTextBrowser_searchPaths);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_setSearchPaths, "QTextBrowser.setSearchPaths(QStringList)");

extern "C" {static PyObject *meth_QTextBrowser_setSearchPaths(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_setSearchPaths(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList * a0;
        int a0State = 0;
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSearchPaths(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_setSearchPaths, doc_QTextBrowser_setSearchPaths);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_loadResource, "QTextBrowser.loadResource(int, QUrl) -> QVariant");

extern "C" {static PyObject *meth_QTextBrowser_loadResource(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_loadResource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QUrl * a1;
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTextBrowser, &sipCpp, &a0, sipType_QUrl, &a1))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QTextBrowser::loadResource(a0,*a1) : sipCpp->loadResource(a0,*a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_loadResource, doc_QTextBrowser_loadResource);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_setSource, "QTextBrowser.setSource(QUrl)");

extern "C" {static PyObject *meth_QTextBrowser_setSource(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_setSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QUrl * a0;
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextBrowser::setSource(*a0) : sipCpp->setSource(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_setSource, doc_QTextBrowser_setSource);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_backward, "QTextBrowser.backward()");

extern "C" {static PyObject *meth_QTextBrowser_backward(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_backward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextBrowser::backward() : sipCpp->backward());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_backward, doc_QTextBrowser_backward);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_forward, "QTextBrowser.forward()");

extern "C" {static PyObject *meth_QTextBrowser_forward(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_forward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextBrowser::forward() : sipCpp->forward());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_forward, doc_QTextBrowser_forward);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_home, "QTextBrowser.home()");

extern "C" {static PyObject *meth_QTextBrowser_home(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_home(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextBrowser::home() : sipCpp->home());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_home, doc_QTextBrowser_home);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_reload, "QTextBrowser.reload()");

extern "C" {static PyObject *meth_QTextBrowser_reload(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_reload(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextBrowser::reload() : sipCpp->reload());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_reload, doc_QTextBrowser_reload);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_event, "QTextBrowser.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QTextBrowser_event(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTextBrowser::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_event, doc_QTextBrowser_event);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_keyPressEvent, "QTextBrowser.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QTextBrowser_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextBrowser::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_keyPressEvent, doc_QTextBrowser_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_mouseMoveEvent, "QTextBrowser.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTextBrowser_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextBrowser::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_mouseMoveEvent, doc_QTextBrowser_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_mousePressEvent, "QTextBrowser.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTextBrowser_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextBrowser::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_mousePressEvent, doc_QTextBrowser_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_mouseReleaseEvent, "QTextBrowser.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTextBrowser_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextBrowser::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_mouseReleaseEvent, doc_QTextBrowser_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_focusOutEvent, "QTextBrowser.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QTextBrowser_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextBrowser::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_focusOutEvent, doc_QTextBrowser_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_focusNextPrevChild, "QTextBrowser.focusNextPrevChild(bool) -> bool");

extern "C" {static PyObject *meth_QTextBrowser_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QTextBrowser, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTextBrowser::focusNextPrevChild(a0) : sipCpp->focusNextPrevChild(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_focusNextPrevChild, doc_QTextBrowser_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_paintEvent, "QTextBrowser.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QTextBrowser_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent * a0;
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QPaintEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTextBrowser::paintEvent(a0) : sipCpp->paintEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_paintEvent, doc_QTextBrowser_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_isBackwardAvailable, "QTextBrowser.isBackwardAvailable() -> bool");

extern "C" {static PyObject *meth_QTextBrowser_isBackwardAvailable(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_isBackwardAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isBackwardAvailable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_isBackwardAvailable, doc_QTextBrowser_isBackwardAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_isForwardAvailable, "QTextBrowser.isForwardAvailable() -> bool");

extern "C" {static PyObject *meth_QTextBrowser_isForwardAvailable(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_isForwardAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isForwardAvailable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_isForwardAvailable, doc_QTextBrowser_isForwardAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_clearHistory, "QTextBrowser.clearHistory()");

extern "C" {static PyObject *meth_QTextBrowser_clearHistory(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_clearHistory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearHistory();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_clearHistory, doc_QTextBrowser_clearHistory);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_openExternalLinks, "QTextBrowser.openExternalLinks() -> bool");

extern "C" {static PyObject *meth_QTextBrowser_openExternalLinks(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_openExternalLinks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->openExternalLinks();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_openExternalLinks, doc_QTextBrowser_openExternalLinks);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_setOpenExternalLinks, "QTextBrowser.setOpenExternalLinks(bool)");

extern "C" {static PyObject *meth_QTextBrowser_setOpenExternalLinks(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_setOpenExternalLinks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextBrowser, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOpenExternalLinks(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_setOpenExternalLinks, doc_QTextBrowser_setOpenExternalLinks);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_openLinks, "QTextBrowser.openLinks() -> bool");

extern "C" {static PyObject *meth_QTextBrowser_openLinks(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_openLinks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->openLinks();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_openLinks, doc_QTextBrowser_openLinks);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_setOpenLinks, "QTextBrowser.setOpenLinks(bool)");

extern "C" {static PyObject *meth_QTextBrowser_setOpenLinks(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_setOpenLinks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextBrowser, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOpenLinks(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_setOpenLinks, doc_QTextBrowser_setOpenLinks);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_historyTitle, "QTextBrowser.historyTitle(int) -> QString");

extern "C" {static PyObject *meth_QTextBrowser_historyTitle(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_historyTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextBrowser, &sipCpp, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->historyTitle(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_historyTitle, doc_QTextBrowser_historyTitle);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_historyUrl, "QTextBrowser.historyUrl(int) -> QUrl");

extern "C" {static PyObject *meth_QTextBrowser_historyUrl(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_historyUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextBrowser, &sipCpp, &a0))
        {
            QUrl *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(sipCpp->historyUrl(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_historyUrl, doc_QTextBrowser_historyUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_backwardHistoryCount, "QTextBrowser.backwardHistoryCount() -> int");

extern "C" {static PyObject *meth_QTextBrowser_backwardHistoryCount(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_backwardHistoryCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->backwardHistoryCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_backwardHistoryCount, doc_QTextBrowser_backwardHistoryCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_forwardHistoryCount, "QTextBrowser.forwardHistoryCount() -> int");

extern "C" {static PyObject *meth_QTextBrowser_forwardHistoryCount(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_forwardHistoryCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->forwardHistoryCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_forwardHistoryCount, doc_QTextBrowser_forwardHistoryCount);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextBrowser(void *, const sipTypeDef *);}
static void *cast_QTextBrowser(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTextBrowser)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QTextEdit)->ctd_cast((QTextEdit *)(QTextBrowser *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextBrowser(void *, int);}
static void release_QTextBrowser(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTextBrowser *>(sipCppV);
    else
        delete reinterpret_cast<QTextBrowser *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTextBrowser(sipSimpleWrapper *);}
static void dealloc_QTextBrowser(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTextBrowser *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTextBrowser(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QTextBrowser(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QTextBrowser(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTextBrowser *sipCpp = 0;

    {
        QWidget * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTextBrowser(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextBrowser[] = {{653, 255, 1}};


static PyMethodDef methods_QTextBrowser[] = {
    {SIP_MLNAME_CAST(sipName_backward), meth_QTextBrowser_backward, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_backward)},
    {SIP_MLNAME_CAST(sipName_backwardHistoryCount), meth_QTextBrowser_backwardHistoryCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_backwardHistoryCount)},
    {SIP_MLNAME_CAST(sipName_clearHistory), meth_QTextBrowser_clearHistory, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_clearHistory)},
    {SIP_MLNAME_CAST(sipName_event), meth_QTextBrowser_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_event)},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QTextBrowser_focusNextPrevChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QTextBrowser_focusOutEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_forward), meth_QTextBrowser_forward, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_forward)},
    {SIP_MLNAME_CAST(sipName_forwardHistoryCount), meth_QTextBrowser_forwardHistoryCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_forwardHistoryCount)},
    {SIP_MLNAME_CAST(sipName_historyTitle), meth_QTextBrowser_historyTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_historyTitle)},
    {SIP_MLNAME_CAST(sipName_historyUrl), meth_QTextBrowser_historyUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_historyUrl)},
    {SIP_MLNAME_CAST(sipName_home), meth_QTextBrowser_home, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_home)},
    {SIP_MLNAME_CAST(sipName_isBackwardAvailable), meth_QTextBrowser_isBackwardAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_isBackwardAvailable)},
    {SIP_MLNAME_CAST(sipName_isForwardAvailable), meth_QTextBrowser_isForwardAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_isForwardAvailable)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QTextBrowser_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_loadResource), meth_QTextBrowser_loadResource, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_loadResource)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QTextBrowser_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QTextBrowser_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QTextBrowser_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_openExternalLinks), meth_QTextBrowser_openExternalLinks, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_openExternalLinks)},
    {SIP_MLNAME_CAST(sipName_openLinks), meth_QTextBrowser_openLinks, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_openLinks)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QTextBrowser_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_paintEvent)},
    {SIP_MLNAME_CAST(sipName_reload), meth_QTextBrowser_reload, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_reload)},
    {SIP_MLNAME_CAST(sipName_searchPaths), meth_QTextBrowser_searchPaths, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_searchPaths)},
    {SIP_MLNAME_CAST(sipName_setOpenExternalLinks), meth_QTextBrowser_setOpenExternalLinks, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_setOpenExternalLinks)},
    {SIP_MLNAME_CAST(sipName_setOpenLinks), meth_QTextBrowser_setOpenLinks, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_setOpenLinks)},
    {SIP_MLNAME_CAST(sipName_setSearchPaths), meth_QTextBrowser_setSearchPaths, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_setSearchPaths)},
    {SIP_MLNAME_CAST(sipName_setSource), meth_QTextBrowser_setSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_setSource)},
    {SIP_MLNAME_CAST(sipName_source), meth_QTextBrowser_source, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_source)}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QTextBrowser[] = {
    {"historyChanged()", "\1QTextBrowser.historyChanged()", 0},
    {"anchorClicked(const QUrl&)", "\1QTextBrowser.anchorClicked(QUrl)", 0},
    {"highlighted(const QUrl&)", "\1QTextBrowser.highlighted(QUrl)", 0},
    {"highlighted(const QString&)", "\1QTextBrowser.highlighted(QString)", 0},
    {"sourceChanged(const QUrl&)", "\1QTextBrowser.sourceChanged(QUrl)", 0},
    {"forwardAvailable(bool)", "\1QTextBrowser.forwardAvailable(bool)", 0},
    {"backwardAvailable(bool)", "\1QTextBrowser.backwardAvailable(bool)", 0},
    {0, 0, 0}
};

PyDoc_STRVAR(doc_QTextBrowser, "\1QTextBrowser(QWidget parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QTextBrowser = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QTextBrowser,
        {0}
    },
    {
        sipNameNr_QTextBrowser,
        {0, 0, 1},
        28, methods_QTextBrowser,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTextBrowser,
    -1,
    -1,
    supers_QTextBrowser,
    0,
    init_QTextBrowser,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextBrowser,
    0,
    0,
    0,
    release_QTextBrowser,
    cast_QTextBrowser,
    0,
    0,
    0
},
    &QTextBrowser::staticMetaObject,
    0,
    pyqt4_signals_QTextBrowser
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:03 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 207 "/home/maemo/python-qt4-4.7/sip/QtGui/qtreewidget.sip"
#include <qtreewidget.h>
#line 39 "sipQtGuiQTreeWidget.cpp"

#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 43 "sipQtGuiQTreeWidget.cpp"
#line 128 "/home/maemo/python-qt4-4.7/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 46 "sipQtGuiQTreeWidget.cpp"
#line 82 "/home/maemo/python-qt4-4.7/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 49 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qtreewidget.sip"
#include <qtreewidget.h>
#line 52 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 55 "sipQtGuiQTreeWidget.cpp"
#line 565 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 58 "sipQtGuiQTreeWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 61 "sipQtGuiQTreeWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 64 "sipQtGuiQTreeWidget.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 67 "sipQtGuiQTreeWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 70 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 73 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 76 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 79 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 82 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 85 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 88 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 91 "sipQtGuiQTreeWidget.cpp"
#line 82 "/home/maemo/python-qt4-4.7/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 94 "sipQtGuiQTreeWidget.cpp"
#line 155 "/home/maemo/python-qt4-4.7/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 97 "sipQtGuiQTreeWidget.cpp"
#line 590 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 100 "sipQtGuiQTreeWidget.cpp"
#line 350 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 103 "sipQtGuiQTreeWidget.cpp"
#line 238 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 106 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 109 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 112 "sipQtGuiQTreeWidget.cpp"
#line 1029 "/home/maemo/python-qt4-4.7/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 115 "sipQtGuiQTreeWidget.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 118 "sipQtGuiQTreeWidget.cpp"
#line 399 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 121 "sipQtGuiQTreeWidget.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 124 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 127 "sipQtGuiQTreeWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qheaderview.sip"
#include <qheaderview.h>
#line 130 "sipQtGuiQTreeWidget.cpp"
#line 520 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 539 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 135 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 138 "sipQtGuiQTreeWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 141 "sipQtGuiQTreeWidget.cpp"
#line 428 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "sipQtGuiQTreeWidget.cpp"
#line 379 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "sipQtGuiQTreeWidget.cpp"
#line 619 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "sipQtGuiQTreeWidget.cpp"
#line 607 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 156 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 159 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 162 "sipQtGuiQTreeWidget.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 165 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 168 "sipQtGuiQTreeWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qscrollbar.sip"
#include <qscrollbar.h>
#line 171 "sipQtGuiQTreeWidget.cpp"
#line 490 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "sipQtGuiQTreeWidget.cpp"
#line 279 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "sipQtGuiQTreeWidget.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 180 "sipQtGuiQTreeWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qframe.sip"
#include <qframe.h>
#line 183 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 186 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 189 "sipQtGuiQTreeWidget.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 192 "sipQtGuiQTreeWidget.cpp"
#line 39 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 195 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 198 "sipQtGuiQTreeWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 201 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 204 "sipQtGuiQTreeWidget.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 207 "sipQtGuiQTreeWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 210 "sipQtGuiQTreeWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 213 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 216 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 219 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 222 "sipQtGuiQTreeWidget.cpp"
#line 478 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 225 "sipQtGuiQTreeWidget.cpp"
#line 466 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 228 "sipQtGuiQTreeWidget.cpp"
#line 675 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 231 "sipQtGuiQTreeWidget.cpp"
#line 301 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 234 "sipQtGuiQTreeWidget.cpp"
#line 442 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 237 "sipQtGuiQTreeWidget.cpp"
#line 414 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 240 "sipQtGuiQTreeWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 243 "sipQtGuiQTreeWidget.cpp"
#line 68 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 246 "sipQtGuiQTreeWidget.cpp"
#line 42 "/home/maemo/python-qt4-4.7/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 249 "sipQtGuiQTreeWidget.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 252 "sipQtGuiQTreeWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 255 "sipQtGuiQTreeWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 258 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 261 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 264 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 267 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 270 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 273 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 276 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 279 "sipQtGuiQTreeWidget.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 282 "sipQtGuiQTreeWidget.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 285 "sipQtGuiQTreeWidget.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 288 "sipQtGuiQTreeWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 291 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 294 "sipQtGuiQTreeWidget.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 297 "sipQtGuiQTreeWidget.cpp"


class sipQTreeWidget : public QTreeWidget
{
public:
    sipQTreeWidget(QWidget *);
    virtual ~sipQTreeWidget();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QStringList mimeTypes() const;
    QMimeData * mimeData(const QList<QTreeWidgetItem *>) const;
    bool dropMimeData(QTreeWidgetItem *,int,const QMimeData *,Qt::DropAction);
    Qt::DropActions supportedDropActions() const;
    bool event(QEvent *);
    void dropEvent(QDropEvent *);
    void setSelectionModel(QItemSelectionModel *);
    void setRootIndex(const QModelIndex&);
    void keyboardSearch(const QString&);
    QRect visualRect(const QModelIndex&) const;
    void scrollTo(const QModelIndex&,QAbstractItemView::ScrollHint);
    QModelIndex indexAt(const QPoint&) const;
    void doItemsLayout();
    void reset();
    void dataChanged(const QModelIndex&,const QModelIndex&);
    void selectAll();
    void scrollContentsBy(int,int);
    void rowsInserted(const QModelIndex&,int,int);
    void rowsAboutToBeRemoved(const QModelIndex&,int,int);
    QModelIndex moveCursor(QAbstractItemView::CursorAction,Qt::KeyboardModifiers);
    int horizontalOffset() const;
    int verticalOffset() const;
    void setSelection(const QRect&,QItemSelectionModel::SelectionFlags);
    QRegion visualRegionForSelection(const QItemSelection&) const;
    QModelIndexList selectedIndexes() const;
    void paintEvent(QPaintEvent *);
    void timerEvent(QTimerEvent *);
    void mouseReleaseEvent(QMouseEvent *);
    void drawRow(QPainter *,const QStyleOptionViewItem&,const QModelIndex&) const;
    void drawBranches(QPainter *,const QRect&,const QModelIndex&) const;
    void mousePressEvent(QMouseEvent *);
    void mouseMoveEvent(QMouseEvent *);
    void mouseDoubleClickEvent(QMouseEvent *);
    void keyPressEvent(QKeyEvent *);
    void updateGeometries();
    int sizeHintForColumn(int) const;
    void horizontalScrollbarAction(int);
    bool isIndexHidden(const QModelIndex&) const;
    void dragMoveEvent(QDragMoveEvent *);
    bool viewportEvent(QEvent *);
    void selectionChanged(const QItemSelection&,const QItemSelection&);
    void currentChanged(const QModelIndex&,const QModelIndex&);
    int sizeHintForRow(int) const;
    void updateEditorData();
    void updateEditorGeometries();
    void verticalScrollbarAction(int);
    void verticalScrollbarValueChanged(int);
    void horizontalScrollbarValueChanged(int);
    void closeEditor(QWidget *,QAbstractItemDelegate::EndEditHint);
    void commitData(QWidget *);
    void editorDestroyed(QObject *);
    bool edit(const QModelIndex&,QAbstractItemView::EditTrigger,QEvent *);
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex&,const QEvent *) const;
    void startDrag(Qt::DropActions);
    QStyleOptionViewItem viewOptions() const;
    void dragEnterEvent(QDragEnterEvent *);
    void dragLeaveEvent(QDragLeaveEvent *);
    void focusInEvent(QFocusEvent *);
    void focusOutEvent(QFocusEvent *);
    void resizeEvent(QResizeEvent *);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    void inputMethodEvent(QInputMethodEvent *);
    QSize minimumSizeHint() const;
    QSize sizeHint() const;
    void wheelEvent(QWheelEvent *);
    void contextMenuEvent(QContextMenuEvent *);
    void changeEvent(QEvent *);
    int devType() const;
    void setVisible(bool);
    int heightForWidth(int) const;
    QPaintEngine * paintEngine() const;
    void keyReleaseEvent(QKeyEvent *);
    void enterEvent(QEvent *);
    void leaveEvent(QEvent *);
    void moveEvent(QMoveEvent *);
    void closeEvent(QCloseEvent *);
    void tabletEvent(QTabletEvent *);
    void actionEvent(QActionEvent *);
    void showEvent(QShowEvent *);
    void hideEvent(QHideEvent *);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void enabledChange(bool);
    void paletteChange(const QPalette&);
    void fontChange(const QFont&);
    void windowActivationChange(bool);
    void languageChange();
    bool eventFilter(QObject *,QEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTreeWidget(const sipQTreeWidget &);
    sipQTreeWidget &operator = (const sipQTreeWidget &);

    char sipPyMethods[92];
};

sipQTreeWidget::sipQTreeWidget(QWidget *a0): QTreeWidget(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidget::~sipQTreeWidget()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTreeWidget::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QTreeWidget);
}

int sipQTreeWidget::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTreeWidget::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QTreeWidget,_c,_id,_a);

    return _id;
}

void *sipQTreeWidget::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QTreeWidget,_clname)) ? this : QTreeWidget::qt_metacast(_clname);
}

QStringList sipQTreeWidget::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_mimeTypes);

    if (!meth)
        return QTreeWidget::mimeTypes();

    typedef QStringList (*sipVH_QtCore_27)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_27)(sipModuleAPI_QtGui_QtCore->em_virthandlers[27]))(sipGILState,meth);
}

QMimeData * sipQTreeWidget::mimeData(const QList<QTreeWidgetItem *> a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_mimeData);

    if (!meth)
        return QTreeWidget::mimeData(a0);

    extern QMimeData * sipVH_QtGui_39(sip_gilstate_t,PyObject *,const QList<QTreeWidgetItem *>);

    return sipVH_QtGui_39(sipGILState,meth,a0);
}

bool sipQTreeWidget::dropMimeData(QTreeWidgetItem *a0,int a1,const QMimeData *a2,Qt::DropAction a3)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_dropMimeData);

    if (!meth)
        return QTreeWidget::dropMimeData(a0,a1,a2,a3);

    extern bool sipVH_QtGui_38(sip_gilstate_t,PyObject *,QTreeWidgetItem *,int,const QMimeData *,Qt::DropAction);

    return sipVH_QtGui_38(sipGILState,meth,a0,a1,a2,a3);
}

Qt::DropActions sipQTreeWidget::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!meth)
        return QTreeWidget::supportedDropActions();

    typedef Qt::DropActions (*sipVH_QtCore_53)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_53)(sipModuleAPI_QtGui_QtCore->em_virthandlers[53]))(sipGILState,meth);
}

bool sipQTreeWidget::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QTreeWidget::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

void sipQTreeWidget::dropEvent(QDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_dropEvent);

    if (!meth)
    {
        QTreeWidget::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t,PyObject *,QDropEvent *);

    sipVH_QtGui_15(sipGILState,meth,a0);
}

void sipQTreeWidget::setSelectionModel(QItemSelectionModel *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_setSelectionModel);

    if (!meth)
    {
        QTreeWidget::setSelectionModel(a0);
        return;
    }

    extern void sipVH_QtGui_37(sip_gilstate_t,PyObject *,QItemSelectionModel *);

    sipVH_QtGui_37(sipGILState,meth,a0);
}

void sipQTreeWidget::setRootIndex(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_setRootIndex);

    if (!meth)
    {
        QTreeView::setRootIndex(a0);
        return;
    }

    typedef void (*sipVH_QtCore_51)(sip_gilstate_t,PyObject *,const QModelIndex&);

    ((sipVH_QtCore_51)(sipModuleAPI_QtGui_QtCore->em_virthandlers[51]))(sipGILState,meth,a0);
}

void sipQTreeWidget::keyboardSearch(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_keyboardSearch);

    if (!meth)
    {
        QTreeView::keyboardSearch(a0);
        return;
    }

    typedef void (*sipVH_QtCore_33)(sip_gilstate_t,PyObject *,const QString&);

    ((sipVH_QtCore_33)(sipModuleAPI_QtGui_QtCore->em_virthandlers[33]))(sipGILState,meth,a0);
}

QRect sipQTreeWidget::visualRect(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_visualRect);

    if (!meth)
        return QTreeView::visualRect(a0);

    extern QRect sipVH_QtGui_56(sip_gilstate_t,PyObject *,const QModelIndex&);

    return sipVH_QtGui_56(sipGILState,meth,a0);
}

void sipQTreeWidget::scrollTo(const QModelIndex& a0,QAbstractItemView::ScrollHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_scrollTo);

    if (!meth)
    {
        QTreeView::scrollTo(a0,a1);
        return;
    }

    extern void sipVH_QtGui_55(sip_gilstate_t,PyObject *,const QModelIndex&,QAbstractItemView::ScrollHint);

    sipVH_QtGui_55(sipGILState,meth,a0,a1);
}

QModelIndex sipQTreeWidget::indexAt(const QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_indexAt);

    if (!meth)
        return QTreeView::indexAt(a0);

    extern QModelIndex sipVH_QtGui_54(sip_gilstate_t,PyObject *,const QPoint&);

    return sipVH_QtGui_54(sipGILState,meth,a0);
}

void sipQTreeWidget::doItemsLayout()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_doItemsLayout);

    if (!meth)
    {
        QTreeView::doItemsLayout();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQTreeWidget::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_reset);

    if (!meth)
    {
        QTreeView::reset();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQTreeWidget::dataChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_dataChanged);

    if (!meth)
    {
        QTreeView::dataChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_45(sip_gilstate_t,PyObject *,const QModelIndex&,const QModelIndex&);

    sipVH_QtGui_45(sipGILState,meth,a0,a1);
}

void sipQTreeWidget::selectAll()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_selectAll);

    if (!meth)
    {
        QTreeView::selectAll();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQTreeWidget::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!meth)
    {
        QTreeView::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtGui_32(sip_gilstate_t,PyObject *,int,int);

    sipVH_QtGui_32(sipGILState,meth,a0,a1);
}

void sipQTreeWidget::rowsInserted(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_rowsInserted);

    if (!meth)
    {
        QTreeView::rowsInserted(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_53(sip_gilstate_t,PyObject *,const QModelIndex&,int,int);

    sipVH_QtGui_53(sipGILState,meth,a0,a1,a2);
}

void sipQTreeWidget::rowsAboutToBeRemoved(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_rowsAboutToBeRemoved);

    if (!meth)
    {
        QTreeView::rowsAboutToBeRemoved(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_53(sip_gilstate_t,PyObject *,const QModelIndex&,int,int);

    sipVH_QtGui_53(sipGILState,meth,a0,a1,a2);
}

QModelIndex sipQTreeWidget::moveCursor(QAbstractItemView::CursorAction a0,Qt::KeyboardModifiers a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_moveCursor);

    if (!meth)
        return QTreeView::moveCursor(a0,a1);

    extern QModelIndex sipVH_QtGui_52(sip_gilstate_t,PyObject *,QAbstractItemView::CursorAction,Qt::KeyboardModifiers);

    return sipVH_QtGui_52(sipGILState,meth,a0,a1);
}

int sipQTreeWidget::horizontalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_horizontalOffset);

    if (!meth)
        return QTreeView::horizontalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

int sipQTreeWidget::verticalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_verticalOffset);

    if (!meth)
        return QTreeView::verticalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

void sipQTreeWidget::setSelection(const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_setSelection);

    if (!meth)
    {
        QTreeView::setSelection(a0,a1);
        return;
    }

    extern void sipVH_QtGui_51(sip_gilstate_t,PyObject *,const QRect&,QItemSelectionModel::SelectionFlags);

    sipVH_QtGui_51(sipGILState,meth,a0,a1);
}

QRegion sipQTreeWidget::visualRegionForSelection(const QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_visualRegionForSelection);

    if (!meth)
        return QTreeView::visualRegionForSelection(a0);

    extern QRegion sipVH_QtGui_50(sip_gilstate_t,PyObject *,const QItemSelection&);

    return sipVH_QtGui_50(sipGILState,meth,a0);
}

QModelIndexList sipQTreeWidget::selectedIndexes() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_selectedIndexes);

    if (!meth)
        return QTreeView::selectedIndexes();

    extern QList<QModelIndex> sipVH_QtGui_49(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_49(sipGILState,meth);
}

void sipQTreeWidget::paintEvent(QPaintEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_paintEvent);

    if (!meth)
    {
        QTreeView::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t,PyObject *,QPaintEvent *);

    sipVH_QtGui_3(sipGILState,meth,a0);
}

void sipQTreeWidget::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QTreeView::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQTreeWidget::mouseReleaseEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!meth)
    {
        QTreeView::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQTreeWidget::drawRow(QPainter *a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_drawRow);

    if (!meth)
    {
        QTreeView::drawRow(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_48(sip_gilstate_t,PyObject *,QPainter *,const QStyleOptionViewItem&,const QModelIndex&);

    sipVH_QtGui_48(sipGILState,meth,a0,a1,a2);
}

void sipQTreeWidget::drawBranches(QPainter *a0,const QRect& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_drawBranches);

    if (!meth)
    {
        QTreeView::drawBranches(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_47(sip_gilstate_t,PyObject *,QPainter *,const QRect&,const QModelIndex&);

    sipVH_QtGui_47(sipGILState,meth,a0,a1,a2);
}

void sipQTreeWidget::mousePressEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_mousePressEvent);

    if (!meth)
    {
        QTreeView::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQTreeWidget::mouseMoveEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!meth)
    {
        QTreeView::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQTreeWidget::mouseDoubleClickEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!meth)
    {
        QTreeView::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQTreeWidget::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_keyPressEvent);

    if (!meth)
    {
        QTreeView::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQTreeWidget::updateGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_updateGeometries);

    if (!meth)
    {
        QTreeView::updateGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

int sipQTreeWidget::sizeHintForColumn(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,NULL,sipName_sizeHintForColumn);

    if (!meth)
        return QTreeView::sizeHintForColumn(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

void sipQTreeWidget::horizontalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_horizontalScrollbarAction);

    if (!meth)
    {
        QTreeView::horizontalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState,meth,a0);
}

bool sipQTreeWidget::isIndexHidden(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_isIndexHidden);

    if (!meth)
        return QTreeView::isIndexHidden(a0);

    typedef bool (*sipVH_QtCore_42)(sip_gilstate_t,PyObject *,const QModelIndex&);

    return ((sipVH_QtCore_42)(sipModuleAPI_QtGui_QtCore->em_virthandlers[42]))(sipGILState,meth,a0);
}

void sipQTreeWidget::dragMoveEvent(QDragMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!meth)
    {
        QTreeView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t,PyObject *,QDragMoveEvent *);

    sipVH_QtGui_17(sipGILState,meth,a0);
}

bool sipQTreeWidget::viewportEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_viewportEvent);

    if (!meth)
        return QTreeView::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

void sipQTreeWidget::selectionChanged(const QItemSelection& a0,const QItemSelection& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_selectionChanged);

    if (!meth)
    {
        QTreeView::selectionChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_46(sip_gilstate_t,PyObject *,const QItemSelection&,const QItemSelection&);

    sipVH_QtGui_46(sipGILState,meth,a0,a1);
}

void sipQTreeWidget::currentChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_currentChanged);

    if (!meth)
    {
        QTreeView::currentChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_45(sip_gilstate_t,PyObject *,const QModelIndex&,const QModelIndex&);

    sipVH_QtGui_45(sipGILState,meth,a0,a1);
}

int sipQTreeWidget::sizeHintForRow(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,NULL,sipName_sizeHintForRow);

    if (!meth)
        return QAbstractItemView::sizeHintForRow(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

void sipQTreeWidget::updateEditorData()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_updateEditorData);

    if (!meth)
    {
        QAbstractItemView::updateEditorData();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQTreeWidget::updateEditorGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_updateEditorGeometries);

    if (!meth)
    {
        QAbstractItemView::updateEditorGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQTreeWidget::verticalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_verticalScrollbarAction);

    if (!meth)
    {
        QAbstractItemView::verticalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState,meth,a0);
}

void sipQTreeWidget::verticalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_verticalScrollbarValueChanged);

    if (!meth)
    {
        QAbstractItemView::verticalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState,meth,a0);
}

void sipQTreeWidget::horizontalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_horizontalScrollbarValueChanged);

    if (!meth)
    {
        QAbstractItemView::horizontalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState,meth,a0);
}

void sipQTreeWidget::closeEditor(QWidget *a0,QAbstractItemDelegate::EndEditHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_closeEditor);

    if (!meth)
    {
        QAbstractItemView::closeEditor(a0,a1);
        return;
    }

    extern void sipVH_QtGui_236(sip_gilstate_t,PyObject *,QWidget *,QAbstractItemDelegate::EndEditHint);

    sipVH_QtGui_236(sipGILState,meth,a0,a1);
}

void sipQTreeWidget::commitData(QWidget *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_commitData);

    if (!meth)
    {
        QAbstractItemView::commitData(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t,PyObject *,QWidget *);

    sipVH_QtGui_7(sipGILState,meth,a0);
}

void sipQTreeWidget::editorDestroyed(QObject *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_editorDestroyed);

    if (!meth)
    {
        QAbstractItemView::editorDestroyed(a0);
        return;
    }

    extern void sipVH_QtGui_235(sip_gilstate_t,PyObject *,QObject *);

    sipVH_QtGui_235(sipGILState,meth,a0);
}

bool sipQTreeWidget::edit(const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent *a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_edit);

    if (!meth)
        return QAbstractItemView::edit(a0,a1,a2);

    extern bool sipVH_QtGui_234(sip_gilstate_t,PyObject *,const QModelIndex&,QAbstractItemView::EditTrigger,QEvent *);

    return sipVH_QtGui_234(sipGILState,meth,a0,a1,a2);
}

QItemSelectionModel::SelectionFlags sipQTreeWidget::selectionCommand(const QModelIndex& a0,const QEvent *a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[52]),sipPySelf,NULL,sipName_selectionCommand);

    if (!meth)
        return QAbstractItemView::selectionCommand(a0,a1);

    extern QItemSelectionModel::SelectionFlags sipVH_QtGui_233(sip_gilstate_t,PyObject *,const QModelIndex&,const QEvent *);

    return sipVH_QtGui_233(sipGILState,meth,a0,a1);
}

void sipQTreeWidget::startDrag(Qt::DropActions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_startDrag);

    if (!meth)
    {
        QAbstractItemView::startDrag(a0);
        return;
    }

    extern void sipVH_QtGui_153(sip_gilstate_t,PyObject *,Qt::DropActions);

    sipVH_QtGui_153(sipGILState,meth,a0);
}

QStyleOptionViewItem sipQTreeWidget::viewOptions() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[54]),sipPySelf,NULL,sipName_viewOptions);

    if (!meth)
        return QAbstractItemView::viewOptions();

    extern QStyleOptionViewItem sipVH_QtGui_71(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_71(sipGILState,meth);
}

void sipQTreeWidget::dragEnterEvent(QDragEnterEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!meth)
    {
        QAbstractItemView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t,PyObject *,QDragEnterEvent *);

    sipVH_QtGui_18(sipGILState,meth,a0);
}

void sipQTreeWidget::dragLeaveEvent(QDragLeaveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!meth)
    {
        QAbstractItemView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t,PyObject *,QDragLeaveEvent *);

    sipVH_QtGui_16(sipGILState,meth,a0);
}

void sipQTreeWidget::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[57],sipPySelf,NULL,sipName_focusInEvent);

    if (!meth)
    {
        QAbstractItemView::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

void sipQTreeWidget::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[58],sipPySelf,NULL,sipName_focusOutEvent);

    if (!meth)
    {
        QAbstractItemView::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

void sipQTreeWidget::resizeEvent(QResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[59],sipPySelf,NULL,sipName_resizeEvent);

    if (!meth)
    {
        QAbstractItemView::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t,PyObject *,QResizeEvent *);

    sipVH_QtGui_2(sipGILState,meth,a0);
}

QVariant sipQTreeWidget::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[60]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!meth)
        return QAbstractItemView::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t,PyObject *,Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState,meth,a0);
}

bool sipQTreeWidget::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[61],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!meth)
        return QAbstractItemView::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_11(sip_gilstate_t,PyObject *,bool);

    return sipVH_QtGui_11(sipGILState,meth,a0);
}

void sipQTreeWidget::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[62],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!meth)
    {
        QAbstractItemView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t,PyObject *,QInputMethodEvent *);

    sipVH_QtGui_13(sipGILState,meth,a0);
}

QSize sipQTreeWidget::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[63]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!meth)
        return QAbstractScrollArea::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_4(sipGILState,meth);
}

QSize sipQTreeWidget::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[64]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QAbstractScrollArea::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_4(sipGILState,meth);
}

void sipQTreeWidget::wheelEvent(QWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[65],sipPySelf,NULL,sipName_wheelEvent);

    if (!meth)
    {
        QAbstractScrollArea::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t,PyObject *,QWheelEvent *);

    sipVH_QtGui_5(sipGILState,meth,a0);
}

void sipQTreeWidget::contextMenuEvent(QContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[66],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!meth)
    {
        QAbstractScrollArea::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t,PyObject *,QContextMenuEvent *);

    sipVH_QtGui_21(sipGILState,meth,a0);
}

void sipQTreeWidget::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[67],sipPySelf,NULL,sipName_changeEvent);

    if (!meth)
    {
        QFrame::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

int sipQTreeWidget::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[68]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

void sipQTreeWidget::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[69],sipPySelf,NULL,sipName_setVisible);

    if (!meth)
    {
        QWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

int sipQTreeWidget::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[70]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QWidget::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

QPaintEngine * sipQTreeWidget::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[71]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QWidget::paintEngine();

    extern QPaintEngine * sipVH_QtGui_27(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_27(sipGILState,meth);
}

void sipQTreeWidget::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[72],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!meth)
    {
        QWidget::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQTreeWidget::enterEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[73],sipPySelf,NULL,sipName_enterEvent);

    if (!meth)
    {
        QWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQTreeWidget::leaveEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[74],sipPySelf,NULL,sipName_leaveEvent);

    if (!meth)
    {
        QWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQTreeWidget::moveEvent(QMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[75],sipPySelf,NULL,sipName_moveEvent);

    if (!meth)
    {
        QWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t,PyObject *,QMoveEvent *);

    sipVH_QtGui_23(sipGILState,meth,a0);
}

void sipQTreeWidget::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[76],sipPySelf,NULL,sipName_closeEvent);

    if (!meth)
    {
        QWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t,PyObject *,QCloseEvent *);

    sipVH_QtGui_22(sipGILState,meth,a0);
}

void sipQTreeWidget::tabletEvent(QTabletEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[77],sipPySelf,NULL,sipName_tabletEvent);

    if (!meth)
    {
        QWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t,PyObject *,QTabletEvent *);

    sipVH_QtGui_20(sipGILState,meth,a0);
}

void sipQTreeWidget::actionEvent(QActionEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[78],sipPySelf,NULL,sipName_actionEvent);

    if (!meth)
    {
        QWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t,PyObject *,QActionEvent *);

    sipVH_QtGui_19(sipGILState,meth,a0);
}

void sipQTreeWidget::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[79],sipPySelf,NULL,sipName_showEvent);

    if (!meth)
    {
        QWidget::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t,PyObject *,QShowEvent *);

    sipVH_QtGui_1(sipGILState,meth,a0);
}

void sipQTreeWidget::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[80],sipPySelf,NULL,sipName_hideEvent);

    if (!meth)
    {
        QWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t,PyObject *,QHideEvent *);

    sipVH_QtGui_0(sipGILState,meth,a0);
}

int sipQTreeWidget::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[81]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QWidget::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t,PyObject *,QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState,meth,a0);
}

void sipQTreeWidget::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[82],sipPySelf,NULL,sipName_enabledChange);

    if (!meth)
    {
        QWidget::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQTreeWidget::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[83],sipPySelf,NULL,sipName_paletteChange);

    if (!meth)
    {
        QWidget::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t,PyObject *,const QPalette&);

    sipVH_QtGui_10(sipGILState,meth,a0);
}

void sipQTreeWidget::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[84],sipPySelf,NULL,sipName_fontChange);

    if (!meth)
    {
        QWidget::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t,PyObject *,const QFont&);

    sipVH_QtGui_9(sipGILState,meth,a0);
}

void sipQTreeWidget::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[85],sipPySelf,NULL,sipName_windowActivationChange);

    if (!meth)
    {
        QWidget::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQTreeWidget::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[86],sipPySelf,NULL,sipName_languageChange);

    if (!meth)
    {
        QWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

bool sipQTreeWidget::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[87],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQTreeWidget::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[88],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQTreeWidget::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[89],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQTreeWidget::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[90],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQTreeWidget::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[91],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QTreeWidget_columnCount, "QTreeWidget.columnCount() -> int");

extern "C" {static PyObject *meth_QTreeWidget_columnCount(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_columnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->columnCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_columnCount, doc_QTreeWidget_columnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setColumnCount, "QTreeWidget.setColumnCount(int)");

extern "C" {static PyObject *meth_QTreeWidget_setColumnCount(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setColumnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColumnCount(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setColumnCount, doc_QTreeWidget_setColumnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_topLevelItem, "QTreeWidget.topLevelItem(int) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_topLevelItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_topLevelItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->topLevelItem(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_topLevelItem, doc_QTreeWidget_topLevelItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_topLevelItemCount, "QTreeWidget.topLevelItemCount() -> int");

extern "C" {static PyObject *meth_QTreeWidget_topLevelItemCount(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_topLevelItemCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->topLevelItemCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_topLevelItemCount, doc_QTreeWidget_topLevelItemCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_insertTopLevelItem, "QTreeWidget.insertTopLevelItem(int, QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidget_insertTopLevelItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_insertTopLevelItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidgetItem * a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0, sipType_QTreeWidgetItem, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertTopLevelItem(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_insertTopLevelItem, doc_QTreeWidget_insertTopLevelItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_addTopLevelItem, "QTreeWidget.addTopLevelItem(QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidget_addTopLevelItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_addTopLevelItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addTopLevelItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_addTopLevelItem, doc_QTreeWidget_addTopLevelItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_takeTopLevelItem, "QTreeWidget.takeTopLevelItem(int) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_takeTopLevelItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_takeTopLevelItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->takeTopLevelItem(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_takeTopLevelItem, doc_QTreeWidget_takeTopLevelItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_indexOfTopLevelItem, "QTreeWidget.indexOfTopLevelItem(QTreeWidgetItem) -> int");

extern "C" {static PyObject *meth_QTreeWidget_indexOfTopLevelItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_indexOfTopLevelItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOfTopLevelItem(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_indexOfTopLevelItem, doc_QTreeWidget_indexOfTopLevelItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_insertTopLevelItems, "QTreeWidget.insertTopLevelItems(int, list-of-QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidget_insertTopLevelItems(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_insertTopLevelItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QList<QTreeWidgetItem *> * a1;
        int a1State = 0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ3", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0, sipType_QList_0101QTreeWidgetItem,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertTopLevelItems(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QTreeWidgetItem *> *>(a1),sipType_QList_0101QTreeWidgetItem,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_insertTopLevelItems, doc_QTreeWidget_insertTopLevelItems);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_addTopLevelItems, "QTreeWidget.addTopLevelItems(list-of-QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidget_addTopLevelItems(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_addTopLevelItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QTreeWidgetItem *> * a0;
        int a0State = 0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ3", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QList_0101QTreeWidgetItem,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addTopLevelItems(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QTreeWidgetItem *> *>(a0),sipType_QList_0101QTreeWidgetItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_addTopLevelItems, doc_QTreeWidget_addTopLevelItems);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_headerItem, "QTreeWidget.headerItem() -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_headerItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_headerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->headerItem();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_headerItem, doc_QTreeWidget_headerItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setHeaderItem, "QTreeWidget.setHeaderItem(QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidget_setHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHeaderItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setHeaderItem, doc_QTreeWidget_setHeaderItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setHeaderLabels, "QTreeWidget.setHeaderLabels(QStringList)");

extern "C" {static PyObject *meth_QTreeWidget_setHeaderLabels(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setHeaderLabels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList * a0;
        int a0State = 0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHeaderLabels(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setHeaderLabels, doc_QTreeWidget_setHeaderLabels);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_currentItem, "QTreeWidget.currentItem() -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_currentItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_currentItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentItem();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_currentItem, doc_QTreeWidget_currentItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_currentColumn, "QTreeWidget.currentColumn() -> int");

extern "C" {static PyObject *meth_QTreeWidget_currentColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_currentColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentColumn();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_currentColumn, doc_QTreeWidget_currentColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setCurrentItem, "QTreeWidget.setCurrentItem(QTreeWidgetItem)\n"
    "QTreeWidget.setCurrentItem(QTreeWidgetItem, int)\n"
    "QTreeWidget.setCurrentItem(QTreeWidgetItem, int, QItemSelectionModel.SelectionFlags)");

extern "C" {static PyObject *meth_QTreeWidget_setCurrentItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setCurrentItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QTreeWidgetItem * a0;
        int a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentItem(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QTreeWidgetItem * a0;
        int a1;
        QItemSelectionModel::SelectionFlags * a2;
        int a2State = 0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8iJ1", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1, sipType_QItemSelectionModel_SelectionFlags, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentItem(a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(a2,sipType_QItemSelectionModel_SelectionFlags,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setCurrentItem, doc_QTreeWidget_setCurrentItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_itemAt, "QTreeWidget.itemAt(QPoint) -> QTreeWidgetItem\n"
    "QTreeWidget.itemAt(int, int) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_itemAt(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_itemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QPoint, &a0))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemAt(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    {
        int a0;
        int a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0, &a1))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemAt(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_itemAt, doc_QTreeWidget_itemAt);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_visualItemRect, "QTreeWidget.visualItemRect(QTreeWidgetItem) -> QRect");

extern "C" {static PyObject *meth_QTreeWidget_visualItemRect(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_visualItemRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->visualItemRect(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_visualItemRect, doc_QTreeWidget_visualItemRect);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_sortColumn, "QTreeWidget.sortColumn() -> int");

extern "C" {static PyObject *meth_QTreeWidget_sortColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_sortColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sortColumn();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_sortColumn, doc_QTreeWidget_sortColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_sortItems, "QTreeWidget.sortItems(int, Qt.SortOrder)");

extern "C" {static PyObject *meth_QTreeWidget_sortItems(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_sortItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        Qt::SortOrder a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sortItems(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_sortItems, doc_QTreeWidget_sortItems);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setSortingEnabled, "QTreeWidget.setSortingEnabled(bool)");

extern "C" {static PyObject *meth_QTreeWidget_setSortingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setSortingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSortingEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setSortingEnabled, doc_QTreeWidget_setSortingEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_isSortingEnabled, "QTreeWidget.isSortingEnabled() -> bool");

extern "C" {static PyObject *meth_QTreeWidget_isSortingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_isSortingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSortingEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_isSortingEnabled, doc_QTreeWidget_isSortingEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_editItem, "QTreeWidget.editItem(QTreeWidgetItem, int column=0)");

extern "C" {static PyObject *meth_QTreeWidget_editItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_editItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        int a1 = 0;
        QTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->editItem(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_editItem, doc_QTreeWidget_editItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_openPersistentEditor, "QTreeWidget.openPersistentEditor(QTreeWidgetItem, int column=0)");

extern "C" {static PyObject *meth_QTreeWidget_openPersistentEditor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_openPersistentEditor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        int a1 = 0;
        QTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->openPersistentEditor(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_openPersistentEditor, doc_QTreeWidget_openPersistentEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_closePersistentEditor, "QTreeWidget.closePersistentEditor(QTreeWidgetItem, int column=0)");

extern "C" {static PyObject *meth_QTreeWidget_closePersistentEditor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_closePersistentEditor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        int a1 = 0;
        QTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->closePersistentEditor(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_closePersistentEditor, doc_QTreeWidget_closePersistentEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_itemWidget, "QTreeWidget.itemWidget(QTreeWidgetItem, int) -> QWidget");

extern "C" {static PyObject *meth_QTreeWidget_itemWidget(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_itemWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        int a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemWidget(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_itemWidget, doc_QTreeWidget_itemWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setItemWidget, "QTreeWidget.setItemWidget(QTreeWidgetItem, int, QWidget)");

extern "C" {static PyObject *meth_QTreeWidget_setItemWidget(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setItemWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        int a1;
        QWidget * a2;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8iJ:", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1, sipType_QWidget, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemWidget(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setItemWidget, doc_QTreeWidget_setItemWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_isItemSelected, "QTreeWidget.isItemSelected(QTreeWidgetItem) -> bool");

extern "C" {static PyObject *meth_QTreeWidget_isItemSelected(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_isItemSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isItemSelected(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_isItemSelected, doc_QTreeWidget_isItemSelected);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setItemSelected, "QTreeWidget.setItemSelected(QTreeWidgetItem, bool)");

extern "C" {static PyObject *meth_QTreeWidget_setItemSelected(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setItemSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        bool a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8b", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemSelected(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setItemSelected, doc_QTreeWidget_setItemSelected);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_selectedItems, "QTreeWidget.selectedItems() -> list-of-QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_selectedItems(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_selectedItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QList<QTreeWidgetItem *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QTreeWidgetItem *>(sipCpp->selectedItems());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_selectedItems, doc_QTreeWidget_selectedItems);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_findItems, "QTreeWidget.findItems(QString, Qt.MatchFlags, int column=0) -> list-of-QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_findItems(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_findItems(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        Qt::MatchFlags * a1;
        int a1State = 0;
        int a2 = 0;
        QTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1|i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QString,&a0, &a0State, sipType_Qt_MatchFlags, &a1, &a1State, &a2))
        {
            QList<QTreeWidgetItem *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QTreeWidgetItem *>(sipCpp->findItems(*a0,*a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_Qt_MatchFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QList_0101QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_findItems, doc_QTreeWidget_findItems);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_isItemHidden, "QTreeWidget.isItemHidden(QTreeWidgetItem) -> bool");

extern "C" {static PyObject *meth_QTreeWidget_isItemHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_isItemHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isItemHidden(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_isItemHidden, doc_QTreeWidget_isItemHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setItemHidden, "QTreeWidget.setItemHidden(QTreeWidgetItem, bool)");

extern "C" {static PyObject *meth_QTreeWidget_setItemHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setItemHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        bool a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8b", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemHidden(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setItemHidden, doc_QTreeWidget_setItemHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_isItemExpanded, "QTreeWidget.isItemExpanded(QTreeWidgetItem) -> bool");

extern "C" {static PyObject *meth_QTreeWidget_isItemExpanded(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_isItemExpanded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isItemExpanded(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_isItemExpanded, doc_QTreeWidget_isItemExpanded);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setItemExpanded, "QTreeWidget.setItemExpanded(QTreeWidgetItem, bool)");

extern "C" {static PyObject *meth_QTreeWidget_setItemExpanded(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setItemExpanded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        bool a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8b", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemExpanded(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setItemExpanded, doc_QTreeWidget_setItemExpanded);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_scrollToItem, "QTreeWidget.scrollToItem(QTreeWidgetItem, QAbstractItemView.ScrollHint hint=QAbstractItemView.EnsureVisible)");

extern "C" {static PyObject *meth_QTreeWidget_scrollToItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_scrollToItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        QAbstractItemView::ScrollHint a1 = QAbstractItemView::EnsureVisible;
        QTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_hint,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|E", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, sipType_QAbstractItemView_ScrollHint, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->scrollToItem(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_scrollToItem, doc_QTreeWidget_scrollToItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_expandItem, "QTreeWidget.expandItem(QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidget_expandItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_expandItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->expandItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_expandItem, doc_QTreeWidget_expandItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_collapseItem, "QTreeWidget.collapseItem(QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidget_collapseItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_collapseItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->collapseItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_collapseItem, doc_QTreeWidget_collapseItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_clear, "QTreeWidget.clear()");

extern "C" {static PyObject *meth_QTreeWidget_clear(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_clear, doc_QTreeWidget_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_mimeTypes, "QTreeWidget.mimeTypes() -> QStringList");

extern "C" {static PyObject *meth_QTreeWidget_mimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_mimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList((sipSelfWasArg ? sipCpp->QTreeWidget::mimeTypes() : sipCpp->mimeTypes()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_mimeTypes, doc_QTreeWidget_mimeTypes);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_mimeData, "QTreeWidget.mimeData(list-of-QTreeWidgetItem) -> QMimeData");

extern "C" {static PyObject *meth_QTreeWidget_mimeData(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_mimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QList<QTreeWidgetItem *> * a0;
        int a0State = 0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QList_0101QTreeWidgetItem,&a0, &a0State))
        {
            QMimeData *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTreeWidget::mimeData(*a0) : sipCpp->mimeData(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QTreeWidgetItem *> *>(a0),sipType_QList_0101QTreeWidgetItem,a0State);

            return sipConvertFromType(sipRes,sipType_QMimeData,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_mimeData, doc_QTreeWidget_mimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_dropMimeData, "QTreeWidget.dropMimeData(QTreeWidgetItem, int, QMimeData, Qt.DropAction) -> bool");

extern "C" {static PyObject *meth_QTreeWidget_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTreeWidgetItem * a0;
        int a1;
        const QMimeData * a2;
        Qt::DropAction a3;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8iJ8E", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1, sipType_QMimeData, &a2, sipType_Qt_DropAction, &a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTreeWidget::dropMimeData(a0,a1,a2,a3) : sipCpp->dropMimeData(a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_dropMimeData, doc_QTreeWidget_dropMimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_supportedDropActions, "QTreeWidget.supportedDropActions() -> Qt.DropActions");

extern "C" {static PyObject *meth_QTreeWidget_supportedDropActions(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            Qt::DropActions *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::DropActions((sipSelfWasArg ? sipCpp->QTreeWidget::supportedDropActions() : sipCpp->supportedDropActions()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_supportedDropActions, doc_QTreeWidget_supportedDropActions);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_items, "QTreeWidget.items(QMimeData) -> list-of-QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_items(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_items(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMimeData * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QMimeData, &a0))
        {
            QList<QTreeWidgetItem *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QTreeWidgetItem *>(sipCpp->items(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_items, doc_QTreeWidget_items);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_indexFromItem, "QTreeWidget.indexFromItem(QTreeWidgetItem, int column=0) -> QModelIndex");

extern "C" {static PyObject *meth_QTreeWidget_indexFromItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_indexFromItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        int a1 = 0;
        QTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "pJ8|i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->indexFromItem(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_indexFromItem, doc_QTreeWidget_indexFromItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_itemFromIndex, "QTreeWidget.itemFromIndex(QModelIndex) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_itemFromIndex(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_itemFromIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QModelIndex, &a0))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemFromIndex(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_itemFromIndex, doc_QTreeWidget_itemFromIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_event, "QTreeWidget.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QTreeWidget_event(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTreeWidget::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_event, doc_QTreeWidget_event);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_dropEvent, "QTreeWidget.dropEvent(QDropEvent)");

extern "C" {static PyObject *meth_QTreeWidget_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QDropEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeWidget::dropEvent(a0) : sipCpp->dropEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_dropEvent, doc_QTreeWidget_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_invisibleRootItem, "QTreeWidget.invisibleRootItem() -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_invisibleRootItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_invisibleRootItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->invisibleRootItem();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_invisibleRootItem, doc_QTreeWidget_invisibleRootItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setHeaderLabel, "QTreeWidget.setHeaderLabel(QString)");

extern "C" {static PyObject *meth_QTreeWidget_setHeaderLabel(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setHeaderLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHeaderLabel(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setHeaderLabel, doc_QTreeWidget_setHeaderLabel);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_isFirstItemColumnSpanned, "QTreeWidget.isFirstItemColumnSpanned(QTreeWidgetItem) -> bool");

extern "C" {static PyObject *meth_QTreeWidget_isFirstItemColumnSpanned(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_isFirstItemColumnSpanned(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isFirstItemColumnSpanned(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_isFirstItemColumnSpanned, doc_QTreeWidget_isFirstItemColumnSpanned);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setFirstItemColumnSpanned, "QTreeWidget.setFirstItemColumnSpanned(QTreeWidgetItem, bool)");

extern "C" {static PyObject *meth_QTreeWidget_setFirstItemColumnSpanned(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setFirstItemColumnSpanned(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        bool a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8b", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFirstItemColumnSpanned(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setFirstItemColumnSpanned, doc_QTreeWidget_setFirstItemColumnSpanned);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_itemAbove, "QTreeWidget.itemAbove(QTreeWidgetItem) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_itemAbove(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_itemAbove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemAbove(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_itemAbove, doc_QTreeWidget_itemAbove);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_itemBelow, "QTreeWidget.itemBelow(QTreeWidgetItem) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_itemBelow(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_itemBelow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemBelow(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_itemBelow, doc_QTreeWidget_itemBelow);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_removeItemWidget, "QTreeWidget.removeItemWidget(QTreeWidgetItem, int)");

extern "C" {static PyObject *meth_QTreeWidget_removeItemWidget(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_removeItemWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        int a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ<i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeItemWidget(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_removeItemWidget, doc_QTreeWidget_removeItemWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setSelectionModel, "QTreeWidget.setSelectionModel(QItemSelectionModel)");

extern "C" {static PyObject *meth_QTreeWidget_setSelectionModel(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setSelectionModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QItemSelectionModel * a0;
        PyObject *a0Keep;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0Keep, sipType_QItemSelectionModel, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeWidget::setSelectionModel(a0) : sipCpp->setSelectionModel(a0));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, 42, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setSelectionModel, doc_QTreeWidget_setSelectionModel);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_setModel(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setModel(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(NULL, sipName_QTreeWidget, sipName_setModel, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTreeWidget(void *, const sipTypeDef *);}
static void *cast_QTreeWidget(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTreeWidget)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QTreeView)->ctd_cast((QTreeView *)(QTreeWidget *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTreeWidget(void *, int);}
static void release_QTreeWidget(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTreeWidget *>(sipCppV);
    else
        delete reinterpret_cast<QTreeWidget *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTreeWidget(sipSimpleWrapper *);}
static void dealloc_QTreeWidget(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTreeWidget *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTreeWidget(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QTreeWidget(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QTreeWidget(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTreeWidget *sipCpp = 0;

    {
        QWidget * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTreeWidget(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTreeWidget[] = {{709, 255, 1}};


static PyMethodDef methods_QTreeWidget[] = {
    {SIP_MLNAME_CAST(sipName_addTopLevelItem), meth_QTreeWidget_addTopLevelItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_addTopLevelItem)},
    {SIP_MLNAME_CAST(sipName_addTopLevelItems), meth_QTreeWidget_addTopLevelItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_addTopLevelItems)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QTreeWidget_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_clear)},
    {SIP_MLNAME_CAST(sipName_closePersistentEditor), (PyCFunction)meth_QTreeWidget_closePersistentEditor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeWidget_closePersistentEditor)},
    {SIP_MLNAME_CAST(sipName_collapseItem), meth_QTreeWidget_collapseItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_collapseItem)},
    {SIP_MLNAME_CAST(sipName_columnCount), meth_QTreeWidget_columnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_columnCount)},
    {SIP_MLNAME_CAST(sipName_currentColumn), meth_QTreeWidget_currentColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_currentColumn)},
    {SIP_MLNAME_CAST(sipName_currentItem), meth_QTreeWidget_currentItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_currentItem)},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QTreeWidget_dropEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_dropEvent)},
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_QTreeWidget_dropMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_dropMimeData)},
    {SIP_MLNAME_CAST(sipName_editItem), (PyCFunction)meth_QTreeWidget_editItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeWidget_editItem)},
    {SIP_MLNAME_CAST(sipName_event), meth_QTreeWidget_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_event)},
    {SIP_MLNAME_CAST(sipName_expandItem), meth_QTreeWidget_expandItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_expandItem)},
    {SIP_MLNAME_CAST(sipName_findItems), (PyCFunction)meth_QTreeWidget_findItems, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeWidget_findItems)},
    {SIP_MLNAME_CAST(sipName_headerItem), meth_QTreeWidget_headerItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_headerItem)},
    {SIP_MLNAME_CAST(sipName_indexFromItem), (PyCFunction)meth_QTreeWidget_indexFromItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeWidget_indexFromItem)},
    {SIP_MLNAME_CAST(sipName_indexOfTopLevelItem), meth_QTreeWidget_indexOfTopLevelItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_indexOfTopLevelItem)},
    {SIP_MLNAME_CAST(sipName_insertTopLevelItem), meth_QTreeWidget_insertTopLevelItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_insertTopLevelItem)},
    {SIP_MLNAME_CAST(sipName_insertTopLevelItems), meth_QTreeWidget_insertTopLevelItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_insertTopLevelItems)},
    {SIP_MLNAME_CAST(sipName_invisibleRootItem), meth_QTreeWidget_invisibleRootItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_invisibleRootItem)},
    {SIP_MLNAME_CAST(sipName_isFirstItemColumnSpanned), meth_QTreeWidget_isFirstItemColumnSpanned, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_isFirstItemColumnSpanned)},
    {SIP_MLNAME_CAST(sipName_isItemExpanded), meth_QTreeWidget_isItemExpanded, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_isItemExpanded)},
    {SIP_MLNAME_CAST(sipName_isItemHidden), meth_QTreeWidget_isItemHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_isItemHidden)},
    {SIP_MLNAME_CAST(sipName_isItemSelected), meth_QTreeWidget_isItemSelected, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_isItemSelected)},
    {SIP_MLNAME_CAST(sipName_isSortingEnabled), meth_QTreeWidget_isSortingEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_isSortingEnabled)},
    {SIP_MLNAME_CAST(sipName_itemAbove), meth_QTreeWidget_itemAbove, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_itemAbove)},
    {SIP_MLNAME_CAST(sipName_itemAt), meth_QTreeWidget_itemAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_itemAt)},
    {SIP_MLNAME_CAST(sipName_itemBelow), meth_QTreeWidget_itemBelow, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_itemBelow)},
    {SIP_MLNAME_CAST(sipName_itemFromIndex), meth_QTreeWidget_itemFromIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_itemFromIndex)},
    {SIP_MLNAME_CAST(sipName_itemWidget), meth_QTreeWidget_itemWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_itemWidget)},
    {SIP_MLNAME_CAST(sipName_items), meth_QTreeWidget_items, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_items)},
    {SIP_MLNAME_CAST(sipName_mimeData), meth_QTreeWidget_mimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_mimeData)},
    {SIP_MLNAME_CAST(sipName_mimeTypes), meth_QTreeWidget_mimeTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_mimeTypes)},
    {SIP_MLNAME_CAST(sipName_openPersistentEditor), (PyCFunction)meth_QTreeWidget_openPersistentEditor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeWidget_openPersistentEditor)},
    {SIP_MLNAME_CAST(sipName_removeItemWidget), meth_QTreeWidget_removeItemWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_removeItemWidget)},
    {SIP_MLNAME_CAST(sipName_scrollToItem), (PyCFunction)meth_QTreeWidget_scrollToItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeWidget_scrollToItem)},
    {SIP_MLNAME_CAST(sipName_selectedItems), meth_QTreeWidget_selectedItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_selectedItems)},
    {SIP_MLNAME_CAST(sipName_setColumnCount), meth_QTreeWidget_setColumnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setColumnCount)},
    {SIP_MLNAME_CAST(sipName_setCurrentItem), meth_QTreeWidget_setCurrentItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setCurrentItem)},
    {SIP_MLNAME_CAST(sipName_setFirstItemColumnSpanned), meth_QTreeWidget_setFirstItemColumnSpanned, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setFirstItemColumnSpanned)},
    {SIP_MLNAME_CAST(sipName_setHeaderItem), meth_QTreeWidget_setHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setHeaderItem)},
    {SIP_MLNAME_CAST(sipName_setHeaderLabel), meth_QTreeWidget_setHeaderLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setHeaderLabel)},
    {SIP_MLNAME_CAST(sipName_setHeaderLabels), meth_QTreeWidget_setHeaderLabels, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setHeaderLabels)},
    {SIP_MLNAME_CAST(sipName_setItemExpanded), meth_QTreeWidget_setItemExpanded, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setItemExpanded)},
    {SIP_MLNAME_CAST(sipName_setItemHidden), meth_QTreeWidget_setItemHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setItemHidden)},
    {SIP_MLNAME_CAST(sipName_setItemSelected), meth_QTreeWidget_setItemSelected, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setItemSelected)},
    {SIP_MLNAME_CAST(sipName_setItemWidget), meth_QTreeWidget_setItemWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setItemWidget)},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QTreeWidget_setModel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSelectionModel), meth_QTreeWidget_setSelectionModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setSelectionModel)},
    {SIP_MLNAME_CAST(sipName_setSortingEnabled), meth_QTreeWidget_setSortingEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setSortingEnabled)},
    {SIP_MLNAME_CAST(sipName_sortColumn), meth_QTreeWidget_sortColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_sortColumn)},
    {SIP_MLNAME_CAST(sipName_sortItems), meth_QTreeWidget_sortItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_sortItems)},
    {SIP_MLNAME_CAST(sipName_supportedDropActions), meth_QTreeWidget_supportedDropActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_supportedDropActions)},
    {SIP_MLNAME_CAST(sipName_takeTopLevelItem), meth_QTreeWidget_takeTopLevelItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_takeTopLevelItem)},
    {SIP_MLNAME_CAST(sipName_topLevelItem), meth_QTreeWidget_topLevelItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_topLevelItem)},
    {SIP_MLNAME_CAST(sipName_topLevelItemCount), meth_QTreeWidget_topLevelItemCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_topLevelItemCount)},
    {SIP_MLNAME_CAST(sipName_visualItemRect), meth_QTreeWidget_visualItemRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_visualItemRect)}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QTreeWidget[] = {
    {"itemSelectionChanged()", "\1QTreeWidget.itemSelectionChanged()", 0},
    {"currentItemChanged(QTreeWidgetItem *,QTreeWidgetItem *)", "\1QTreeWidget.currentItemChanged(QTreeWidgetItem, QTreeWidgetItem)", 0},
    {"itemCollapsed(QTreeWidgetItem *)", "\1QTreeWidget.itemCollapsed(QTreeWidgetItem)", 0},
    {"itemExpanded(QTreeWidgetItem *)", "\1QTreeWidget.itemExpanded(QTreeWidgetItem)", 0},
    {"itemChanged(QTreeWidgetItem *,int)", "\1QTreeWidget.itemChanged(QTreeWidgetItem, int)", 0},
    {"itemEntered(QTreeWidgetItem *,int)", "\1QTreeWidget.itemEntered(QTreeWidgetItem, int)", 0},
    {"itemActivated(QTreeWidgetItem *,int)", "\1QTreeWidget.itemActivated(QTreeWidgetItem, int)", 0},
    {"itemDoubleClicked(QTreeWidgetItem *,int)", "\1QTreeWidget.itemDoubleClicked(QTreeWidgetItem, int)", 0},
    {"itemClicked(QTreeWidgetItem *,int)", "\1QTreeWidget.itemClicked(QTreeWidgetItem, int)", 0},
    {"itemPressed(QTreeWidgetItem *,int)", "\1QTreeWidget.itemPressed(QTreeWidgetItem, int)", 0},
    {0, 0, 0}
};

PyDoc_STRVAR(doc_QTreeWidget, "\1QTreeWidget(QWidget parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QTreeWidget = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QTreeWidget,
        {0}
    },
    {
        sipNameNr_QTreeWidget,
        {0, 0, 1},
        57, methods_QTreeWidget,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTreeWidget,
    -1,
    -1,
    supers_QTreeWidget,
    0,
    init_QTreeWidget,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTreeWidget,
    0,
    0,
    0,
    release_QTreeWidget,
    cast_QTreeWidget,
    0,
    0,
    0
},
    &QTreeWidget::staticMetaObject,
    0,
    pyqt4_signals_QTreeWidget
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:03 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 102 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 39 "sipQtGuiQGraphicsColorizeEffect.cpp"

#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtGuiQGraphicsColorizeEffect.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 46 "sipQtGuiQGraphicsColorizeEffect.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 49 "sipQtGuiQGraphicsColorizeEffect.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 52 "sipQtGuiQGraphicsColorizeEffect.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 55 "sipQtGuiQGraphicsColorizeEffect.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 58 "sipQtGuiQGraphicsColorizeEffect.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 61 "sipQtGuiQGraphicsColorizeEffect.cpp"
#line 160 "/home/maemo/python-qt4-4.7/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 64 "sipQtGuiQGraphicsColorizeEffect.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 67 "sipQtGuiQGraphicsColorizeEffect.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70 "sipQtGuiQGraphicsColorizeEffect.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 73 "sipQtGuiQGraphicsColorizeEffect.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 76 "sipQtGuiQGraphicsColorizeEffect.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 79 "sipQtGuiQGraphicsColorizeEffect.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 82 "sipQtGuiQGraphicsColorizeEffect.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 85 "sipQtGuiQGraphicsColorizeEffect.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 88 "sipQtGuiQGraphicsColorizeEffect.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 91 "sipQtGuiQGraphicsColorizeEffect.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 94 "sipQtGuiQGraphicsColorizeEffect.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 97 "sipQtGuiQGraphicsColorizeEffect.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 100 "sipQtGuiQGraphicsColorizeEffect.cpp"


class sipQGraphicsColorizeEffect : public QGraphicsColorizeEffect
{
public:
    sipQGraphicsColorizeEffect(QObject *);
    virtual ~sipQGraphicsColorizeEffect();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void draw(QPainter *);
    QRectF boundingRectFor(const QRectF&) const;
    void sourceChanged(QGraphicsEffect::ChangeFlags);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGraphicsColorizeEffect(const sipQGraphicsColorizeEffect &);
    sipQGraphicsColorizeEffect &operator = (const sipQGraphicsColorizeEffect &);

    char sipPyMethods[10];
};

sipQGraphicsColorizeEffect::sipQGraphicsColorizeEffect(QObject *a0): QGraphicsColorizeEffect(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGraphicsColorizeEffect::~sipQGraphicsColorizeEffect()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQGraphicsColorizeEffect::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QGraphicsColorizeEffect);
}

int sipQGraphicsColorizeEffect::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QGraphicsColorizeEffect::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QGraphicsColorizeEffect,_c,_id,_a);

    return _id;
}

void *sipQGraphicsColorizeEffect::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QGraphicsColorizeEffect,_clname)) ? this : QGraphicsColorizeEffect::qt_metacast(_clname);
}

void sipQGraphicsColorizeEffect::draw(QPainter *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_draw);

    if (!meth)
    {
        QGraphicsColorizeEffect::draw(a0);
        return;
    }

    extern void sipVH_QtGui_108(sip_gilstate_t,PyObject *,QPainter *);

    sipVH_QtGui_108(sipGILState,meth,a0);
}

QRectF sipQGraphicsColorizeEffect::boundingRectFor(const QRectF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_boundingRectFor);

    if (!meth)
        return QGraphicsEffect::boundingRectFor(a0);

    extern QRectF sipVH_QtGui_211(sip_gilstate_t,PyObject *,const QRectF&);

    return sipVH_QtGui_211(sipGILState,meth,a0);
}

void sipQGraphicsColorizeEffect::sourceChanged(QGraphicsEffect::ChangeFlags a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_sourceChanged);

    if (!meth)
    {
        QGraphicsEffect::sourceChanged(a0);
        return;
    }

    extern void sipVH_QtGui_212(sip_gilstate_t,PyObject *,QGraphicsEffect::ChangeFlags);

    sipVH_QtGui_212(sipGILState,meth,a0);
}

bool sipQGraphicsColorizeEffect::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQGraphicsColorizeEffect::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQGraphicsColorizeEffect::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQGraphicsColorizeEffect::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQGraphicsColorizeEffect::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQGraphicsColorizeEffect::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQGraphicsColorizeEffect::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_color, "QGraphicsColorizeEffect.color() -> QColor");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_color(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsColorizeEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->color());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_color, doc_QGraphicsColorizeEffect_color);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_strength, "QGraphicsColorizeEffect.strength() -> float");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_strength(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_strength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsColorizeEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->strength();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_strength, doc_QGraphicsColorizeEffect_strength);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_setColor, "QGraphicsColorizeEffect.setColor(QColor)");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_setColor(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_setColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor * a0;
        int a0State = 0;
        QGraphicsColorizeEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_setColor, doc_QGraphicsColorizeEffect_setColor);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_setStrength, "QGraphicsColorizeEffect.setStrength(float)");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_setStrength(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_setStrength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QGraphicsColorizeEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStrength(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_setStrength, doc_QGraphicsColorizeEffect_setStrength);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_draw, "QGraphicsColorizeEffect.draw(QPainter)");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_draw(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_draw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter * a0;
        QGraphicsColorizeEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp, sipType_QPainter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsColorizeEffect::draw(a0) : sipCpp->draw(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_draw, doc_QGraphicsColorizeEffect_draw);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGraphicsColorizeEffect(void *, const sipTypeDef *);}
static void *cast_QGraphicsColorizeEffect(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QGraphicsColorizeEffect)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QGraphicsEffect)->ctd_cast((QGraphicsEffect *)(QGraphicsColorizeEffect *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGraphicsColorizeEffect(void *, int);}
static void release_QGraphicsColorizeEffect(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQGraphicsColorizeEffect *>(sipCppV);
    else
        delete reinterpret_cast<QGraphicsColorizeEffect *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QGraphicsColorizeEffect(sipSimpleWrapper *);}
static void dealloc_QGraphicsColorizeEffect(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGraphicsColorizeEffect *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGraphicsColorizeEffect(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QGraphicsColorizeEffect(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QGraphicsColorizeEffect(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGraphicsColorizeEffect *sipCpp = 0;

    {
        QObject * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGraphicsColorizeEffect(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGraphicsColorizeEffect[] = {{162, 255, 1}};


static PyMethodDef methods_QGraphicsColorizeEffect[] = {
    {SIP_MLNAME_CAST(sipName_color), meth_QGraphicsColorizeEffect_color, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsColorizeEffect_color)},
    {SIP_MLNAME_CAST(sipName_draw), meth_QGraphicsColorizeEffect_draw, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsColorizeEffect_draw)},
    {SIP_MLNAME_CAST(sipName_setColor), meth_QGraphicsColorizeEffect_setColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsColorizeEffect_setColor)},
    {SIP_MLNAME_CAST(sipName_setStrength), meth_QGraphicsColorizeEffect_setStrength, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsColorizeEffect_setStrength)},
    {SIP_MLNAME_CAST(sipName_strength), meth_QGraphicsColorizeEffect_strength, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsColorizeEffect_strength)}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QGraphicsColorizeEffect[] = {
    {"strengthChanged(qreal)", "\1QGraphicsColorizeEffect.strengthChanged(float)", 0},
    {"colorChanged(const QColor&)", "\1QGraphicsColorizeEffect.colorChanged(QColor)", 0},
    {0, 0, 0}
};

PyDoc_STRVAR(doc_QGraphicsColorizeEffect, "\1QGraphicsColorizeEffect(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QGraphicsColorizeEffect = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QGraphicsColorizeEffect,
        {0}
    },
    {
        sipNameNr_QGraphicsColorizeEffect,
        {0, 0, 1},
        5, methods_QGraphicsColorizeEffect,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGraphicsColorizeEffect,
    -1,
    -1,
    supers_QGraphicsColorizeEffect,
    0,
    init_QGraphicsColorizeEffect,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGraphicsColorizeEffect,
    0,
    0,
    0,
    release_QGraphicsColorizeEffect,
    cast_QGraphicsColorizeEffect,
    0,
    0,
    0
},
    &QGraphicsColorizeEffect::staticMetaObject,
    0,
    pyqt4_signals_QGraphicsColorizeEffect
};

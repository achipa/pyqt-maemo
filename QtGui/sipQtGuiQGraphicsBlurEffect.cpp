/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:03 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 133 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 39 "sipQtGuiQGraphicsBlurEffect.cpp"

#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtGuiQGraphicsBlurEffect.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 46 "sipQtGuiQGraphicsBlurEffect.cpp"
#line 133 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 49 "sipQtGuiQGraphicsBlurEffect.cpp"
#line 160 "/home/maemo/python-qt4-4.7/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 52 "sipQtGuiQGraphicsBlurEffect.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 55 "sipQtGuiQGraphicsBlurEffect.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 58 "sipQtGuiQGraphicsBlurEffect.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 61 "sipQtGuiQGraphicsBlurEffect.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 64 "sipQtGuiQGraphicsBlurEffect.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 67 "sipQtGuiQGraphicsBlurEffect.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70 "sipQtGuiQGraphicsBlurEffect.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 73 "sipQtGuiQGraphicsBlurEffect.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 76 "sipQtGuiQGraphicsBlurEffect.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 79 "sipQtGuiQGraphicsBlurEffect.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 82 "sipQtGuiQGraphicsBlurEffect.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 85 "sipQtGuiQGraphicsBlurEffect.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 88 "sipQtGuiQGraphicsBlurEffect.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 91 "sipQtGuiQGraphicsBlurEffect.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 94 "sipQtGuiQGraphicsBlurEffect.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 97 "sipQtGuiQGraphicsBlurEffect.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 100 "sipQtGuiQGraphicsBlurEffect.cpp"


class sipQGraphicsBlurEffect : public QGraphicsBlurEffect
{
public:
    sipQGraphicsBlurEffect(QObject *);
    virtual ~sipQGraphicsBlurEffect();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QRectF boundingRectFor(const QRectF&) const;
    void draw(QPainter *);
    void sourceChanged(QGraphicsEffect::ChangeFlags);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGraphicsBlurEffect(const sipQGraphicsBlurEffect &);
    sipQGraphicsBlurEffect &operator = (const sipQGraphicsBlurEffect &);

    char sipPyMethods[10];
};

sipQGraphicsBlurEffect::sipQGraphicsBlurEffect(QObject *a0): QGraphicsBlurEffect(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGraphicsBlurEffect::~sipQGraphicsBlurEffect()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQGraphicsBlurEffect::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QGraphicsBlurEffect);
}

int sipQGraphicsBlurEffect::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QGraphicsBlurEffect::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QGraphicsBlurEffect,_c,_id,_a);

    return _id;
}

void *sipQGraphicsBlurEffect::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QGraphicsBlurEffect,_clname)) ? this : QGraphicsBlurEffect::qt_metacast(_clname);
}

QRectF sipQGraphicsBlurEffect::boundingRectFor(const QRectF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_boundingRectFor);

    if (!meth)
        return QGraphicsBlurEffect::boundingRectFor(a0);

    extern QRectF sipVH_QtGui_211(sip_gilstate_t,PyObject *,const QRectF&);

    return sipVH_QtGui_211(sipGILState,meth,a0);
}

void sipQGraphicsBlurEffect::draw(QPainter *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_draw);

    if (!meth)
    {
        QGraphicsBlurEffect::draw(a0);
        return;
    }

    extern void sipVH_QtGui_108(sip_gilstate_t,PyObject *,QPainter *);

    sipVH_QtGui_108(sipGILState,meth,a0);
}

void sipQGraphicsBlurEffect::sourceChanged(QGraphicsEffect::ChangeFlags a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_sourceChanged);

    if (!meth)
    {
        QGraphicsEffect::sourceChanged(a0);
        return;
    }

    extern void sipVH_QtGui_212(sip_gilstate_t,PyObject *,QGraphicsEffect::ChangeFlags);

    sipVH_QtGui_212(sipGILState,meth,a0);
}

bool sipQGraphicsBlurEffect::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQGraphicsBlurEffect::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQGraphicsBlurEffect::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQGraphicsBlurEffect::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQGraphicsBlurEffect::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQGraphicsBlurEffect::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQGraphicsBlurEffect::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QGraphicsBlurEffect_boundingRectFor, "QGraphicsBlurEffect.boundingRectFor(QRectF) -> QRectF");

extern "C" {static PyObject *meth_QGraphicsBlurEffect_boundingRectFor(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsBlurEffect_boundingRectFor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRectF * a0;
        QGraphicsBlurEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsBlurEffect, &sipCpp, sipType_QRectF, &a0))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF((sipSelfWasArg ? sipCpp->QGraphicsBlurEffect::boundingRectFor(*a0) : sipCpp->boundingRectFor(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsBlurEffect, sipName_boundingRectFor, doc_QGraphicsBlurEffect_boundingRectFor);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsBlurEffect_blurRadius, "QGraphicsBlurEffect.blurRadius() -> float");

extern "C" {static PyObject *meth_QGraphicsBlurEffect_blurRadius(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsBlurEffect_blurRadius(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsBlurEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsBlurEffect, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->blurRadius();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsBlurEffect, sipName_blurRadius, doc_QGraphicsBlurEffect_blurRadius);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsBlurEffect_blurHints, "QGraphicsBlurEffect.blurHints() -> QGraphicsBlurEffect.BlurHints");

extern "C" {static PyObject *meth_QGraphicsBlurEffect_blurHints(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsBlurEffect_blurHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsBlurEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsBlurEffect, &sipCpp))
        {
            QGraphicsBlurEffect::BlurHints *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QGraphicsBlurEffect::BlurHints(sipCpp->blurHints());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QGraphicsBlurEffect_BlurHints,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsBlurEffect, sipName_blurHints, doc_QGraphicsBlurEffect_blurHints);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsBlurEffect_setBlurRadius, "QGraphicsBlurEffect.setBlurRadius(float)");

extern "C" {static PyObject *meth_QGraphicsBlurEffect_setBlurRadius(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsBlurEffect_setBlurRadius(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QGraphicsBlurEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QGraphicsBlurEffect, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBlurRadius(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsBlurEffect, sipName_setBlurRadius, doc_QGraphicsBlurEffect_setBlurRadius);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsBlurEffect_setBlurHints, "QGraphicsBlurEffect.setBlurHints(QGraphicsBlurEffect.BlurHints)");

extern "C" {static PyObject *meth_QGraphicsBlurEffect_setBlurHints(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsBlurEffect_setBlurHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsBlurEffect::BlurHints * a0;
        int a0State = 0;
        QGraphicsBlurEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsBlurEffect, &sipCpp, sipType_QGraphicsBlurEffect_BlurHints, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBlurHints(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QGraphicsBlurEffect_BlurHints,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsBlurEffect, sipName_setBlurHints, doc_QGraphicsBlurEffect_setBlurHints);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsBlurEffect_draw, "QGraphicsBlurEffect.draw(QPainter)");

extern "C" {static PyObject *meth_QGraphicsBlurEffect_draw(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsBlurEffect_draw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter * a0;
        QGraphicsBlurEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsBlurEffect, &sipCpp, sipType_QPainter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsBlurEffect::draw(a0) : sipCpp->draw(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsBlurEffect, sipName_draw, doc_QGraphicsBlurEffect_draw);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGraphicsBlurEffect(void *, const sipTypeDef *);}
static void *cast_QGraphicsBlurEffect(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QGraphicsBlurEffect)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QGraphicsEffect)->ctd_cast((QGraphicsEffect *)(QGraphicsBlurEffect *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGraphicsBlurEffect(void *, int);}
static void release_QGraphicsBlurEffect(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQGraphicsBlurEffect *>(sipCppV);
    else
        delete reinterpret_cast<QGraphicsBlurEffect *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QGraphicsBlurEffect(sipSimpleWrapper *);}
static void dealloc_QGraphicsBlurEffect(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGraphicsBlurEffect *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGraphicsBlurEffect(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QGraphicsBlurEffect(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QGraphicsBlurEffect(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGraphicsBlurEffect *sipCpp = 0;

    {
        QObject * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGraphicsBlurEffect(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGraphicsBlurEffect[] = {{162, 255, 1}};


static PyMethodDef methods_QGraphicsBlurEffect[] = {
    {SIP_MLNAME_CAST(sipName_blurHints), meth_QGraphicsBlurEffect_blurHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsBlurEffect_blurHints)},
    {SIP_MLNAME_CAST(sipName_blurRadius), meth_QGraphicsBlurEffect_blurRadius, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsBlurEffect_blurRadius)},
    {SIP_MLNAME_CAST(sipName_boundingRectFor), meth_QGraphicsBlurEffect_boundingRectFor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsBlurEffect_boundingRectFor)},
    {SIP_MLNAME_CAST(sipName_draw), meth_QGraphicsBlurEffect_draw, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsBlurEffect_draw)},
    {SIP_MLNAME_CAST(sipName_setBlurHints), meth_QGraphicsBlurEffect_setBlurHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsBlurEffect_setBlurHints)},
    {SIP_MLNAME_CAST(sipName_setBlurRadius), meth_QGraphicsBlurEffect_setBlurRadius, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsBlurEffect_setBlurRadius)}
};

static sipEnumMemberDef enummembers_QGraphicsBlurEffect[] = {
    {sipName_AnimationHint, QGraphicsBlurEffect::AnimationHint, 158},
    {sipName_PerformanceHint, QGraphicsBlurEffect::PerformanceHint, 158},
    {sipName_QualityHint, QGraphicsBlurEffect::QualityHint, 158},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QGraphicsBlurEffect[] = {
    {"blurHintsChanged(QGraphicsBlurEffect::BlurHints)", "\1QGraphicsBlurEffect.blurHintsChanged(QGraphicsBlurEffect.BlurHints)", 0},
    {"blurRadiusChanged(qreal)", "\1QGraphicsBlurEffect.blurRadiusChanged(float)", 0},
    {0, 0, 0}
};

PyDoc_STRVAR(doc_QGraphicsBlurEffect, "\1QGraphicsBlurEffect(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QGraphicsBlurEffect = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QGraphicsBlurEffect,
        {0}
    },
    {
        sipNameNr_QGraphicsBlurEffect,
        {0, 0, 1},
        6, methods_QGraphicsBlurEffect,
        3, enummembers_QGraphicsBlurEffect,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGraphicsBlurEffect,
    -1,
    -1,
    supers_QGraphicsBlurEffect,
    0,
    init_QGraphicsBlurEffect,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGraphicsBlurEffect,
    0,
    0,
    0,
    release_QGraphicsBlurEffect,
    cast_QGraphicsBlurEffect,
    0,
    0,
    0
},
    &QGraphicsBlurEffect::staticMetaObject,
    0,
    pyqt4_signals_QGraphicsBlurEffect
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:03 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 39 "sipQtGuiQAbstractItemView.cpp"

#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 43 "sipQtGuiQAbstractItemView.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 46 "sipQtGuiQAbstractItemView.cpp"
#line 520 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 539 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 51 "sipQtGuiQAbstractItemView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 54 "sipQtGuiQAbstractItemView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 57 "sipQtGuiQAbstractItemView.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "sipQtGuiQAbstractItemView.cpp"
#line 428 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "sipQtGuiQAbstractItemView.cpp"
#line 350 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "sipQtGuiQAbstractItemView.cpp"
#line 379 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "sipQtGuiQAbstractItemView.cpp"
#line 565 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "sipQtGuiQAbstractItemView.cpp"
#line 619 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "sipQtGuiQAbstractItemView.cpp"
#line 590 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 78 "sipQtGuiQAbstractItemView.cpp"
#line 607 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "sipQtGuiQAbstractItemView.cpp"
#line 238 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 84 "sipQtGuiQAbstractItemView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 87 "sipQtGuiQAbstractItemView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 90 "sipQtGuiQAbstractItemView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 93 "sipQtGuiQAbstractItemView.cpp"
#line 1029 "/home/maemo/python-qt4-4.7/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 96 "sipQtGuiQAbstractItemView.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "sipQtGuiQAbstractItemView.cpp"
#line 82 "/home/maemo/python-qt4-4.7/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 102 "sipQtGuiQAbstractItemView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 105 "sipQtGuiQAbstractItemView.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 108 "sipQtGuiQAbstractItemView.cpp"
#line 155 "/home/maemo/python-qt4-4.7/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 111 "sipQtGuiQAbstractItemView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 114 "sipQtGuiQAbstractItemView.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 117 "sipQtGuiQAbstractItemView.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 120 "sipQtGuiQAbstractItemView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 123 "sipQtGuiQAbstractItemView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 126 "sipQtGuiQAbstractItemView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 129 "sipQtGuiQAbstractItemView.cpp"
#line 82 "/home/maemo/python-qt4-4.7/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 132 "sipQtGuiQAbstractItemView.cpp"
#line 128 "/home/maemo/python-qt4-4.7/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 135 "sipQtGuiQAbstractItemView.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 138 "sipQtGuiQAbstractItemView.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 141 "sipQtGuiQAbstractItemView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qscrollbar.sip"
#include <qscrollbar.h>
#line 144 "sipQtGuiQAbstractItemView.cpp"
#line 490 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "sipQtGuiQAbstractItemView.cpp"
#line 279 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "sipQtGuiQAbstractItemView.cpp"
#line 399 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "sipQtGuiQAbstractItemView.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 156 "sipQtGuiQAbstractItemView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 159 "sipQtGuiQAbstractItemView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qframe.sip"
#include <qframe.h>
#line 162 "sipQtGuiQAbstractItemView.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 165 "sipQtGuiQAbstractItemView.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 168 "sipQtGuiQAbstractItemView.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 171 "sipQtGuiQAbstractItemView.cpp"
#line 39 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 174 "sipQtGuiQAbstractItemView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 177 "sipQtGuiQAbstractItemView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 180 "sipQtGuiQAbstractItemView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 183 "sipQtGuiQAbstractItemView.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 186 "sipQtGuiQAbstractItemView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 189 "sipQtGuiQAbstractItemView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 192 "sipQtGuiQAbstractItemView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 195 "sipQtGuiQAbstractItemView.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 198 "sipQtGuiQAbstractItemView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 201 "sipQtGuiQAbstractItemView.cpp"
#line 478 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 204 "sipQtGuiQAbstractItemView.cpp"
#line 466 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 207 "sipQtGuiQAbstractItemView.cpp"
#line 675 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 210 "sipQtGuiQAbstractItemView.cpp"
#line 301 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 213 "sipQtGuiQAbstractItemView.cpp"
#line 442 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 216 "sipQtGuiQAbstractItemView.cpp"
#line 414 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 219 "sipQtGuiQAbstractItemView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 222 "sipQtGuiQAbstractItemView.cpp"
#line 68 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 225 "sipQtGuiQAbstractItemView.cpp"
#line 42 "/home/maemo/python-qt4-4.7/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 228 "sipQtGuiQAbstractItemView.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 231 "sipQtGuiQAbstractItemView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 234 "sipQtGuiQAbstractItemView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 237 "sipQtGuiQAbstractItemView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 240 "sipQtGuiQAbstractItemView.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 243 "sipQtGuiQAbstractItemView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 246 "sipQtGuiQAbstractItemView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 249 "sipQtGuiQAbstractItemView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 252 "sipQtGuiQAbstractItemView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 255 "sipQtGuiQAbstractItemView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 258 "sipQtGuiQAbstractItemView.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 261 "sipQtGuiQAbstractItemView.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 264 "sipQtGuiQAbstractItemView.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 267 "sipQtGuiQAbstractItemView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 270 "sipQtGuiQAbstractItemView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 273 "sipQtGuiQAbstractItemView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 276 "sipQtGuiQAbstractItemView.cpp"


class sipQAbstractItemView : public QAbstractItemView
{
public:
    sipQAbstractItemView(QWidget *);
    virtual ~sipQAbstractItemView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void setModel(QAbstractItemModel *);
    void setSelectionModel(QItemSelectionModel *);
    void keyboardSearch(const QString&);
    QRect visualRect(const QModelIndex&) const;
    void scrollTo(const QModelIndex&,QAbstractItemView::ScrollHint);
    QModelIndex indexAt(const QPoint&) const;
    int sizeHintForRow(int) const;
    int sizeHintForColumn(int) const;
    void reset();
    void setRootIndex(const QModelIndex&);
    void doItemsLayout();
    void selectAll();
    void dataChanged(const QModelIndex&,const QModelIndex&);
    void rowsInserted(const QModelIndex&,int,int);
    void rowsAboutToBeRemoved(const QModelIndex&,int,int);
    void selectionChanged(const QItemSelection&,const QItemSelection&);
    void currentChanged(const QModelIndex&,const QModelIndex&);
    void updateEditorData();
    void updateEditorGeometries();
    void updateGeometries();
    void verticalScrollbarAction(int);
    void horizontalScrollbarAction(int);
    void verticalScrollbarValueChanged(int);
    void horizontalScrollbarValueChanged(int);
    void closeEditor(QWidget *,QAbstractItemDelegate::EndEditHint);
    void commitData(QWidget *);
    void editorDestroyed(QObject *);
    QModelIndex moveCursor(QAbstractItemView::CursorAction,Qt::KeyboardModifiers);
    int horizontalOffset() const;
    int verticalOffset() const;
    bool isIndexHidden(const QModelIndex&) const;
    void setSelection(const QRect&,QItemSelectionModel::SelectionFlags);
    QRegion visualRegionForSelection(const QItemSelection&) const;
    QModelIndexList selectedIndexes() const;
    bool edit(const QModelIndex&,QAbstractItemView::EditTrigger,QEvent *);
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex&,const QEvent *) const;
    void startDrag(Qt::DropActions);
    QStyleOptionViewItem viewOptions() const;
    bool event(QEvent *);
    bool viewportEvent(QEvent *);
    void mousePressEvent(QMouseEvent *);
    void mouseMoveEvent(QMouseEvent *);
    void mouseReleaseEvent(QMouseEvent *);
    void mouseDoubleClickEvent(QMouseEvent *);
    void dragEnterEvent(QDragEnterEvent *);
    void dragMoveEvent(QDragMoveEvent *);
    void dragLeaveEvent(QDragLeaveEvent *);
    void dropEvent(QDropEvent *);
    void focusInEvent(QFocusEvent *);
    void focusOutEvent(QFocusEvent *);
    void keyPressEvent(QKeyEvent *);
    void resizeEvent(QResizeEvent *);
    void timerEvent(QTimerEvent *);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    void inputMethodEvent(QInputMethodEvent *);
    QSize minimumSizeHint() const;
    QSize sizeHint() const;
    void paintEvent(QPaintEvent *);
    void wheelEvent(QWheelEvent *);
    void contextMenuEvent(QContextMenuEvent *);
    void scrollContentsBy(int,int);
    void changeEvent(QEvent *);
    int devType() const;
    void setVisible(bool);
    int heightForWidth(int) const;
    QPaintEngine * paintEngine() const;
    void keyReleaseEvent(QKeyEvent *);
    void enterEvent(QEvent *);
    void leaveEvent(QEvent *);
    void moveEvent(QMoveEvent *);
    void closeEvent(QCloseEvent *);
    void tabletEvent(QTabletEvent *);
    void actionEvent(QActionEvent *);
    void showEvent(QShowEvent *);
    void hideEvent(QHideEvent *);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void enabledChange(bool);
    void paletteChange(const QPalette&);
    void fontChange(const QFont&);
    void windowActivationChange(bool);
    void languageChange();
    bool eventFilter(QObject *,QEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractItemView(const sipQAbstractItemView &);
    sipQAbstractItemView &operator = (const sipQAbstractItemView &);

    char sipPyMethods[87];
};

sipQAbstractItemView::sipQAbstractItemView(QWidget *a0): QAbstractItemView(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractItemView::~sipQAbstractItemView()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQAbstractItemView::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QAbstractItemView);
}

int sipQAbstractItemView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QAbstractItemView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QAbstractItemView,_c,_id,_a);

    return _id;
}

void *sipQAbstractItemView::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QAbstractItemView,_clname)) ? this : QAbstractItemView::qt_metacast(_clname);
}

void sipQAbstractItemView::setModel(QAbstractItemModel *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_setModel);

    if (!meth)
    {
        QAbstractItemView::setModel(a0);
        return;
    }

    extern void sipVH_QtGui_36(sip_gilstate_t,PyObject *,QAbstractItemModel *);

    sipVH_QtGui_36(sipGILState,meth,a0);
}

void sipQAbstractItemView::setSelectionModel(QItemSelectionModel *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_setSelectionModel);

    if (!meth)
    {
        QAbstractItemView::setSelectionModel(a0);
        return;
    }

    extern void sipVH_QtGui_37(sip_gilstate_t,PyObject *,QItemSelectionModel *);

    sipVH_QtGui_37(sipGILState,meth,a0);
}

void sipQAbstractItemView::keyboardSearch(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_keyboardSearch);

    if (!meth)
    {
        QAbstractItemView::keyboardSearch(a0);
        return;
    }

    typedef void (*sipVH_QtCore_33)(sip_gilstate_t,PyObject *,const QString&);

    ((sipVH_QtCore_33)(sipModuleAPI_QtGui_QtCore->em_virthandlers[33]))(sipGILState,meth,a0);
}

QRect sipQAbstractItemView::visualRect(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,sipName_QAbstractItemView,sipName_visualRect);

    if (!meth)
        return QRect();

    extern QRect sipVH_QtGui_56(sip_gilstate_t,PyObject *,const QModelIndex&);

    return sipVH_QtGui_56(sipGILState,meth,a0);
}

void sipQAbstractItemView::scrollTo(const QModelIndex& a0,QAbstractItemView::ScrollHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,sipName_QAbstractItemView,sipName_scrollTo);

    if (!meth)
        return;

    extern void sipVH_QtGui_55(sip_gilstate_t,PyObject *,const QModelIndex&,QAbstractItemView::ScrollHint);

    sipVH_QtGui_55(sipGILState,meth,a0,a1);
}

QModelIndex sipQAbstractItemView::indexAt(const QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,sipName_QAbstractItemView,sipName_indexAt);

    if (!meth)
        return QModelIndex();

    extern QModelIndex sipVH_QtGui_54(sip_gilstate_t,PyObject *,const QPoint&);

    return sipVH_QtGui_54(sipGILState,meth,a0);
}

int sipQAbstractItemView::sizeHintForRow(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_sizeHintForRow);

    if (!meth)
        return QAbstractItemView::sizeHintForRow(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

int sipQAbstractItemView::sizeHintForColumn(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_sizeHintForColumn);

    if (!meth)
        return QAbstractItemView::sizeHintForColumn(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

void sipQAbstractItemView::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_reset);

    if (!meth)
    {
        QAbstractItemView::reset();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQAbstractItemView::setRootIndex(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_setRootIndex);

    if (!meth)
    {
        QAbstractItemView::setRootIndex(a0);
        return;
    }

    typedef void (*sipVH_QtCore_51)(sip_gilstate_t,PyObject *,const QModelIndex&);

    ((sipVH_QtCore_51)(sipModuleAPI_QtGui_QtCore->em_virthandlers[51]))(sipGILState,meth,a0);
}

void sipQAbstractItemView::doItemsLayout()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_doItemsLayout);

    if (!meth)
    {
        QAbstractItemView::doItemsLayout();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQAbstractItemView::selectAll()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_selectAll);

    if (!meth)
    {
        QAbstractItemView::selectAll();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQAbstractItemView::dataChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_dataChanged);

    if (!meth)
    {
        QAbstractItemView::dataChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_45(sip_gilstate_t,PyObject *,const QModelIndex&,const QModelIndex&);

    sipVH_QtGui_45(sipGILState,meth,a0,a1);
}

void sipQAbstractItemView::rowsInserted(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_rowsInserted);

    if (!meth)
    {
        QAbstractItemView::rowsInserted(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_53(sip_gilstate_t,PyObject *,const QModelIndex&,int,int);

    sipVH_QtGui_53(sipGILState,meth,a0,a1,a2);
}

void sipQAbstractItemView::rowsAboutToBeRemoved(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_rowsAboutToBeRemoved);

    if (!meth)
    {
        QAbstractItemView::rowsAboutToBeRemoved(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_53(sip_gilstate_t,PyObject *,const QModelIndex&,int,int);

    sipVH_QtGui_53(sipGILState,meth,a0,a1,a2);
}

void sipQAbstractItemView::selectionChanged(const QItemSelection& a0,const QItemSelection& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_selectionChanged);

    if (!meth)
    {
        QAbstractItemView::selectionChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_46(sip_gilstate_t,PyObject *,const QItemSelection&,const QItemSelection&);

    sipVH_QtGui_46(sipGILState,meth,a0,a1);
}

void sipQAbstractItemView::currentChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_currentChanged);

    if (!meth)
    {
        QAbstractItemView::currentChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_45(sip_gilstate_t,PyObject *,const QModelIndex&,const QModelIndex&);

    sipVH_QtGui_45(sipGILState,meth,a0,a1);
}

void sipQAbstractItemView::updateEditorData()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_updateEditorData);

    if (!meth)
    {
        QAbstractItemView::updateEditorData();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQAbstractItemView::updateEditorGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_updateEditorGeometries);

    if (!meth)
    {
        QAbstractItemView::updateEditorGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQAbstractItemView::updateGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_updateGeometries);

    if (!meth)
    {
        QAbstractItemView::updateGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQAbstractItemView::verticalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_verticalScrollbarAction);

    if (!meth)
    {
        QAbstractItemView::verticalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState,meth,a0);
}

void sipQAbstractItemView::horizontalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_horizontalScrollbarAction);

    if (!meth)
    {
        QAbstractItemView::horizontalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState,meth,a0);
}

void sipQAbstractItemView::verticalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_verticalScrollbarValueChanged);

    if (!meth)
    {
        QAbstractItemView::verticalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState,meth,a0);
}

void sipQAbstractItemView::horizontalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_horizontalScrollbarValueChanged);

    if (!meth)
    {
        QAbstractItemView::horizontalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState,meth,a0);
}

void sipQAbstractItemView::closeEditor(QWidget *a0,QAbstractItemDelegate::EndEditHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_closeEditor);

    if (!meth)
    {
        QAbstractItemView::closeEditor(a0,a1);
        return;
    }

    extern void sipVH_QtGui_236(sip_gilstate_t,PyObject *,QWidget *,QAbstractItemDelegate::EndEditHint);

    sipVH_QtGui_236(sipGILState,meth,a0,a1);
}

void sipQAbstractItemView::commitData(QWidget *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_commitData);

    if (!meth)
    {
        QAbstractItemView::commitData(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t,PyObject *,QWidget *);

    sipVH_QtGui_7(sipGILState,meth,a0);
}

void sipQAbstractItemView::editorDestroyed(QObject *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_editorDestroyed);

    if (!meth)
    {
        QAbstractItemView::editorDestroyed(a0);
        return;
    }

    extern void sipVH_QtGui_235(sip_gilstate_t,PyObject *,QObject *);

    sipVH_QtGui_235(sipGILState,meth,a0);
}

QModelIndex sipQAbstractItemView::moveCursor(QAbstractItemView::CursorAction a0,Qt::KeyboardModifiers a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,sipName_QAbstractItemView,sipName_moveCursor);

    if (!meth)
        return QModelIndex();

    extern QModelIndex sipVH_QtGui_52(sip_gilstate_t,PyObject *,QAbstractItemView::CursorAction,Qt::KeyboardModifiers);

    return sipVH_QtGui_52(sipGILState,meth,a0,a1);
}

int sipQAbstractItemView::horizontalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,sipName_QAbstractItemView,sipName_horizontalOffset);

    if (!meth)
        return 0;

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

int sipQAbstractItemView::verticalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,sipName_QAbstractItemView,sipName_verticalOffset);

    if (!meth)
        return 0;

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

bool sipQAbstractItemView::isIndexHidden(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,sipName_QAbstractItemView,sipName_isIndexHidden);

    if (!meth)
        return 0;

    typedef bool (*sipVH_QtCore_42)(sip_gilstate_t,PyObject *,const QModelIndex&);

    return ((sipVH_QtCore_42)(sipModuleAPI_QtGui_QtCore->em_virthandlers[42]))(sipGILState,meth,a0);
}

void sipQAbstractItemView::setSelection(const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,sipName_QAbstractItemView,sipName_setSelection);

    if (!meth)
        return;

    extern void sipVH_QtGui_51(sip_gilstate_t,PyObject *,const QRect&,QItemSelectionModel::SelectionFlags);

    sipVH_QtGui_51(sipGILState,meth,a0,a1);
}

QRegion sipQAbstractItemView::visualRegionForSelection(const QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,sipName_QAbstractItemView,sipName_visualRegionForSelection);

    if (!meth)
        return QRegion();

    extern QRegion sipVH_QtGui_50(sip_gilstate_t,PyObject *,const QItemSelection&);

    return sipVH_QtGui_50(sipGILState,meth,a0);
}

QModelIndexList sipQAbstractItemView::selectedIndexes() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_selectedIndexes);

    if (!meth)
        return QAbstractItemView::selectedIndexes();

    extern QList<QModelIndex> sipVH_QtGui_49(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_49(sipGILState,meth);
}

bool sipQAbstractItemView::edit(const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent *a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_edit);

    if (!meth)
        return QAbstractItemView::edit(a0,a1,a2);

    extern bool sipVH_QtGui_234(sip_gilstate_t,PyObject *,const QModelIndex&,QAbstractItemView::EditTrigger,QEvent *);

    return sipVH_QtGui_234(sipGILState,meth,a0,a1,a2);
}

QItemSelectionModel::SelectionFlags sipQAbstractItemView::selectionCommand(const QModelIndex& a0,const QEvent *a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,NULL,sipName_selectionCommand);

    if (!meth)
        return QAbstractItemView::selectionCommand(a0,a1);

    extern QItemSelectionModel::SelectionFlags sipVH_QtGui_233(sip_gilstate_t,PyObject *,const QModelIndex&,const QEvent *);

    return sipVH_QtGui_233(sipGILState,meth,a0,a1);
}

void sipQAbstractItemView::startDrag(Qt::DropActions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_startDrag);

    if (!meth)
    {
        QAbstractItemView::startDrag(a0);
        return;
    }

    extern void sipVH_QtGui_153(sip_gilstate_t,PyObject *,Qt::DropActions);

    sipVH_QtGui_153(sipGILState,meth,a0);
}

QStyleOptionViewItem sipQAbstractItemView::viewOptions() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_viewOptions);

    if (!meth)
        return QAbstractItemView::viewOptions();

    extern QStyleOptionViewItem sipVH_QtGui_71(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_71(sipGILState,meth);
}

bool sipQAbstractItemView::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QAbstractItemView::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQAbstractItemView::viewportEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_viewportEvent);

    if (!meth)
        return QAbstractItemView::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

void sipQAbstractItemView::mousePressEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_mousePressEvent);

    if (!meth)
    {
        QAbstractItemView::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQAbstractItemView::mouseMoveEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!meth)
    {
        QAbstractItemView::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQAbstractItemView::mouseReleaseEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!meth)
    {
        QAbstractItemView::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQAbstractItemView::mouseDoubleClickEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!meth)
    {
        QAbstractItemView::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQAbstractItemView::dragEnterEvent(QDragEnterEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!meth)
    {
        QAbstractItemView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t,PyObject *,QDragEnterEvent *);

    sipVH_QtGui_18(sipGILState,meth,a0);
}

void sipQAbstractItemView::dragMoveEvent(QDragMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!meth)
    {
        QAbstractItemView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t,PyObject *,QDragMoveEvent *);

    sipVH_QtGui_17(sipGILState,meth,a0);
}

void sipQAbstractItemView::dragLeaveEvent(QDragLeaveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!meth)
    {
        QAbstractItemView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t,PyObject *,QDragLeaveEvent *);

    sipVH_QtGui_16(sipGILState,meth,a0);
}

void sipQAbstractItemView::dropEvent(QDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_dropEvent);

    if (!meth)
    {
        QAbstractItemView::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t,PyObject *,QDropEvent *);

    sipVH_QtGui_15(sipGILState,meth,a0);
}

void sipQAbstractItemView::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_focusInEvent);

    if (!meth)
    {
        QAbstractItemView::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

void sipQAbstractItemView::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_focusOutEvent);

    if (!meth)
    {
        QAbstractItemView::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

void sipQAbstractItemView::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_keyPressEvent);

    if (!meth)
    {
        QAbstractItemView::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQAbstractItemView::resizeEvent(QResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_resizeEvent);

    if (!meth)
    {
        QAbstractItemView::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t,PyObject *,QResizeEvent *);

    sipVH_QtGui_2(sipGILState,meth,a0);
}

void sipQAbstractItemView::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QAbstractItemView::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

QVariant sipQAbstractItemView::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[53]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!meth)
        return QAbstractItemView::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t,PyObject *,Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState,meth,a0);
}

bool sipQAbstractItemView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!meth)
        return QAbstractItemView::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_11(sip_gilstate_t,PyObject *,bool);

    return sipVH_QtGui_11(sipGILState,meth,a0);
}

void sipQAbstractItemView::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!meth)
    {
        QAbstractItemView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t,PyObject *,QInputMethodEvent *);

    sipVH_QtGui_13(sipGILState,meth,a0);
}

QSize sipQAbstractItemView::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[56]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!meth)
        return QAbstractScrollArea::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_4(sipGILState,meth);
}

QSize sipQAbstractItemView::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[57]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QAbstractScrollArea::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_4(sipGILState,meth);
}

void sipQAbstractItemView::paintEvent(QPaintEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[58],sipPySelf,NULL,sipName_paintEvent);

    if (!meth)
    {
        QAbstractScrollArea::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t,PyObject *,QPaintEvent *);

    sipVH_QtGui_3(sipGILState,meth,a0);
}

void sipQAbstractItemView::wheelEvent(QWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[59],sipPySelf,NULL,sipName_wheelEvent);

    if (!meth)
    {
        QAbstractScrollArea::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t,PyObject *,QWheelEvent *);

    sipVH_QtGui_5(sipGILState,meth,a0);
}

void sipQAbstractItemView::contextMenuEvent(QContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[60],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!meth)
    {
        QAbstractScrollArea::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t,PyObject *,QContextMenuEvent *);

    sipVH_QtGui_21(sipGILState,meth,a0);
}

void sipQAbstractItemView::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[61],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!meth)
    {
        QAbstractScrollArea::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtGui_32(sip_gilstate_t,PyObject *,int,int);

    sipVH_QtGui_32(sipGILState,meth,a0,a1);
}

void sipQAbstractItemView::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[62],sipPySelf,NULL,sipName_changeEvent);

    if (!meth)
    {
        QFrame::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

int sipQAbstractItemView::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[63]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

void sipQAbstractItemView::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[64],sipPySelf,NULL,sipName_setVisible);

    if (!meth)
    {
        QWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

int sipQAbstractItemView::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[65]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QWidget::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

QPaintEngine * sipQAbstractItemView::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[66]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QWidget::paintEngine();

    extern QPaintEngine * sipVH_QtGui_27(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_27(sipGILState,meth);
}

void sipQAbstractItemView::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[67],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!meth)
    {
        QWidget::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQAbstractItemView::enterEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[68],sipPySelf,NULL,sipName_enterEvent);

    if (!meth)
    {
        QWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQAbstractItemView::leaveEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[69],sipPySelf,NULL,sipName_leaveEvent);

    if (!meth)
    {
        QWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQAbstractItemView::moveEvent(QMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[70],sipPySelf,NULL,sipName_moveEvent);

    if (!meth)
    {
        QWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t,PyObject *,QMoveEvent *);

    sipVH_QtGui_23(sipGILState,meth,a0);
}

void sipQAbstractItemView::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[71],sipPySelf,NULL,sipName_closeEvent);

    if (!meth)
    {
        QWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t,PyObject *,QCloseEvent *);

    sipVH_QtGui_22(sipGILState,meth,a0);
}

void sipQAbstractItemView::tabletEvent(QTabletEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[72],sipPySelf,NULL,sipName_tabletEvent);

    if (!meth)
    {
        QWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t,PyObject *,QTabletEvent *);

    sipVH_QtGui_20(sipGILState,meth,a0);
}

void sipQAbstractItemView::actionEvent(QActionEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[73],sipPySelf,NULL,sipName_actionEvent);

    if (!meth)
    {
        QWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t,PyObject *,QActionEvent *);

    sipVH_QtGui_19(sipGILState,meth,a0);
}

void sipQAbstractItemView::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[74],sipPySelf,NULL,sipName_showEvent);

    if (!meth)
    {
        QWidget::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t,PyObject *,QShowEvent *);

    sipVH_QtGui_1(sipGILState,meth,a0);
}

void sipQAbstractItemView::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[75],sipPySelf,NULL,sipName_hideEvent);

    if (!meth)
    {
        QWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t,PyObject *,QHideEvent *);

    sipVH_QtGui_0(sipGILState,meth,a0);
}

int sipQAbstractItemView::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[76]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QWidget::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t,PyObject *,QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState,meth,a0);
}

void sipQAbstractItemView::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[77],sipPySelf,NULL,sipName_enabledChange);

    if (!meth)
    {
        QWidget::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQAbstractItemView::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[78],sipPySelf,NULL,sipName_paletteChange);

    if (!meth)
    {
        QWidget::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t,PyObject *,const QPalette&);

    sipVH_QtGui_10(sipGILState,meth,a0);
}

void sipQAbstractItemView::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[79],sipPySelf,NULL,sipName_fontChange);

    if (!meth)
    {
        QWidget::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t,PyObject *,const QFont&);

    sipVH_QtGui_9(sipGILState,meth,a0);
}

void sipQAbstractItemView::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[80],sipPySelf,NULL,sipName_windowActivationChange);

    if (!meth)
    {
        QWidget::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQAbstractItemView::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[81],sipPySelf,NULL,sipName_languageChange);

    if (!meth)
    {
        QWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

bool sipQAbstractItemView::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[82],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQAbstractItemView::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[83],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQAbstractItemView::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[84],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQAbstractItemView::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[85],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQAbstractItemView::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[86],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QAbstractItemView_setModel, "QAbstractItemView.setModel(QAbstractItemModel)");

extern "C" {static PyObject *meth_QAbstractItemView_setModel(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemModel * a0;
        PyObject *a0Keep;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::setModel(a0) : sipCpp->setModel(a0));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, 2, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setModel, doc_QAbstractItemView_setModel);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_model, "QAbstractItemView.model() -> QAbstractItemModel");

extern "C" {static PyObject *meth_QAbstractItemView_model(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_model(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QAbstractItemModel *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->model();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractItemModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_model, doc_QAbstractItemView_model);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setSelectionModel, "QAbstractItemView.setSelectionModel(QItemSelectionModel)");

extern "C" {static PyObject *meth_QAbstractItemView_setSelectionModel(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setSelectionModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QItemSelectionModel * a0;
        PyObject *a0Keep;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0Keep, sipType_QItemSelectionModel, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::setSelectionModel(a0) : sipCpp->setSelectionModel(a0));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, 3, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setSelectionModel, doc_QAbstractItemView_setSelectionModel);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_selectionModel, "QAbstractItemView.selectionModel() -> QItemSelectionModel");

extern "C" {static PyObject *meth_QAbstractItemView_selectionModel(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_selectionModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QItemSelectionModel *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->selectionModel();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QItemSelectionModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_selectionModel, doc_QAbstractItemView_selectionModel);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setItemDelegate, "QAbstractItemView.setItemDelegate(QAbstractItemDelegate)");

extern "C" {static PyObject *meth_QAbstractItemView_setItemDelegate(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setItemDelegate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemDelegate * a0;
        PyObject *a0Keep;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0Keep, sipType_QAbstractItemDelegate, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemDelegate(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, 4, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setItemDelegate, doc_QAbstractItemView_setItemDelegate);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_itemDelegate, "QAbstractItemView.itemDelegate() -> QAbstractItemDelegate\n"
    "QAbstractItemView.itemDelegate(QModelIndex) -> QAbstractItemDelegate");

extern "C" {static PyObject *meth_QAbstractItemView_itemDelegate(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_itemDelegate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QAbstractItemDelegate *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemDelegate();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractItemDelegate,NULL);
        }
    }

    {
        const QModelIndex * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            QAbstractItemDelegate *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemDelegate(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractItemDelegate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_itemDelegate, doc_QAbstractItemView_itemDelegate);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setSelectionMode, "QAbstractItemView.setSelectionMode(QAbstractItemView.SelectionMode)");

extern "C" {static PyObject *meth_QAbstractItemView_setSelectionMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setSelectionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView::SelectionMode a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_SelectionMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSelectionMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setSelectionMode, doc_QAbstractItemView_setSelectionMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_selectionMode, "QAbstractItemView.selectionMode() -> QAbstractItemView.SelectionMode");

extern "C" {static PyObject *meth_QAbstractItemView_selectionMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_selectionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QAbstractItemView::SelectionMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->selectionMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_SelectionMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_selectionMode, doc_QAbstractItemView_selectionMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setSelectionBehavior, "QAbstractItemView.setSelectionBehavior(QAbstractItemView.SelectionBehavior)");

extern "C" {static PyObject *meth_QAbstractItemView_setSelectionBehavior(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setSelectionBehavior(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView::SelectionBehavior a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_SelectionBehavior, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSelectionBehavior(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setSelectionBehavior, doc_QAbstractItemView_setSelectionBehavior);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_selectionBehavior, "QAbstractItemView.selectionBehavior() -> QAbstractItemView.SelectionBehavior");

extern "C" {static PyObject *meth_QAbstractItemView_selectionBehavior(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_selectionBehavior(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QAbstractItemView::SelectionBehavior sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->selectionBehavior();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_SelectionBehavior);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_selectionBehavior, doc_QAbstractItemView_selectionBehavior);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_currentIndex, "QAbstractItemView.currentIndex() -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractItemView_currentIndex(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_currentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->currentIndex());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_currentIndex, doc_QAbstractItemView_currentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_rootIndex, "QAbstractItemView.rootIndex() -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractItemView_rootIndex(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_rootIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->rootIndex());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_rootIndex, doc_QAbstractItemView_rootIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setEditTriggers, "QAbstractItemView.setEditTriggers(QAbstractItemView.EditTriggers)");

extern "C" {static PyObject *meth_QAbstractItemView_setEditTriggers(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setEditTriggers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView::EditTriggers * a0;
        int a0State = 0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_EditTriggers, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEditTriggers(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QAbstractItemView_EditTriggers,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setEditTriggers, doc_QAbstractItemView_setEditTriggers);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_editTriggers, "QAbstractItemView.editTriggers() -> QAbstractItemView.EditTriggers");

extern "C" {static PyObject *meth_QAbstractItemView_editTriggers(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_editTriggers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QAbstractItemView::EditTriggers *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QAbstractItemView::EditTriggers(sipCpp->editTriggers());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QAbstractItemView_EditTriggers,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_editTriggers, doc_QAbstractItemView_editTriggers);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setAutoScroll, "QAbstractItemView.setAutoScroll(bool)");

extern "C" {static PyObject *meth_QAbstractItemView_setAutoScroll(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setAutoScroll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoScroll(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setAutoScroll, doc_QAbstractItemView_setAutoScroll);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_hasAutoScroll, "QAbstractItemView.hasAutoScroll() -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_hasAutoScroll(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_hasAutoScroll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasAutoScroll();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_hasAutoScroll, doc_QAbstractItemView_hasAutoScroll);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setTabKeyNavigation, "QAbstractItemView.setTabKeyNavigation(bool)");

extern "C" {static PyObject *meth_QAbstractItemView_setTabKeyNavigation(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setTabKeyNavigation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabKeyNavigation(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setTabKeyNavigation, doc_QAbstractItemView_setTabKeyNavigation);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_tabKeyNavigation, "QAbstractItemView.tabKeyNavigation() -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_tabKeyNavigation(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_tabKeyNavigation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tabKeyNavigation();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_tabKeyNavigation, doc_QAbstractItemView_tabKeyNavigation);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setDropIndicatorShown, "QAbstractItemView.setDropIndicatorShown(bool)");

extern "C" {static PyObject *meth_QAbstractItemView_setDropIndicatorShown(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setDropIndicatorShown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDropIndicatorShown(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setDropIndicatorShown, doc_QAbstractItemView_setDropIndicatorShown);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_showDropIndicator, "QAbstractItemView.showDropIndicator() -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_showDropIndicator(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_showDropIndicator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->showDropIndicator();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_showDropIndicator, doc_QAbstractItemView_showDropIndicator);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setDragEnabled, "QAbstractItemView.setDragEnabled(bool)");

extern "C" {static PyObject *meth_QAbstractItemView_setDragEnabled(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setDragEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDragEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setDragEnabled, doc_QAbstractItemView_setDragEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dragEnabled, "QAbstractItemView.dragEnabled() -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_dragEnabled(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dragEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->dragEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dragEnabled, doc_QAbstractItemView_dragEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setAlternatingRowColors, "QAbstractItemView.setAlternatingRowColors(bool)");

extern "C" {static PyObject *meth_QAbstractItemView_setAlternatingRowColors(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setAlternatingRowColors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAlternatingRowColors(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setAlternatingRowColors, doc_QAbstractItemView_setAlternatingRowColors);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_alternatingRowColors, "QAbstractItemView.alternatingRowColors() -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_alternatingRowColors(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_alternatingRowColors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->alternatingRowColors();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_alternatingRowColors, doc_QAbstractItemView_alternatingRowColors);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setIconSize, "QAbstractItemView.setIconSize(QSize)");

extern "C" {static PyObject *meth_QAbstractItemView_setIconSize(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setIconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QSize, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIconSize(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setIconSize, doc_QAbstractItemView_setIconSize);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_iconSize, "QAbstractItemView.iconSize() -> QSize");

extern "C" {static PyObject *meth_QAbstractItemView_iconSize(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_iconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->iconSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_iconSize, doc_QAbstractItemView_iconSize);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setTextElideMode, "QAbstractItemView.setTextElideMode(Qt.TextElideMode)");

extern "C" {static PyObject *meth_QAbstractItemView_setTextElideMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setTextElideMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::TextElideMode a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_Qt_TextElideMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextElideMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setTextElideMode, doc_QAbstractItemView_setTextElideMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_textElideMode, "QAbstractItemView.textElideMode() -> Qt.TextElideMode");

extern "C" {static PyObject *meth_QAbstractItemView_textElideMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_textElideMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            Qt::TextElideMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->textElideMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_TextElideMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_textElideMode, doc_QAbstractItemView_textElideMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_keyboardSearch, "QAbstractItemView.keyboardSearch(QString)");

extern "C" {static PyObject *meth_QAbstractItemView_keyboardSearch(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_keyboardSearch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::keyboardSearch(*a0) : sipCpp->keyboardSearch(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_keyboardSearch, doc_QAbstractItemView_keyboardSearch);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_visualRect, "QAbstractItemView.visualRect(QModelIndex) -> QRect");

extern "C" {static PyObject *meth_QAbstractItemView_visualRect(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_visualRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QModelIndex * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            QRect *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_visualRect);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->visualRect(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_visualRect, doc_QAbstractItemView_visualRect);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_scrollTo, "QAbstractItemView.scrollTo(QModelIndex, QAbstractItemView.ScrollHint hint=QAbstractItemView.EnsureVisible)");

extern "C" {static PyObject *meth_QAbstractItemView_scrollTo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_scrollTo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QModelIndex * a0;
        QAbstractItemView::ScrollHint a1 = QAbstractItemView::EnsureVisible;
        QAbstractItemView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_hint,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemView_ScrollHint, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_scrollTo);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->scrollTo(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_scrollTo, doc_QAbstractItemView_scrollTo);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_indexAt, "QAbstractItemView.indexAt(QPoint) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractItemView_indexAt(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_indexAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QPoint * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QPoint, &a0))
        {
            QModelIndex *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_indexAt);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->indexAt(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_indexAt, doc_QAbstractItemView_indexAt);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_sizeHintForIndex, "QAbstractItemView.sizeHintForIndex(QModelIndex) -> QSize");

extern "C" {static PyObject *meth_QAbstractItemView_sizeHintForIndex(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_sizeHintForIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->sizeHintForIndex(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_sizeHintForIndex, doc_QAbstractItemView_sizeHintForIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_sizeHintForRow, "QAbstractItemView.sizeHintForRow(int) -> int");

extern "C" {static PyObject *meth_QAbstractItemView_sizeHintForRow(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_sizeHintForRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemView::sizeHintForRow(a0) : sipCpp->sizeHintForRow(a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_sizeHintForRow, doc_QAbstractItemView_sizeHintForRow);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_sizeHintForColumn, "QAbstractItemView.sizeHintForColumn(int) -> int");

extern "C" {static PyObject *meth_QAbstractItemView_sizeHintForColumn(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_sizeHintForColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemView::sizeHintForColumn(a0) : sipCpp->sizeHintForColumn(a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_sizeHintForColumn, doc_QAbstractItemView_sizeHintForColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_openPersistentEditor, "QAbstractItemView.openPersistentEditor(QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemView_openPersistentEditor(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_openPersistentEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->openPersistentEditor(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_openPersistentEditor, doc_QAbstractItemView_openPersistentEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_closePersistentEditor, "QAbstractItemView.closePersistentEditor(QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemView_closePersistentEditor(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_closePersistentEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->closePersistentEditor(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_closePersistentEditor, doc_QAbstractItemView_closePersistentEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setIndexWidget, "QAbstractItemView.setIndexWidget(QModelIndex, QWidget)");

extern "C" {static PyObject *meth_QAbstractItemView_setIndexWidget(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setIndexWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex * a0;
        QWidget * a1;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J:", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, sipType_QWidget, &a1))
        {
#line 148 "/home/maemo/python-qt4-4.7/sip/QtGui/qabstractitemview.sip"
        // We have to break the association with any existing widget.
        QWidget *w = sipCpp->indexWidget(*a0);
        
        if (w)
        {
            PyObject *wo = sipGetPyObject(w, sipType_QWidget);
        
            if (wo)
                sipTransferBreak(wo);
        }
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setIndexWidget(*a0, a1);
        Py_END_ALLOW_THREADS
#line 3118 "sipQtGuiQAbstractItemView.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setIndexWidget, doc_QAbstractItemView_setIndexWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_indexWidget, "QAbstractItemView.indexWidget(QModelIndex) -> QWidget");

extern "C" {static PyObject *meth_QAbstractItemView_indexWidget(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_indexWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexWidget(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_indexWidget, doc_QAbstractItemView_indexWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_reset, "QAbstractItemView.reset()");

extern "C" {static PyObject *meth_QAbstractItemView_reset(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::reset() : sipCpp->reset());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_reset, doc_QAbstractItemView_reset);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setRootIndex, "QAbstractItemView.setRootIndex(QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemView_setRootIndex(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setRootIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::setRootIndex(*a0) : sipCpp->setRootIndex(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setRootIndex, doc_QAbstractItemView_setRootIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_doItemsLayout, "QAbstractItemView.doItemsLayout()");

extern "C" {static PyObject *meth_QAbstractItemView_doItemsLayout(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_doItemsLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::doItemsLayout() : sipCpp->doItemsLayout());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_doItemsLayout, doc_QAbstractItemView_doItemsLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_selectAll, "QAbstractItemView.selectAll()");

extern "C" {static PyObject *meth_QAbstractItemView_selectAll(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_selectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::selectAll() : sipCpp->selectAll());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_selectAll, doc_QAbstractItemView_selectAll);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_edit, "QAbstractItemView.edit(QModelIndex)\n"
    "QAbstractItemView.edit(QModelIndex, QAbstractItemView.EditTrigger, QEvent) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_edit(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_edit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->edit(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QModelIndex * a0;
        QAbstractItemView::EditTrigger a1;
        QEvent * a2;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9EJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemView_EditTrigger, &a1, sipType_QEvent, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemView::edit(*a0,a1,a2) : sipCpp->edit(*a0,a1,a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_edit, doc_QAbstractItemView_edit);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_clearSelection, "QAbstractItemView.clearSelection()");

extern "C" {static PyObject *meth_QAbstractItemView_clearSelection(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_clearSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearSelection();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_clearSelection, doc_QAbstractItemView_clearSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setCurrentIndex, "QAbstractItemView.setCurrentIndex(QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemView_setCurrentIndex(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setCurrentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentIndex(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setCurrentIndex, doc_QAbstractItemView_setCurrentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_scrollToTop, "QAbstractItemView.scrollToTop()");

extern "C" {static PyObject *meth_QAbstractItemView_scrollToTop(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_scrollToTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->scrollToTop();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_scrollToTop, doc_QAbstractItemView_scrollToTop);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_scrollToBottom, "QAbstractItemView.scrollToBottom()");

extern "C" {static PyObject *meth_QAbstractItemView_scrollToBottom(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_scrollToBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->scrollToBottom();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_scrollToBottom, doc_QAbstractItemView_scrollToBottom);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_update, "QAbstractItemView.update()\n"
    "QAbstractItemView.update(QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemView_update(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_update(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->update();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QModelIndex * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->update(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_update, doc_QAbstractItemView_update);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dataChanged, "QAbstractItemView.dataChanged(QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemView_dataChanged(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dataChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        const QModelIndex * a1;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::dataChanged(*a0,*a1) : sipCpp->dataChanged(*a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dataChanged, doc_QAbstractItemView_dataChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_rowsInserted, "QAbstractItemView.rowsInserted(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QAbstractItemView_rowsInserted(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_rowsInserted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        int a1;
        int a2;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::rowsInserted(*a0,a1,a2) : sipCpp->rowsInserted(*a0,a1,a2));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_rowsInserted, doc_QAbstractItemView_rowsInserted);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_rowsAboutToBeRemoved, "QAbstractItemView.rowsAboutToBeRemoved(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QAbstractItemView_rowsAboutToBeRemoved(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_rowsAboutToBeRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        int a1;
        int a2;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::rowsAboutToBeRemoved(*a0,a1,a2) : sipCpp->rowsAboutToBeRemoved(*a0,a1,a2));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_rowsAboutToBeRemoved, doc_QAbstractItemView_rowsAboutToBeRemoved);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_selectionChanged, "QAbstractItemView.selectionChanged(QItemSelection, QItemSelection)");

extern "C" {static PyObject *meth_QAbstractItemView_selectionChanged(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_selectionChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection * a0;
        const QItemSelection * a1;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QItemSelection, &a0, sipType_QItemSelection, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::selectionChanged(*a0,*a1) : sipCpp->selectionChanged(*a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_selectionChanged, doc_QAbstractItemView_selectionChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_currentChanged, "QAbstractItemView.currentChanged(QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemView_currentChanged(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_currentChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        const QModelIndex * a1;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::currentChanged(*a0,*a1) : sipCpp->currentChanged(*a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_currentChanged, doc_QAbstractItemView_currentChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_updateEditorData, "QAbstractItemView.updateEditorData()");

extern "C" {static PyObject *meth_QAbstractItemView_updateEditorData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_updateEditorData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::updateEditorData() : sipCpp->updateEditorData());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_updateEditorData, doc_QAbstractItemView_updateEditorData);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_updateEditorGeometries, "QAbstractItemView.updateEditorGeometries()");

extern "C" {static PyObject *meth_QAbstractItemView_updateEditorGeometries(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_updateEditorGeometries(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::updateEditorGeometries() : sipCpp->updateEditorGeometries());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_updateEditorGeometries, doc_QAbstractItemView_updateEditorGeometries);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_updateGeometries, "QAbstractItemView.updateGeometries()");

extern "C" {static PyObject *meth_QAbstractItemView_updateGeometries(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_updateGeometries(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::updateGeometries() : sipCpp->updateGeometries());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_updateGeometries, doc_QAbstractItemView_updateGeometries);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_verticalScrollbarAction, "QAbstractItemView.verticalScrollbarAction(int)");

extern "C" {static PyObject *meth_QAbstractItemView_verticalScrollbarAction(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_verticalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::verticalScrollbarAction(a0) : sipCpp->verticalScrollbarAction(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_verticalScrollbarAction, doc_QAbstractItemView_verticalScrollbarAction);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_horizontalScrollbarAction, "QAbstractItemView.horizontalScrollbarAction(int)");

extern "C" {static PyObject *meth_QAbstractItemView_horizontalScrollbarAction(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_horizontalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::horizontalScrollbarAction(a0) : sipCpp->horizontalScrollbarAction(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_horizontalScrollbarAction, doc_QAbstractItemView_horizontalScrollbarAction);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_verticalScrollbarValueChanged, "QAbstractItemView.verticalScrollbarValueChanged(int)");

extern "C" {static PyObject *meth_QAbstractItemView_verticalScrollbarValueChanged(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_verticalScrollbarValueChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::verticalScrollbarValueChanged(a0) : sipCpp->verticalScrollbarValueChanged(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_verticalScrollbarValueChanged, doc_QAbstractItemView_verticalScrollbarValueChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_horizontalScrollbarValueChanged, "QAbstractItemView.horizontalScrollbarValueChanged(int)");

extern "C" {static PyObject *meth_QAbstractItemView_horizontalScrollbarValueChanged(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_horizontalScrollbarValueChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::horizontalScrollbarValueChanged(a0) : sipCpp->horizontalScrollbarValueChanged(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_horizontalScrollbarValueChanged, doc_QAbstractItemView_horizontalScrollbarValueChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_closeEditor, "QAbstractItemView.closeEditor(QWidget, QAbstractItemDelegate.EndEditHint)");

extern "C" {static PyObject *meth_QAbstractItemView_closeEditor(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_closeEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0;
        QAbstractItemDelegate::EndEditHint a1;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8E", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QWidget, &a0, sipType_QAbstractItemDelegate_EndEditHint, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::closeEditor(a0,a1) : sipCpp->closeEditor(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_closeEditor, doc_QAbstractItemView_closeEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_commitData, "QAbstractItemView.commitData(QWidget)");

extern "C" {static PyObject *meth_QAbstractItemView_commitData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_commitData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::commitData(a0) : sipCpp->commitData(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_commitData, doc_QAbstractItemView_commitData);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_editorDestroyed, "QAbstractItemView.editorDestroyed(QObject)");

extern "C" {static PyObject *meth_QAbstractItemView_editorDestroyed(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_editorDestroyed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QObject, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::editorDestroyed(a0) : sipCpp->editorDestroyed(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_editorDestroyed, doc_QAbstractItemView_editorDestroyed);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setHorizontalStepsPerItem, "QAbstractItemView.setHorizontalStepsPerItem(int)");

extern "C" {static PyObject *meth_QAbstractItemView_setHorizontalStepsPerItem(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setHorizontalStepsPerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHorizontalStepsPerItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setHorizontalStepsPerItem, doc_QAbstractItemView_setHorizontalStepsPerItem);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_horizontalStepsPerItem, "QAbstractItemView.horizontalStepsPerItem() -> int");

extern "C" {static PyObject *meth_QAbstractItemView_horizontalStepsPerItem(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_horizontalStepsPerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->horizontalStepsPerItem();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_horizontalStepsPerItem, doc_QAbstractItemView_horizontalStepsPerItem);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setVerticalStepsPerItem, "QAbstractItemView.setVerticalStepsPerItem(int)");

extern "C" {static PyObject *meth_QAbstractItemView_setVerticalStepsPerItem(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setVerticalStepsPerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setVerticalStepsPerItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setVerticalStepsPerItem, doc_QAbstractItemView_setVerticalStepsPerItem);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_verticalStepsPerItem, "QAbstractItemView.verticalStepsPerItem() -> int");

extern "C" {static PyObject *meth_QAbstractItemView_verticalStepsPerItem(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_verticalStepsPerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->verticalStepsPerItem();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_verticalStepsPerItem, doc_QAbstractItemView_verticalStepsPerItem);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_moveCursor, "QAbstractItemView.moveCursor(QAbstractItemView.CursorAction, Qt.KeyboardModifiers) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractItemView_moveCursor(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_moveCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAbstractItemView::CursorAction a0;
        Qt::KeyboardModifiers * a1;
        int a1State = 0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_CursorAction, &a0, sipType_Qt_KeyboardModifiers, &a1, &a1State))
        {
            QModelIndex *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_moveCursor);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->moveCursor(a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_Qt_KeyboardModifiers,a1State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_moveCursor, doc_QAbstractItemView_moveCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_horizontalOffset, "QAbstractItemView.horizontalOffset() -> int");

extern "C" {static PyObject *meth_QAbstractItemView_horizontalOffset(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_horizontalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_horizontalOffset);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->horizontalOffset();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_horizontalOffset, doc_QAbstractItemView_horizontalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_verticalOffset, "QAbstractItemView.verticalOffset() -> int");

extern "C" {static PyObject *meth_QAbstractItemView_verticalOffset(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_verticalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_verticalOffset);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->verticalOffset();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_verticalOffset, doc_QAbstractItemView_verticalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_isIndexHidden, "QAbstractItemView.isIndexHidden(QModelIndex) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_isIndexHidden(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_isIndexHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QModelIndex * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_isIndexHidden);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isIndexHidden(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_isIndexHidden, doc_QAbstractItemView_isIndexHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setSelection, "QAbstractItemView.setSelection(QRect, QItemSelectionModel.SelectionFlags)");

extern "C" {static PyObject *meth_QAbstractItemView_setSelection(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QRect * a0;
        QItemSelectionModel::SelectionFlags * a1;
        int a1State = 0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QRect, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_setSelection);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSelection(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setSelection, doc_QAbstractItemView_setSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_visualRegionForSelection, "QAbstractItemView.visualRegionForSelection(QItemSelection) -> QRegion");

extern "C" {static PyObject *meth_QAbstractItemView_visualRegionForSelection(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_visualRegionForSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QItemSelection * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QItemSelection, &a0))
        {
            QRegion *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_visualRegionForSelection);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRegion(sipCpp->visualRegionForSelection(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_visualRegionForSelection, doc_QAbstractItemView_visualRegionForSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_selectedIndexes, "QAbstractItemView.selectedIndexes() -> list-of-QModelIndex");

extern "C" {static PyObject *meth_QAbstractItemView_selectedIndexes(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_selectedIndexes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QModelIndexList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndexList((sipSelfWasArg ? sipCpp->QAbstractItemView::selectedIndexes() : sipCpp->selectedIndexes()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_selectedIndexes, doc_QAbstractItemView_selectedIndexes);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_selectionCommand, "QAbstractItemView.selectionCommand(QModelIndex, QEvent event=None) -> QItemSelectionModel.SelectionFlags");

extern "C" {static PyObject *meth_QAbstractItemView_selectionCommand(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_selectionCommand(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        const QEvent * a1 = 0;
        QAbstractItemView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "pJ9|J8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, sipType_QEvent, &a1))
        {
            QItemSelectionModel::SelectionFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QItemSelectionModel::SelectionFlags((sipSelfWasArg ? sipCpp->QAbstractItemView::selectionCommand(*a0,a1) : sipCpp->selectionCommand(*a0,a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionModel_SelectionFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_selectionCommand, doc_QAbstractItemView_selectionCommand);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_startDrag, "QAbstractItemView.startDrag(Qt.DropActions)");

extern "C" {static PyObject *meth_QAbstractItemView_startDrag(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_startDrag(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::DropActions * a0;
        int a0State = 0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_Qt_DropActions, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::startDrag(*a0) : sipCpp->startDrag(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_DropActions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_startDrag, doc_QAbstractItemView_startDrag);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_viewOptions, "QAbstractItemView.viewOptions() -> QStyleOptionViewItem");

extern "C" {static PyObject *meth_QAbstractItemView_viewOptions(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_viewOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QStyleOptionViewItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStyleOptionViewItem((sipSelfWasArg ? sipCpp->QAbstractItemView::viewOptions() : sipCpp->viewOptions()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStyleOptionViewItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_viewOptions, doc_QAbstractItemView_viewOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_state, "QAbstractItemView.state() -> QAbstractItemView.State");

extern "C" {static PyObject *meth_QAbstractItemView_state(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QAbstractItemView::State sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->state();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_state, doc_QAbstractItemView_state);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setState, "QAbstractItemView.setState(QAbstractItemView.State)");

extern "C" {static PyObject *meth_QAbstractItemView_setState(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView::State a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_State, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setState(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setState, doc_QAbstractItemView_setState);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_scheduleDelayedItemsLayout, "QAbstractItemView.scheduleDelayedItemsLayout()");

extern "C" {static PyObject *meth_QAbstractItemView_scheduleDelayedItemsLayout(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_scheduleDelayedItemsLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->scheduleDelayedItemsLayout();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_scheduleDelayedItemsLayout, doc_QAbstractItemView_scheduleDelayedItemsLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_executeDelayedItemsLayout, "QAbstractItemView.executeDelayedItemsLayout()");

extern "C" {static PyObject *meth_QAbstractItemView_executeDelayedItemsLayout(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_executeDelayedItemsLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->executeDelayedItemsLayout();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_executeDelayedItemsLayout, doc_QAbstractItemView_executeDelayedItemsLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_scrollDirtyRegion, "QAbstractItemView.scrollDirtyRegion(int, int)");

extern "C" {static PyObject *meth_QAbstractItemView_scrollDirtyRegion(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_scrollDirtyRegion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->scrollDirtyRegion(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_scrollDirtyRegion, doc_QAbstractItemView_scrollDirtyRegion);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setDirtyRegion, "QAbstractItemView.setDirtyRegion(QRegion)");

extern "C" {static PyObject *meth_QAbstractItemView_setDirtyRegion(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setDirtyRegion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRegion * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QRegion, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDirtyRegion(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setDirtyRegion, doc_QAbstractItemView_setDirtyRegion);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dirtyRegionOffset, "QAbstractItemView.dirtyRegionOffset() -> QPoint");

extern "C" {static PyObject *meth_QAbstractItemView_dirtyRegionOffset(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dirtyRegionOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QPoint *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->dirtyRegionOffset());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dirtyRegionOffset, doc_QAbstractItemView_dirtyRegionOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_event, "QAbstractItemView.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_event(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemView::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_event, doc_QAbstractItemView_event);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_viewportEvent, "QAbstractItemView.viewportEvent(QEvent) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_viewportEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_viewportEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemView::viewportEvent(a0) : sipCpp->viewportEvent(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_viewportEvent, doc_QAbstractItemView_viewportEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_mousePressEvent, "QAbstractItemView.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_mousePressEvent, doc_QAbstractItemView_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_mouseMoveEvent, "QAbstractItemView.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_mouseMoveEvent, doc_QAbstractItemView_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_mouseReleaseEvent, "QAbstractItemView.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_mouseReleaseEvent, doc_QAbstractItemView_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_mouseDoubleClickEvent, "QAbstractItemView.mouseDoubleClickEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_mouseDoubleClickEvent, doc_QAbstractItemView_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dragEnterEvent, "QAbstractItemView.dragEnterEvent(QDragEnterEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::dragEnterEvent(a0) : sipCpp->dragEnterEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dragEnterEvent, doc_QAbstractItemView_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dragMoveEvent, "QAbstractItemView.dragMoveEvent(QDragMoveEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::dragMoveEvent(a0) : sipCpp->dragMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dragMoveEvent, doc_QAbstractItemView_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dragLeaveEvent, "QAbstractItemView.dragLeaveEvent(QDragLeaveEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::dragLeaveEvent(a0) : sipCpp->dragLeaveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dragLeaveEvent, doc_QAbstractItemView_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dropEvent, "QAbstractItemView.dropEvent(QDropEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QDropEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::dropEvent(a0) : sipCpp->dropEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dropEvent, doc_QAbstractItemView_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_focusInEvent, "QAbstractItemView.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::focusInEvent(a0) : sipCpp->focusInEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_focusInEvent, doc_QAbstractItemView_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_focusOutEvent, "QAbstractItemView.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_focusOutEvent, doc_QAbstractItemView_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_keyPressEvent, "QAbstractItemView.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_keyPressEvent, doc_QAbstractItemView_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_resizeEvent, "QAbstractItemView.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::resizeEvent(a0) : sipCpp->resizeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_resizeEvent, doc_QAbstractItemView_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_timerEvent, "QAbstractItemView.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::timerEvent(a0) : sipCpp->timerEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_timerEvent, doc_QAbstractItemView_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dropIndicatorPosition, "QAbstractItemView.dropIndicatorPosition() -> QAbstractItemView.DropIndicatorPosition");

extern "C" {static PyObject *meth_QAbstractItemView_dropIndicatorPosition(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dropIndicatorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QAbstractItemView::DropIndicatorPosition sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->dropIndicatorPosition();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_DropIndicatorPosition);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dropIndicatorPosition, doc_QAbstractItemView_dropIndicatorPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setVerticalScrollMode, "QAbstractItemView.setVerticalScrollMode(QAbstractItemView.ScrollMode)");

extern "C" {static PyObject *meth_QAbstractItemView_setVerticalScrollMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setVerticalScrollMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView::ScrollMode a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_ScrollMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setVerticalScrollMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setVerticalScrollMode, doc_QAbstractItemView_setVerticalScrollMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_verticalScrollMode, "QAbstractItemView.verticalScrollMode() -> QAbstractItemView.ScrollMode");

extern "C" {static PyObject *meth_QAbstractItemView_verticalScrollMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_verticalScrollMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QAbstractItemView::ScrollMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->verticalScrollMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_ScrollMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_verticalScrollMode, doc_QAbstractItemView_verticalScrollMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setHorizontalScrollMode, "QAbstractItemView.setHorizontalScrollMode(QAbstractItemView.ScrollMode)");

extern "C" {static PyObject *meth_QAbstractItemView_setHorizontalScrollMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setHorizontalScrollMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView::ScrollMode a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_ScrollMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHorizontalScrollMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setHorizontalScrollMode, doc_QAbstractItemView_setHorizontalScrollMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_horizontalScrollMode, "QAbstractItemView.horizontalScrollMode() -> QAbstractItemView.ScrollMode");

extern "C" {static PyObject *meth_QAbstractItemView_horizontalScrollMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_horizontalScrollMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QAbstractItemView::ScrollMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->horizontalScrollMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_ScrollMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_horizontalScrollMode, doc_QAbstractItemView_horizontalScrollMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setDragDropOverwriteMode, "QAbstractItemView.setDragDropOverwriteMode(bool)");

extern "C" {static PyObject *meth_QAbstractItemView_setDragDropOverwriteMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setDragDropOverwriteMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDragDropOverwriteMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setDragDropOverwriteMode, doc_QAbstractItemView_setDragDropOverwriteMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dragDropOverwriteMode, "QAbstractItemView.dragDropOverwriteMode() -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_dragDropOverwriteMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dragDropOverwriteMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->dragDropOverwriteMode();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dragDropOverwriteMode, doc_QAbstractItemView_dragDropOverwriteMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setDragDropMode, "QAbstractItemView.setDragDropMode(QAbstractItemView.DragDropMode)");

extern "C" {static PyObject *meth_QAbstractItemView_setDragDropMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setDragDropMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView::DragDropMode a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_DragDropMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDragDropMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setDragDropMode, doc_QAbstractItemView_setDragDropMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dragDropMode, "QAbstractItemView.dragDropMode() -> QAbstractItemView.DragDropMode");

extern "C" {static PyObject *meth_QAbstractItemView_dragDropMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dragDropMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QAbstractItemView::DragDropMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->dragDropMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_DragDropMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dragDropMode, doc_QAbstractItemView_dragDropMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setItemDelegateForRow, "QAbstractItemView.setItemDelegateForRow(int, QAbstractItemDelegate)");

extern "C" {static PyObject *meth_QAbstractItemView_setItemDelegateForRow(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setItemDelegateForRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractItemDelegate * a1;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0, sipType_QAbstractItemDelegate, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemDelegateForRow(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setItemDelegateForRow, doc_QAbstractItemView_setItemDelegateForRow);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_itemDelegateForRow, "QAbstractItemView.itemDelegateForRow(int) -> QAbstractItemDelegate");

extern "C" {static PyObject *meth_QAbstractItemView_itemDelegateForRow(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_itemDelegateForRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            QAbstractItemDelegate *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemDelegateForRow(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractItemDelegate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_itemDelegateForRow, doc_QAbstractItemView_itemDelegateForRow);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setItemDelegateForColumn, "QAbstractItemView.setItemDelegateForColumn(int, QAbstractItemDelegate)");

extern "C" {static PyObject *meth_QAbstractItemView_setItemDelegateForColumn(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setItemDelegateForColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractItemDelegate * a1;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0, sipType_QAbstractItemDelegate, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemDelegateForColumn(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setItemDelegateForColumn, doc_QAbstractItemView_setItemDelegateForColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_itemDelegateForColumn, "QAbstractItemView.itemDelegateForColumn(int) -> QAbstractItemDelegate");

extern "C" {static PyObject *meth_QAbstractItemView_itemDelegateForColumn(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_itemDelegateForColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            QAbstractItemDelegate *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemDelegateForColumn(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractItemDelegate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_itemDelegateForColumn, doc_QAbstractItemView_itemDelegateForColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_inputMethodQuery, "QAbstractItemView.inputMethodQuery(Qt.InputMethodQuery) -> QVariant");

extern "C" {static PyObject *meth_QAbstractItemView_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::InputMethodQuery a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QAbstractItemView::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_inputMethodQuery, doc_QAbstractItemView_inputMethodQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setAutoScrollMargin, "QAbstractItemView.setAutoScrollMargin(int)");

extern "C" {static PyObject *meth_QAbstractItemView_setAutoScrollMargin(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setAutoScrollMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoScrollMargin(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setAutoScrollMargin, doc_QAbstractItemView_setAutoScrollMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_autoScrollMargin, "QAbstractItemView.autoScrollMargin() -> int");

extern "C" {static PyObject *meth_QAbstractItemView_autoScrollMargin(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_autoScrollMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoScrollMargin();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_autoScrollMargin, doc_QAbstractItemView_autoScrollMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_focusNextPrevChild, "QAbstractItemView.focusNextPrevChild(bool) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemView::focusNextPrevChild(a0) : sipCpp->focusNextPrevChild(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_focusNextPrevChild, doc_QAbstractItemView_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_inputMethodEvent, "QAbstractItemView.inputMethodEvent(QInputMethodEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent * a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemView::inputMethodEvent(a0) : sipCpp->inputMethodEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_inputMethodEvent, doc_QAbstractItemView_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setDefaultDropAction, "QAbstractItemView.setDefaultDropAction(Qt.DropAction)");

extern "C" {static PyObject *meth_QAbstractItemView_setDefaultDropAction(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setDefaultDropAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::DropAction a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_Qt_DropAction, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDefaultDropAction(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setDefaultDropAction, doc_QAbstractItemView_setDefaultDropAction);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_defaultDropAction, "QAbstractItemView.defaultDropAction() -> Qt.DropAction");

extern "C" {static PyObject *meth_QAbstractItemView_defaultDropAction(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_defaultDropAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            Qt::DropAction sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->defaultDropAction();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_DropAction);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_defaultDropAction, doc_QAbstractItemView_defaultDropAction);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QAbstractItemView(void *, const sipTypeDef *);}
static void *cast_QAbstractItemView(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QAbstractItemView)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractScrollArea)->ctd_cast((QAbstractScrollArea *)(QAbstractItemView *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractItemView(void *, int);}
static void release_QAbstractItemView(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQAbstractItemView *>(sipCppV);
    else
        delete reinterpret_cast<QAbstractItemView *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QAbstractItemView(sipSimpleWrapper *);}
static void dealloc_QAbstractItemView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAbstractItemView *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAbstractItemView(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QAbstractItemView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QAbstractItemView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractItemView *sipCpp = 0;

    {
        QWidget * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQAbstractItemView(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractItemView[] = {{21, 255, 1}};


static PyMethodDef methods_QAbstractItemView[] = {
    {SIP_MLNAME_CAST(sipName_alternatingRowColors), meth_QAbstractItemView_alternatingRowColors, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_alternatingRowColors)},
    {SIP_MLNAME_CAST(sipName_autoScrollMargin), meth_QAbstractItemView_autoScrollMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_autoScrollMargin)},
    {SIP_MLNAME_CAST(sipName_clearSelection), meth_QAbstractItemView_clearSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_clearSelection)},
    {SIP_MLNAME_CAST(sipName_closeEditor), meth_QAbstractItemView_closeEditor, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_closeEditor)},
    {SIP_MLNAME_CAST(sipName_closePersistentEditor), meth_QAbstractItemView_closePersistentEditor, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_closePersistentEditor)},
    {SIP_MLNAME_CAST(sipName_commitData), meth_QAbstractItemView_commitData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_commitData)},
    {SIP_MLNAME_CAST(sipName_currentChanged), meth_QAbstractItemView_currentChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_currentChanged)},
    {SIP_MLNAME_CAST(sipName_currentIndex), meth_QAbstractItemView_currentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_currentIndex)},
    {SIP_MLNAME_CAST(sipName_dataChanged), meth_QAbstractItemView_dataChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_dataChanged)},
    {SIP_MLNAME_CAST(sipName_defaultDropAction), meth_QAbstractItemView_defaultDropAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_defaultDropAction)},
    {SIP_MLNAME_CAST(sipName_dirtyRegionOffset), meth_QAbstractItemView_dirtyRegionOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_dirtyRegionOffset)},
    {SIP_MLNAME_CAST(sipName_doItemsLayout), meth_QAbstractItemView_doItemsLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_doItemsLayout)},
    {SIP_MLNAME_CAST(sipName_dragDropMode), meth_QAbstractItemView_dragDropMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_dragDropMode)},
    {SIP_MLNAME_CAST(sipName_dragDropOverwriteMode), meth_QAbstractItemView_dragDropOverwriteMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_dragDropOverwriteMode)},
    {SIP_MLNAME_CAST(sipName_dragEnabled), meth_QAbstractItemView_dragEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_dragEnabled)},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QAbstractItemView_dragEnterEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_dragEnterEvent)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QAbstractItemView_dragLeaveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QAbstractItemView_dragMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QAbstractItemView_dropEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_dropEvent)},
    {SIP_MLNAME_CAST(sipName_dropIndicatorPosition), meth_QAbstractItemView_dropIndicatorPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_dropIndicatorPosition)},
    {SIP_MLNAME_CAST(sipName_edit), meth_QAbstractItemView_edit, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_edit)},
    {SIP_MLNAME_CAST(sipName_editTriggers), meth_QAbstractItemView_editTriggers, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_editTriggers)},
    {SIP_MLNAME_CAST(sipName_editorDestroyed), meth_QAbstractItemView_editorDestroyed, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_editorDestroyed)},
    {SIP_MLNAME_CAST(sipName_event), meth_QAbstractItemView_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_event)},
    {SIP_MLNAME_CAST(sipName_executeDelayedItemsLayout), meth_QAbstractItemView_executeDelayedItemsLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_executeDelayedItemsLayout)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QAbstractItemView_focusInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QAbstractItemView_focusNextPrevChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QAbstractItemView_focusOutEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_hasAutoScroll), meth_QAbstractItemView_hasAutoScroll, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_hasAutoScroll)},
    {SIP_MLNAME_CAST(sipName_horizontalOffset), meth_QAbstractItemView_horizontalOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_horizontalOffset)},
    {SIP_MLNAME_CAST(sipName_horizontalScrollMode), meth_QAbstractItemView_horizontalScrollMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_horizontalScrollMode)},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarAction), meth_QAbstractItemView_horizontalScrollbarAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_horizontalScrollbarAction)},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarValueChanged), meth_QAbstractItemView_horizontalScrollbarValueChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_horizontalScrollbarValueChanged)},
    {SIP_MLNAME_CAST(sipName_horizontalStepsPerItem), meth_QAbstractItemView_horizontalStepsPerItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_horizontalStepsPerItem)},
    {SIP_MLNAME_CAST(sipName_iconSize), meth_QAbstractItemView_iconSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_iconSize)},
    {SIP_MLNAME_CAST(sipName_indexAt), meth_QAbstractItemView_indexAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_indexAt)},
    {SIP_MLNAME_CAST(sipName_indexWidget), meth_QAbstractItemView_indexWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_indexWidget)},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_QAbstractItemView_inputMethodEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_inputMethodEvent)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QAbstractItemView_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_isIndexHidden), meth_QAbstractItemView_isIndexHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_isIndexHidden)},
    {SIP_MLNAME_CAST(sipName_itemDelegate), meth_QAbstractItemView_itemDelegate, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_itemDelegate)},
    {SIP_MLNAME_CAST(sipName_itemDelegateForColumn), meth_QAbstractItemView_itemDelegateForColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_itemDelegateForColumn)},
    {SIP_MLNAME_CAST(sipName_itemDelegateForRow), meth_QAbstractItemView_itemDelegateForRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_itemDelegateForRow)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QAbstractItemView_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyboardSearch), meth_QAbstractItemView_keyboardSearch, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_keyboardSearch)},
    {SIP_MLNAME_CAST(sipName_model), meth_QAbstractItemView_model, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_model)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QAbstractItemView_mouseDoubleClickEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QAbstractItemView_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QAbstractItemView_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QAbstractItemView_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveCursor), meth_QAbstractItemView_moveCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_moveCursor)},
    {SIP_MLNAME_CAST(sipName_openPersistentEditor), meth_QAbstractItemView_openPersistentEditor, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_openPersistentEditor)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QAbstractItemView_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_reset)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QAbstractItemView_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_rootIndex), meth_QAbstractItemView_rootIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_rootIndex)},
    {SIP_MLNAME_CAST(sipName_rowsAboutToBeRemoved), meth_QAbstractItemView_rowsAboutToBeRemoved, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_rowsAboutToBeRemoved)},
    {SIP_MLNAME_CAST(sipName_rowsInserted), meth_QAbstractItemView_rowsInserted, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_rowsInserted)},
    {SIP_MLNAME_CAST(sipName_scheduleDelayedItemsLayout), meth_QAbstractItemView_scheduleDelayedItemsLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_scheduleDelayedItemsLayout)},
    {SIP_MLNAME_CAST(sipName_scrollDirtyRegion), meth_QAbstractItemView_scrollDirtyRegion, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_scrollDirtyRegion)},
    {SIP_MLNAME_CAST(sipName_scrollTo), (PyCFunction)meth_QAbstractItemView_scrollTo, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_scrollTo)},
    {SIP_MLNAME_CAST(sipName_scrollToBottom), meth_QAbstractItemView_scrollToBottom, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_scrollToBottom)},
    {SIP_MLNAME_CAST(sipName_scrollToTop), meth_QAbstractItemView_scrollToTop, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_scrollToTop)},
    {SIP_MLNAME_CAST(sipName_selectAll), meth_QAbstractItemView_selectAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_selectAll)},
    {SIP_MLNAME_CAST(sipName_selectedIndexes), meth_QAbstractItemView_selectedIndexes, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_selectedIndexes)},
    {SIP_MLNAME_CAST(sipName_selectionBehavior), meth_QAbstractItemView_selectionBehavior, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_selectionBehavior)},
    {SIP_MLNAME_CAST(sipName_selectionChanged), meth_QAbstractItemView_selectionChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_selectionChanged)},
    {SIP_MLNAME_CAST(sipName_selectionCommand), (PyCFunction)meth_QAbstractItemView_selectionCommand, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_selectionCommand)},
    {SIP_MLNAME_CAST(sipName_selectionMode), meth_QAbstractItemView_selectionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_selectionMode)},
    {SIP_MLNAME_CAST(sipName_selectionModel), meth_QAbstractItemView_selectionModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_selectionModel)},
    {SIP_MLNAME_CAST(sipName_setAlternatingRowColors), meth_QAbstractItemView_setAlternatingRowColors, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setAlternatingRowColors)},
    {SIP_MLNAME_CAST(sipName_setAutoScroll), meth_QAbstractItemView_setAutoScroll, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setAutoScroll)},
    {SIP_MLNAME_CAST(sipName_setAutoScrollMargin), meth_QAbstractItemView_setAutoScrollMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setAutoScrollMargin)},
    {SIP_MLNAME_CAST(sipName_setCurrentIndex), meth_QAbstractItemView_setCurrentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setCurrentIndex)},
    {SIP_MLNAME_CAST(sipName_setDefaultDropAction), meth_QAbstractItemView_setDefaultDropAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setDefaultDropAction)},
    {SIP_MLNAME_CAST(sipName_setDirtyRegion), meth_QAbstractItemView_setDirtyRegion, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setDirtyRegion)},
    {SIP_MLNAME_CAST(sipName_setDragDropMode), meth_QAbstractItemView_setDragDropMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setDragDropMode)},
    {SIP_MLNAME_CAST(sipName_setDragDropOverwriteMode), meth_QAbstractItemView_setDragDropOverwriteMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setDragDropOverwriteMode)},
    {SIP_MLNAME_CAST(sipName_setDragEnabled), meth_QAbstractItemView_setDragEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setDragEnabled)},
    {SIP_MLNAME_CAST(sipName_setDropIndicatorShown), meth_QAbstractItemView_setDropIndicatorShown, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setDropIndicatorShown)},
    {SIP_MLNAME_CAST(sipName_setEditTriggers), meth_QAbstractItemView_setEditTriggers, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setEditTriggers)},
    {SIP_MLNAME_CAST(sipName_setHorizontalScrollMode), meth_QAbstractItemView_setHorizontalScrollMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setHorizontalScrollMode)},
    {SIP_MLNAME_CAST(sipName_setHorizontalStepsPerItem), meth_QAbstractItemView_setHorizontalStepsPerItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setHorizontalStepsPerItem)},
    {SIP_MLNAME_CAST(sipName_setIconSize), meth_QAbstractItemView_setIconSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setIconSize)},
    {SIP_MLNAME_CAST(sipName_setIndexWidget), meth_QAbstractItemView_setIndexWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setIndexWidget)},
    {SIP_MLNAME_CAST(sipName_setItemDelegate), meth_QAbstractItemView_setItemDelegate, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setItemDelegate)},
    {SIP_MLNAME_CAST(sipName_setItemDelegateForColumn), meth_QAbstractItemView_setItemDelegateForColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setItemDelegateForColumn)},
    {SIP_MLNAME_CAST(sipName_setItemDelegateForRow), meth_QAbstractItemView_setItemDelegateForRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setItemDelegateForRow)},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QAbstractItemView_setModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setModel)},
    {SIP_MLNAME_CAST(sipName_setRootIndex), meth_QAbstractItemView_setRootIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setRootIndex)},
    {SIP_MLNAME_CAST(sipName_setSelection), meth_QAbstractItemView_setSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setSelection)},
    {SIP_MLNAME_CAST(sipName_setSelectionBehavior), meth_QAbstractItemView_setSelectionBehavior, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setSelectionBehavior)},
    {SIP_MLNAME_CAST(sipName_setSelectionMode), meth_QAbstractItemView_setSelectionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setSelectionMode)},
    {SIP_MLNAME_CAST(sipName_setSelectionModel), meth_QAbstractItemView_setSelectionModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setSelectionModel)},
    {SIP_MLNAME_CAST(sipName_setState), meth_QAbstractItemView_setState, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setState)},
    {SIP_MLNAME_CAST(sipName_setTabKeyNavigation), meth_QAbstractItemView_setTabKeyNavigation, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setTabKeyNavigation)},
    {SIP_MLNAME_CAST(sipName_setTextElideMode), meth_QAbstractItemView_setTextElideMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setTextElideMode)},
    {SIP_MLNAME_CAST(sipName_setVerticalScrollMode), meth_QAbstractItemView_setVerticalScrollMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setVerticalScrollMode)},
    {SIP_MLNAME_CAST(sipName_setVerticalStepsPerItem), meth_QAbstractItemView_setVerticalStepsPerItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setVerticalStepsPerItem)},
    {SIP_MLNAME_CAST(sipName_showDropIndicator), meth_QAbstractItemView_showDropIndicator, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_showDropIndicator)},
    {SIP_MLNAME_CAST(sipName_sizeHintForColumn), meth_QAbstractItemView_sizeHintForColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_sizeHintForColumn)},
    {SIP_MLNAME_CAST(sipName_sizeHintForIndex), meth_QAbstractItemView_sizeHintForIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_sizeHintForIndex)},
    {SIP_MLNAME_CAST(sipName_sizeHintForRow), meth_QAbstractItemView_sizeHintForRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_sizeHintForRow)},
    {SIP_MLNAME_CAST(sipName_startDrag), meth_QAbstractItemView_startDrag, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_startDrag)},
    {SIP_MLNAME_CAST(sipName_state), meth_QAbstractItemView_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_state)},
    {SIP_MLNAME_CAST(sipName_tabKeyNavigation), meth_QAbstractItemView_tabKeyNavigation, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_tabKeyNavigation)},
    {SIP_MLNAME_CAST(sipName_textElideMode), meth_QAbstractItemView_textElideMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_textElideMode)},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QAbstractItemView_timerEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_timerEvent)},
    {SIP_MLNAME_CAST(sipName_update), meth_QAbstractItemView_update, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_update)},
    {SIP_MLNAME_CAST(sipName_updateEditorData), meth_QAbstractItemView_updateEditorData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_updateEditorData)},
    {SIP_MLNAME_CAST(sipName_updateEditorGeometries), meth_QAbstractItemView_updateEditorGeometries, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_updateEditorGeometries)},
    {SIP_MLNAME_CAST(sipName_updateGeometries), meth_QAbstractItemView_updateGeometries, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_updateGeometries)},
    {SIP_MLNAME_CAST(sipName_verticalOffset), meth_QAbstractItemView_verticalOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_verticalOffset)},
    {SIP_MLNAME_CAST(sipName_verticalScrollMode), meth_QAbstractItemView_verticalScrollMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_verticalScrollMode)},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarAction), meth_QAbstractItemView_verticalScrollbarAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_verticalScrollbarAction)},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarValueChanged), meth_QAbstractItemView_verticalScrollbarValueChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_verticalScrollbarValueChanged)},
    {SIP_MLNAME_CAST(sipName_verticalStepsPerItem), meth_QAbstractItemView_verticalStepsPerItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_verticalStepsPerItem)},
    {SIP_MLNAME_CAST(sipName_viewOptions), meth_QAbstractItemView_viewOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_viewOptions)},
    {SIP_MLNAME_CAST(sipName_viewportEvent), meth_QAbstractItemView_viewportEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_viewportEvent)},
    {SIP_MLNAME_CAST(sipName_visualRect), meth_QAbstractItemView_visualRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_visualRect)},
    {SIP_MLNAME_CAST(sipName_visualRegionForSelection), meth_QAbstractItemView_visualRegionForSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_visualRegionForSelection)}
};

static sipEnumMemberDef enummembers_QAbstractItemView[] = {
    {sipName_AboveItem, QAbstractItemView::AboveItem, 8},
    {sipName_AllEditTriggers, QAbstractItemView::AllEditTriggers, 9},
    {sipName_AnimatingState, QAbstractItemView::AnimatingState, 15},
    {sipName_AnyKeyPressed, QAbstractItemView::AnyKeyPressed, 9},
    {sipName_BelowItem, QAbstractItemView::BelowItem, 8},
    {sipName_CollapsingState, QAbstractItemView::CollapsingState, 15},
    {sipName_ContiguousSelection, QAbstractItemView::ContiguousSelection, 14},
    {sipName_CurrentChanged, QAbstractItemView::CurrentChanged, 9},
    {sipName_DoubleClicked, QAbstractItemView::DoubleClicked, 9},
    {sipName_DragDrop, QAbstractItemView::DragDrop, 7},
    {sipName_DragOnly, QAbstractItemView::DragOnly, 7},
    {sipName_DragSelectingState, QAbstractItemView::DragSelectingState, 15},
    {sipName_DraggingState, QAbstractItemView::DraggingState, 15},
    {sipName_DropOnly, QAbstractItemView::DropOnly, 7},
    {sipName_EditKeyPressed, QAbstractItemView::EditKeyPressed, 9},
    {sipName_EditingState, QAbstractItemView::EditingState, 15},
    {sipName_EnsureVisible, QAbstractItemView::EnsureVisible, 11},
    {sipName_ExpandingState, QAbstractItemView::ExpandingState, 15},
    {sipName_ExtendedSelection, QAbstractItemView::ExtendedSelection, 14},
    {sipName_InternalMove, QAbstractItemView::InternalMove, 7},
    {sipName_MoveDown, QAbstractItemView::MoveDown, 6},
    {sipName_MoveEnd, QAbstractItemView::MoveEnd, 6},
    {sipName_MoveHome, QAbstractItemView::MoveHome, 6},
    {sipName_MoveLeft, QAbstractItemView::MoveLeft, 6},
    {sipName_MoveNext, QAbstractItemView::MoveNext, 6},
    {sipName_MovePageDown, QAbstractItemView::MovePageDown, 6},
    {sipName_MovePageUp, QAbstractItemView::MovePageUp, 6},
    {sipName_MovePrevious, QAbstractItemView::MovePrevious, 6},
    {sipName_MoveRight, QAbstractItemView::MoveRight, 6},
    {sipName_MoveUp, QAbstractItemView::MoveUp, 6},
    {sipName_MultiSelection, QAbstractItemView::MultiSelection, 14},
    {sipName_NoDragDrop, QAbstractItemView::NoDragDrop, 7},
    {sipName_NoEditTriggers, QAbstractItemView::NoEditTriggers, 9},
    {sipName_NoSelection, QAbstractItemView::NoSelection, 14},
    {sipName_NoState, QAbstractItemView::NoState, 15},
    {sipName_OnItem, QAbstractItemView::OnItem, 8},
    {sipName_OnViewport, QAbstractItemView::OnViewport, 8},
    {sipName_PositionAtBottom, QAbstractItemView::PositionAtBottom, 11},
    {sipName_PositionAtCenter, QAbstractItemView::PositionAtCenter, 11},
    {sipName_PositionAtTop, QAbstractItemView::PositionAtTop, 11},
    {sipName_ScrollPerItem, QAbstractItemView::ScrollPerItem, 12},
    {sipName_ScrollPerPixel, QAbstractItemView::ScrollPerPixel, 12},
    {sipName_SelectColumns, QAbstractItemView::SelectColumns, 13},
    {sipName_SelectItems, QAbstractItemView::SelectItems, 13},
    {sipName_SelectRows, QAbstractItemView::SelectRows, 13},
    {sipName_SelectedClicked, QAbstractItemView::SelectedClicked, 9},
    {sipName_SingleSelection, QAbstractItemView::SingleSelection, 14},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QAbstractItemView[] = {
    {"viewportEntered()", "\1QAbstractItemView.viewportEntered()", 0},
    {"entered(const QModelIndex&)", "\1QAbstractItemView.entered(QModelIndex)", 0},
    {"activated(const QModelIndex&)", "\1QAbstractItemView.activated(QModelIndex)", 0},
    {"doubleClicked(const QModelIndex&)", "\1QAbstractItemView.doubleClicked(QModelIndex)", 0},
    {"clicked(const QModelIndex&)", "\1QAbstractItemView.clicked(QModelIndex)", 0},
    {"pressed(const QModelIndex&)", "\1QAbstractItemView.pressed(QModelIndex)", 0},
    {0, 0, 0}
};

PyDoc_STRVAR(doc_QAbstractItemView, "\1QAbstractItemView(QWidget parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QAbstractItemView = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QAbstractItemView,
        {0}
    },
    {
        sipNameNr_QAbstractItemView,
        {0, 0, 1},
        120, methods_QAbstractItemView,
        47, enummembers_QAbstractItemView,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractItemView,
    -1,
    -1,
    supers_QAbstractItemView,
    0,
    init_QAbstractItemView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractItemView,
    0,
    0,
    0,
    release_QAbstractItemView,
    cast_QAbstractItemView,
    0,
    0,
    0
},
    &QAbstractItemView::staticMetaObject,
    0,
    pyqt4_signals_QAbstractItemView
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:03 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qprogressdialog.sip"
#include <qprogressdialog.h>
#line 39 "sipQtGuiQProgressDialog.cpp"

#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 43 "sipQtGuiQProgressDialog.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 46 "sipQtGuiQProgressDialog.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 49 "sipQtGuiQProgressDialog.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 52 "sipQtGuiQProgressDialog.cpp"
#line 466 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 55 "sipQtGuiQProgressDialog.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 58 "sipQtGuiQProgressDialog.cpp"
#line 442 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 61 "sipQtGuiQProgressDialog.cpp"
#line 428 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 64 "sipQtGuiQProgressDialog.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 67 "sipQtGuiQProgressDialog.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qprogressbar.sip"
#include <qprogressbar.h>
#line 70 "sipQtGuiQProgressDialog.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qpushbutton.sip"
#include <qpushbutton.h>
#line 73 "sipQtGuiQProgressDialog.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qlabel.sip"
#include <qlabel.h>
#line 76 "sipQtGuiQProgressDialog.cpp"
#line 490 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 79 "sipQtGuiQProgressDialog.cpp"
#line 350 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 82 "sipQtGuiQProgressDialog.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 85 "sipQtGuiQProgressDialog.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 88 "sipQtGuiQProgressDialog.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 91 "sipQtGuiQProgressDialog.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 94 "sipQtGuiQProgressDialog.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 97 "sipQtGuiQProgressDialog.cpp"
#line 39 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 100 "sipQtGuiQProgressDialog.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 103 "sipQtGuiQProgressDialog.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 106 "sipQtGuiQProgressDialog.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 109 "sipQtGuiQProgressDialog.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 112 "sipQtGuiQProgressDialog.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 115 "sipQtGuiQProgressDialog.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 118 "sipQtGuiQProgressDialog.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 121 "sipQtGuiQProgressDialog.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 124 "sipQtGuiQProgressDialog.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 127 "sipQtGuiQProgressDialog.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 130 "sipQtGuiQProgressDialog.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 133 "sipQtGuiQProgressDialog.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 136 "sipQtGuiQProgressDialog.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 139 "sipQtGuiQProgressDialog.cpp"
#line 520 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 539 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "sipQtGuiQProgressDialog.cpp"
#line 478 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "sipQtGuiQProgressDialog.cpp"
#line 565 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "sipQtGuiQProgressDialog.cpp"
#line 619 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "sipQtGuiQProgressDialog.cpp"
#line 590 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "sipQtGuiQProgressDialog.cpp"
#line 607 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "sipQtGuiQProgressDialog.cpp"
#line 675 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "sipQtGuiQProgressDialog.cpp"
#line 301 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "sipQtGuiQProgressDialog.cpp"
#line 414 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "sipQtGuiQProgressDialog.cpp"
#line 399 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "sipQtGuiQProgressDialog.cpp"
#line 379 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "sipQtGuiQProgressDialog.cpp"
#line 279 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "sipQtGuiQProgressDialog.cpp"
#line 238 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "sipQtGuiQProgressDialog.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 183 "sipQtGuiQProgressDialog.cpp"
#line 68 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 186 "sipQtGuiQProgressDialog.cpp"
#line 42 "/home/maemo/python-qt4-4.7/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 189 "sipQtGuiQProgressDialog.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 192 "sipQtGuiQProgressDialog.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 195 "sipQtGuiQProgressDialog.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 198 "sipQtGuiQProgressDialog.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 201 "sipQtGuiQProgressDialog.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 204 "sipQtGuiQProgressDialog.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 207 "sipQtGuiQProgressDialog.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 210 "sipQtGuiQProgressDialog.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 213 "sipQtGuiQProgressDialog.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 216 "sipQtGuiQProgressDialog.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 219 "sipQtGuiQProgressDialog.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 222 "sipQtGuiQProgressDialog.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 225 "sipQtGuiQProgressDialog.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 228 "sipQtGuiQProgressDialog.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 231 "sipQtGuiQProgressDialog.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 234 "sipQtGuiQProgressDialog.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 237 "sipQtGuiQProgressDialog.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 240 "sipQtGuiQProgressDialog.cpp"


class sipQProgressDialog : public QProgressDialog
{
public:
    sipQProgressDialog(QWidget *,Qt::WindowFlags);
    sipQProgressDialog(const QString&,const QString&,int,int,QWidget *,Qt::WindowFlags);
    virtual ~sipQProgressDialog();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QSize sizeHint() const;
    void resizeEvent(QResizeEvent *);
    void closeEvent(QCloseEvent *);
    void changeEvent(QEvent *);
    void showEvent(QShowEvent *);
    void setVisible(bool);
    QSize minimumSizeHint() const;
    void done(int);
    void accept();
    void reject();
    void keyPressEvent(QKeyEvent *);
    void contextMenuEvent(QContextMenuEvent *);
    bool eventFilter(QObject *,QEvent *);
    int devType() const;
    int heightForWidth(int) const;
    QPaintEngine * paintEngine() const;
    bool event(QEvent *);
    void mousePressEvent(QMouseEvent *);
    void mouseReleaseEvent(QMouseEvent *);
    void mouseDoubleClickEvent(QMouseEvent *);
    void mouseMoveEvent(QMouseEvent *);
    void wheelEvent(QWheelEvent *);
    void keyReleaseEvent(QKeyEvent *);
    void focusInEvent(QFocusEvent *);
    void focusOutEvent(QFocusEvent *);
    void enterEvent(QEvent *);
    void leaveEvent(QEvent *);
    void paintEvent(QPaintEvent *);
    void moveEvent(QMoveEvent *);
    void tabletEvent(QTabletEvent *);
    void actionEvent(QActionEvent *);
    void dragEnterEvent(QDragEnterEvent *);
    void dragMoveEvent(QDragMoveEvent *);
    void dragLeaveEvent(QDragLeaveEvent *);
    void dropEvent(QDropEvent *);
    void hideEvent(QHideEvent *);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void inputMethodEvent(QInputMethodEvent *);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    void enabledChange(bool);
    void paletteChange(const QPalette&);
    void fontChange(const QFont&);
    void windowActivationChange(bool);
    void languageChange();
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQProgressDialog(const sipQProgressDialog &);
    sipQProgressDialog &operator = (const sipQProgressDialog &);

    char sipPyMethods[50];
};

sipQProgressDialog::sipQProgressDialog(QWidget *a0,Qt::WindowFlags a1): QProgressDialog(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQProgressDialog::sipQProgressDialog(const QString& a0,const QString& a1,int a2,int a3,QWidget *a4,Qt::WindowFlags a5): QProgressDialog(a0,a1,a2,a3,a4,a5), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQProgressDialog::~sipQProgressDialog()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQProgressDialog::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QProgressDialog);
}

int sipQProgressDialog::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QProgressDialog::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QProgressDialog,_c,_id,_a);

    return _id;
}

void *sipQProgressDialog::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QProgressDialog,_clname)) ? this : QProgressDialog::qt_metacast(_clname);
}

QSize sipQProgressDialog::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QProgressDialog::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_4(sipGILState,meth);
}

void sipQProgressDialog::resizeEvent(QResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_resizeEvent);

    if (!meth)
    {
        QProgressDialog::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t,PyObject *,QResizeEvent *);

    sipVH_QtGui_2(sipGILState,meth,a0);
}

void sipQProgressDialog::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_closeEvent);

    if (!meth)
    {
        QProgressDialog::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t,PyObject *,QCloseEvent *);

    sipVH_QtGui_22(sipGILState,meth,a0);
}

void sipQProgressDialog::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_changeEvent);

    if (!meth)
    {
        QProgressDialog::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQProgressDialog::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_showEvent);

    if (!meth)
    {
        QProgressDialog::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t,PyObject *,QShowEvent *);

    sipVH_QtGui_1(sipGILState,meth,a0);
}

void sipQProgressDialog::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_setVisible);

    if (!meth)
    {
        QDialog::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

QSize sipQProgressDialog::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!meth)
        return QDialog::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_4(sipGILState,meth);
}

void sipQProgressDialog::done(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_done);

    if (!meth)
    {
        QDialog::done(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState,meth,a0);
}

void sipQProgressDialog::accept()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_accept);

    if (!meth)
    {
        QDialog::accept();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQProgressDialog::reject()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_reject);

    if (!meth)
    {
        QDialog::reject();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQProgressDialog::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_keyPressEvent);

    if (!meth)
    {
        QDialog::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQProgressDialog::contextMenuEvent(QContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!meth)
    {
        QDialog::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t,PyObject *,QContextMenuEvent *);

    sipVH_QtGui_21(sipGILState,meth,a0);
}

bool sipQProgressDialog::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QDialog::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

int sipQProgressDialog::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

int sipQProgressDialog::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QWidget::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

QPaintEngine * sipQProgressDialog::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QWidget::paintEngine();

    extern QPaintEngine * sipVH_QtGui_27(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_27(sipGILState,meth);
}

bool sipQProgressDialog::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QWidget::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

void sipQProgressDialog::mousePressEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_mousePressEvent);

    if (!meth)
    {
        QWidget::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQProgressDialog::mouseReleaseEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!meth)
    {
        QWidget::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQProgressDialog::mouseDoubleClickEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!meth)
    {
        QWidget::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQProgressDialog::mouseMoveEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!meth)
    {
        QWidget::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQProgressDialog::wheelEvent(QWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_wheelEvent);

    if (!meth)
    {
        QWidget::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t,PyObject *,QWheelEvent *);

    sipVH_QtGui_5(sipGILState,meth,a0);
}

void sipQProgressDialog::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!meth)
    {
        QWidget::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQProgressDialog::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_focusInEvent);

    if (!meth)
    {
        QWidget::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

void sipQProgressDialog::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_focusOutEvent);

    if (!meth)
    {
        QWidget::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

void sipQProgressDialog::enterEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_enterEvent);

    if (!meth)
    {
        QWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQProgressDialog::leaveEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_leaveEvent);

    if (!meth)
    {
        QWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQProgressDialog::paintEvent(QPaintEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_paintEvent);

    if (!meth)
    {
        QWidget::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t,PyObject *,QPaintEvent *);

    sipVH_QtGui_3(sipGILState,meth,a0);
}

void sipQProgressDialog::moveEvent(QMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_moveEvent);

    if (!meth)
    {
        QWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t,PyObject *,QMoveEvent *);

    sipVH_QtGui_23(sipGILState,meth,a0);
}

void sipQProgressDialog::tabletEvent(QTabletEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_tabletEvent);

    if (!meth)
    {
        QWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t,PyObject *,QTabletEvent *);

    sipVH_QtGui_20(sipGILState,meth,a0);
}

void sipQProgressDialog::actionEvent(QActionEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_actionEvent);

    if (!meth)
    {
        QWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t,PyObject *,QActionEvent *);

    sipVH_QtGui_19(sipGILState,meth,a0);
}

void sipQProgressDialog::dragEnterEvent(QDragEnterEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!meth)
    {
        QWidget::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t,PyObject *,QDragEnterEvent *);

    sipVH_QtGui_18(sipGILState,meth,a0);
}

void sipQProgressDialog::dragMoveEvent(QDragMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!meth)
    {
        QWidget::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t,PyObject *,QDragMoveEvent *);

    sipVH_QtGui_17(sipGILState,meth,a0);
}

void sipQProgressDialog::dragLeaveEvent(QDragLeaveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!meth)
    {
        QWidget::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t,PyObject *,QDragLeaveEvent *);

    sipVH_QtGui_16(sipGILState,meth,a0);
}

void sipQProgressDialog::dropEvent(QDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_dropEvent);

    if (!meth)
    {
        QWidget::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t,PyObject *,QDropEvent *);

    sipVH_QtGui_15(sipGILState,meth,a0);
}

void sipQProgressDialog::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_hideEvent);

    if (!meth)
    {
        QWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t,PyObject *,QHideEvent *);

    sipVH_QtGui_0(sipGILState,meth,a0);
}

int sipQProgressDialog::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QWidget::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t,PyObject *,QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState,meth,a0);
}

void sipQProgressDialog::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!meth)
    {
        QWidget::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t,PyObject *,QInputMethodEvent *);

    sipVH_QtGui_13(sipGILState,meth,a0);
}

QVariant sipQProgressDialog::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!meth)
        return QWidget::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t,PyObject *,Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState,meth,a0);
}

bool sipQProgressDialog::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!meth)
        return QWidget::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_11(sip_gilstate_t,PyObject *,bool);

    return sipVH_QtGui_11(sipGILState,meth,a0);
}

void sipQProgressDialog::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_enabledChange);

    if (!meth)
    {
        QWidget::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQProgressDialog::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_paletteChange);

    if (!meth)
    {
        QWidget::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t,PyObject *,const QPalette&);

    sipVH_QtGui_10(sipGILState,meth,a0);
}

void sipQProgressDialog::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_fontChange);

    if (!meth)
    {
        QWidget::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t,PyObject *,const QFont&);

    sipVH_QtGui_9(sipGILState,meth,a0);
}

void sipQProgressDialog::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_windowActivationChange);

    if (!meth)
    {
        QWidget::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQProgressDialog::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_languageChange);

    if (!meth)
    {
        QWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQProgressDialog::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQProgressDialog::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQProgressDialog::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQProgressDialog::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQProgressDialog::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QProgressDialog_setLabel, "QProgressDialog.setLabel(QLabel)");

extern "C" {static PyObject *meth_QProgressDialog_setLabel(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_setLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLabel * a0;
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QProgressDialog, &sipCpp, sipType_QLabel, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLabel(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_setLabel, doc_QProgressDialog_setLabel);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_setCancelButton, "QProgressDialog.setCancelButton(QPushButton)");

extern "C" {static PyObject *meth_QProgressDialog_setCancelButton(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_setCancelButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPushButton * a0;
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QProgressDialog, &sipCpp, sipType_QPushButton, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCancelButton(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_setCancelButton, doc_QProgressDialog_setCancelButton);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_setBar, "QProgressDialog.setBar(QProgressBar)");

extern "C" {static PyObject *meth_QProgressDialog_setBar(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_setBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProgressBar * a0;
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QProgressDialog, &sipCpp, sipType_QProgressBar, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBar(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_setBar, doc_QProgressDialog_setBar);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_wasCanceled, "QProgressDialog.wasCanceled() -> bool");

extern "C" {static PyObject *meth_QProgressDialog_wasCanceled(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_wasCanceled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressDialog, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wasCanceled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_wasCanceled, doc_QProgressDialog_wasCanceled);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_minimum, "QProgressDialog.minimum() -> int");

extern "C" {static PyObject *meth_QProgressDialog_minimum(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_minimum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressDialog, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->minimum();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_minimum, doc_QProgressDialog_minimum);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_maximum, "QProgressDialog.maximum() -> int");

extern "C" {static PyObject *meth_QProgressDialog_maximum(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_maximum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressDialog, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->maximum();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_maximum, doc_QProgressDialog_maximum);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_setRange, "QProgressDialog.setRange(int, int)");

extern "C" {static PyObject *meth_QProgressDialog_setRange(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_setRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QProgressDialog, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRange(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_setRange, doc_QProgressDialog_setRange);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_value, "QProgressDialog.value() -> int");

extern "C" {static PyObject *meth_QProgressDialog_value(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressDialog, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->value();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_value, doc_QProgressDialog_value);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_sizeHint, "QProgressDialog.sizeHint() -> QSize");

extern "C" {static PyObject *meth_QProgressDialog_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressDialog, &sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QProgressDialog::sizeHint() : sipCpp->sizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_sizeHint, doc_QProgressDialog_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_labelText, "QProgressDialog.labelText() -> QString");

extern "C" {static PyObject *meth_QProgressDialog_labelText(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_labelText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressDialog, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->labelText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_labelText, doc_QProgressDialog_labelText);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_minimumDuration, "QProgressDialog.minimumDuration() -> int");

extern "C" {static PyObject *meth_QProgressDialog_minimumDuration(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_minimumDuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressDialog, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->minimumDuration();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_minimumDuration, doc_QProgressDialog_minimumDuration);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_setAutoReset, "QProgressDialog.setAutoReset(bool)");

extern "C" {static PyObject *meth_QProgressDialog_setAutoReset(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_setAutoReset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QProgressDialog, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoReset(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_setAutoReset, doc_QProgressDialog_setAutoReset);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_autoReset, "QProgressDialog.autoReset() -> bool");

extern "C" {static PyObject *meth_QProgressDialog_autoReset(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_autoReset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressDialog, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoReset();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_autoReset, doc_QProgressDialog_autoReset);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_setAutoClose, "QProgressDialog.setAutoClose(bool)");

extern "C" {static PyObject *meth_QProgressDialog_setAutoClose(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_setAutoClose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QProgressDialog, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoClose(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_setAutoClose, doc_QProgressDialog_setAutoClose);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_autoClose, "QProgressDialog.autoClose() -> bool");

extern "C" {static PyObject *meth_QProgressDialog_autoClose(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_autoClose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressDialog, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoClose();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_autoClose, doc_QProgressDialog_autoClose);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_cancel, "QProgressDialog.cancel()");

extern "C" {static PyObject *meth_QProgressDialog_cancel(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_cancel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressDialog, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->cancel();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_cancel, doc_QProgressDialog_cancel);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_reset, "QProgressDialog.reset()");

extern "C" {static PyObject *meth_QProgressDialog_reset(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressDialog, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->reset();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_reset, doc_QProgressDialog_reset);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_setMaximum, "QProgressDialog.setMaximum(int)");

extern "C" {static PyObject *meth_QProgressDialog_setMaximum(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_setMaximum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QProgressDialog, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMaximum(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_setMaximum, doc_QProgressDialog_setMaximum);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_setMinimum, "QProgressDialog.setMinimum(int)");

extern "C" {static PyObject *meth_QProgressDialog_setMinimum(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_setMinimum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QProgressDialog, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMinimum(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_setMinimum, doc_QProgressDialog_setMinimum);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_setValue, "QProgressDialog.setValue(int)");

extern "C" {static PyObject *meth_QProgressDialog_setValue(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_setValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QProgressDialog, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setValue(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_setValue, doc_QProgressDialog_setValue);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_setLabelText, "QProgressDialog.setLabelText(QString)");

extern "C" {static PyObject *meth_QProgressDialog_setLabelText(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_setLabelText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QProgressDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLabelText(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_setLabelText, doc_QProgressDialog_setLabelText);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_setCancelButtonText, "QProgressDialog.setCancelButtonText(QString)");

extern "C" {static PyObject *meth_QProgressDialog_setCancelButtonText(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_setCancelButtonText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QProgressDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCancelButtonText(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_setCancelButtonText, doc_QProgressDialog_setCancelButtonText);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_setMinimumDuration, "QProgressDialog.setMinimumDuration(int)");

extern "C" {static PyObject *meth_QProgressDialog_setMinimumDuration(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_setMinimumDuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QProgressDialog, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMinimumDuration(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_setMinimumDuration, doc_QProgressDialog_setMinimumDuration);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_resizeEvent, "QProgressDialog.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QProgressDialog_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent * a0;
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QProgressDialog, &sipCpp, sipType_QResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QProgressDialog::resizeEvent(a0) : sipCpp->resizeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_resizeEvent, doc_QProgressDialog_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_closeEvent, "QProgressDialog.closeEvent(QCloseEvent)");

extern "C" {static PyObject *meth_QProgressDialog_closeEvent(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_closeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent * a0;
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QProgressDialog, &sipCpp, sipType_QCloseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QProgressDialog::closeEvent(a0) : sipCpp->closeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_closeEvent, doc_QProgressDialog_closeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_changeEvent, "QProgressDialog.changeEvent(QEvent)");

extern "C" {static PyObject *meth_QProgressDialog_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QProgressDialog, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QProgressDialog::changeEvent(a0) : sipCpp->changeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_changeEvent, doc_QProgressDialog_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_showEvent, "QProgressDialog.showEvent(QShowEvent)");

extern "C" {static PyObject *meth_QProgressDialog_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent * a0;
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QProgressDialog, &sipCpp, sipType_QShowEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QProgressDialog::showEvent(a0) : sipCpp->showEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_showEvent, doc_QProgressDialog_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_forceShow, "QProgressDialog.forceShow()");

extern "C" {static PyObject *meth_QProgressDialog_forceShow(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_forceShow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QProgressDialog, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->forceShow();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_forceShow, doc_QProgressDialog_forceShow);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressDialog_open, "QProgressDialog.open()\n"
    "QProgressDialog.open(QObject, SLOT())\n"
    "QProgressDialog.open(callable)");

extern "C" {static PyObject *meth_QProgressDialog_open(PyObject *, PyObject *);}
static PyObject *meth_QProgressDialog_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressDialog, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->open();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QObject * a0;
        char * a1;
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BqS", &sipSelf, sipType_QProgressDialog, &sipCpp, "()", &a0, &a1, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->open(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QObject * a0;
        char * a1;
        QProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "By", &sipSelf, sipType_QProgressDialog, &sipCpp, "()", &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->open(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressDialog, sipName_open, doc_QProgressDialog_open);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QProgressDialog(void *, const sipTypeDef *);}
static void *cast_QProgressDialog(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QProgressDialog)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QDialog)->ctd_cast((QDialog *)(QProgressDialog *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QProgressDialog(void *, int);}
static void release_QProgressDialog(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQProgressDialog *>(sipCppV);
    else
        delete reinterpret_cast<QProgressDialog *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QProgressDialog(sipSimpleWrapper *);}
static void dealloc_QProgressDialog(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQProgressDialog *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QProgressDialog(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QProgressDialog(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QProgressDialog(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQProgressDialog *sipCpp = 0;

    {
        QWidget * a0 = 0;
        Qt::WindowFlags a1def = 0;
        Qt::WindowFlags * a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JHJ1", sipType_QWidget, &a0, sipOwner, sipType_Qt_WindowFlags, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQProgressDialog(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_Qt_WindowFlags,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        int a2;
        int a3;
        QWidget * a4 = 0;
        Qt::WindowFlags a5def = 0;
        Qt::WindowFlags * a5 = &a5def;
        int a5State = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J1ii|JHJ1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, &a2, &a3, sipType_QWidget, &a4, sipOwner, sipType_Qt_WindowFlags, &a5, &a5State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQProgressDialog(*a0,*a1,a2,a3,a4,*a5);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(a5,sipType_Qt_WindowFlags,a5State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QProgressDialog[] = {{83, 255, 1}};


static PyMethodDef methods_QProgressDialog[] = {
    {SIP_MLNAME_CAST(sipName_autoClose), meth_QProgressDialog_autoClose, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_autoClose)},
    {SIP_MLNAME_CAST(sipName_autoReset), meth_QProgressDialog_autoReset, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_autoReset)},
    {SIP_MLNAME_CAST(sipName_cancel), meth_QProgressDialog_cancel, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_cancel)},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QProgressDialog_changeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_changeEvent)},
    {SIP_MLNAME_CAST(sipName_closeEvent), meth_QProgressDialog_closeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_closeEvent)},
    {SIP_MLNAME_CAST(sipName_forceShow), meth_QProgressDialog_forceShow, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_forceShow)},
    {SIP_MLNAME_CAST(sipName_labelText), meth_QProgressDialog_labelText, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_labelText)},
    {SIP_MLNAME_CAST(sipName_maximum), meth_QProgressDialog_maximum, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_maximum)},
    {SIP_MLNAME_CAST(sipName_minimum), meth_QProgressDialog_minimum, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_minimum)},
    {SIP_MLNAME_CAST(sipName_minimumDuration), meth_QProgressDialog_minimumDuration, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_minimumDuration)},
    {SIP_MLNAME_CAST(sipName_open), meth_QProgressDialog_open, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_open)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QProgressDialog_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_reset)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QProgressDialog_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_setAutoClose), meth_QProgressDialog_setAutoClose, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_setAutoClose)},
    {SIP_MLNAME_CAST(sipName_setAutoReset), meth_QProgressDialog_setAutoReset, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_setAutoReset)},
    {SIP_MLNAME_CAST(sipName_setBar), meth_QProgressDialog_setBar, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_setBar)},
    {SIP_MLNAME_CAST(sipName_setCancelButton), meth_QProgressDialog_setCancelButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_setCancelButton)},
    {SIP_MLNAME_CAST(sipName_setCancelButtonText), meth_QProgressDialog_setCancelButtonText, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_setCancelButtonText)},
    {SIP_MLNAME_CAST(sipName_setLabel), meth_QProgressDialog_setLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_setLabel)},
    {SIP_MLNAME_CAST(sipName_setLabelText), meth_QProgressDialog_setLabelText, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_setLabelText)},
    {SIP_MLNAME_CAST(sipName_setMaximum), meth_QProgressDialog_setMaximum, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_setMaximum)},
    {SIP_MLNAME_CAST(sipName_setMinimum), meth_QProgressDialog_setMinimum, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_setMinimum)},
    {SIP_MLNAME_CAST(sipName_setMinimumDuration), meth_QProgressDialog_setMinimumDuration, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_setMinimumDuration)},
    {SIP_MLNAME_CAST(sipName_setRange), meth_QProgressDialog_setRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_setRange)},
    {SIP_MLNAME_CAST(sipName_setValue), meth_QProgressDialog_setValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_setValue)},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QProgressDialog_showEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_showEvent)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QProgressDialog_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_sizeHint)},
    {SIP_MLNAME_CAST(sipName_value), meth_QProgressDialog_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_value)},
    {SIP_MLNAME_CAST(sipName_wasCanceled), meth_QProgressDialog_wasCanceled, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressDialog_wasCanceled)}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QProgressDialog[] = {
    {"canceled()", "\1QProgressDialog.canceled()", 0},
    {0, 0, 0}
};

PyDoc_STRVAR(doc_QProgressDialog, "\1QProgressDialog(QWidget parent=None, Qt.WindowFlags flags=0)\n"
    "QProgressDialog(QString, QString, int, int, QWidget parent=None, Qt.WindowFlags flags=0)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QProgressDialog = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QProgressDialog,
        {0}
    },
    {
        sipNameNr_QProgressDialog,
        {0, 0, 1},
        29, methods_QProgressDialog,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QProgressDialog,
    -1,
    -1,
    supers_QProgressDialog,
    0,
    init_QProgressDialog,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QProgressDialog,
    0,
    0,
    0,
    release_QProgressDialog,
    cast_QProgressDialog,
    0,
    0,
    0
},
    &QProgressDialog::staticMetaObject,
    0,
    pyqt4_signals_QProgressDialog
};

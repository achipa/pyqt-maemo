/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:03 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qtableview.sip"
#include <qtableview.h>
#line 39 "sipQtGuiQTableView.cpp"

#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 43 "sipQtGuiQTableView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 46 "sipQtGuiQTableView.cpp"
#line 155 "/home/maemo/python-qt4-4.7/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 49 "sipQtGuiQTableView.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 52 "sipQtGuiQTableView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 55 "sipQtGuiQTableView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 58 "sipQtGuiQTableView.cpp"
#line 82 "/home/maemo/python-qt4-4.7/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 61 "sipQtGuiQTableView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 64 "sipQtGuiQTableView.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67 "sipQtGuiQTableView.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70 "sipQtGuiQTableView.cpp"
#line 399 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 73 "sipQtGuiQTableView.cpp"
#line 1029 "/home/maemo/python-qt4-4.7/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 76 "sipQtGuiQTableView.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 79 "sipQtGuiQTableView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 82 "sipQtGuiQTableView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qheaderview.sip"
#include <qheaderview.h>
#line 85 "sipQtGuiQTableView.cpp"
#line 82 "/home/maemo/python-qt4-4.7/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 88 "sipQtGuiQTableView.cpp"
#line 128 "/home/maemo/python-qt4-4.7/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 91 "sipQtGuiQTableView.cpp"
#line 520 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 539 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 96 "sipQtGuiQTableView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 99 "sipQtGuiQTableView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 102 "sipQtGuiQTableView.cpp"
#line 428 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 105 "sipQtGuiQTableView.cpp"
#line 350 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 108 "sipQtGuiQTableView.cpp"
#line 379 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 111 "sipQtGuiQTableView.cpp"
#line 565 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 114 "sipQtGuiQTableView.cpp"
#line 619 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 117 "sipQtGuiQTableView.cpp"
#line 590 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 120 "sipQtGuiQTableView.cpp"
#line 607 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 123 "sipQtGuiQTableView.cpp"
#line 238 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 126 "sipQtGuiQTableView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 129 "sipQtGuiQTableView.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 132 "sipQtGuiQTableView.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 135 "sipQtGuiQTableView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 138 "sipQtGuiQTableView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 141 "sipQtGuiQTableView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 144 "sipQtGuiQTableView.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 147 "sipQtGuiQTableView.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 150 "sipQtGuiQTableView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qscrollbar.sip"
#include <qscrollbar.h>
#line 153 "sipQtGuiQTableView.cpp"
#line 490 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "sipQtGuiQTableView.cpp"
#line 279 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "sipQtGuiQTableView.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 162 "sipQtGuiQTableView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 165 "sipQtGuiQTableView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qframe.sip"
#include <qframe.h>
#line 168 "sipQtGuiQTableView.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 171 "sipQtGuiQTableView.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 174 "sipQtGuiQTableView.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 177 "sipQtGuiQTableView.cpp"
#line 39 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 180 "sipQtGuiQTableView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 183 "sipQtGuiQTableView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 186 "sipQtGuiQTableView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 189 "sipQtGuiQTableView.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 192 "sipQtGuiQTableView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 195 "sipQtGuiQTableView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 198 "sipQtGuiQTableView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 201 "sipQtGuiQTableView.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 204 "sipQtGuiQTableView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 207 "sipQtGuiQTableView.cpp"
#line 478 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 210 "sipQtGuiQTableView.cpp"
#line 466 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 213 "sipQtGuiQTableView.cpp"
#line 675 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 216 "sipQtGuiQTableView.cpp"
#line 301 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 219 "sipQtGuiQTableView.cpp"
#line 442 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 222 "sipQtGuiQTableView.cpp"
#line 414 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 225 "sipQtGuiQTableView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 228 "sipQtGuiQTableView.cpp"
#line 68 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 231 "sipQtGuiQTableView.cpp"
#line 42 "/home/maemo/python-qt4-4.7/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 234 "sipQtGuiQTableView.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 237 "sipQtGuiQTableView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 240 "sipQtGuiQTableView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 243 "sipQtGuiQTableView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 246 "sipQtGuiQTableView.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 249 "sipQtGuiQTableView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 252 "sipQtGuiQTableView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 255 "sipQtGuiQTableView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 258 "sipQtGuiQTableView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 261 "sipQtGuiQTableView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 264 "sipQtGuiQTableView.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 267 "sipQtGuiQTableView.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 270 "sipQtGuiQTableView.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 273 "sipQtGuiQTableView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 276 "sipQtGuiQTableView.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 279 "sipQtGuiQTableView.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 282 "sipQtGuiQTableView.cpp"


class sipQTableView : public QTableView
{
public:
    sipQTableView(QWidget *);
    virtual ~sipQTableView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void setModel(QAbstractItemModel *);
    void setRootIndex(const QModelIndex&);
    void setSelectionModel(QItemSelectionModel *);
    QRect visualRect(const QModelIndex&) const;
    void scrollTo(const QModelIndex&,QAbstractItemView::ScrollHint);
    QModelIndex indexAt(const QPoint&) const;
    void scrollContentsBy(int,int);
    QStyleOptionViewItem viewOptions() const;
    void paintEvent(QPaintEvent *);
    void timerEvent(QTimerEvent *);
    int horizontalOffset() const;
    int verticalOffset() const;
    QModelIndex moveCursor(QAbstractItemView::CursorAction,Qt::KeyboardModifiers);
    void setSelection(const QRect&,QItemSelectionModel::SelectionFlags);
    QRegion visualRegionForSelection(const QItemSelection&) const;
    QModelIndexList selectedIndexes() const;
    void updateGeometries();
    int sizeHintForRow(int) const;
    int sizeHintForColumn(int) const;
    void verticalScrollbarAction(int);
    void horizontalScrollbarAction(int);
    bool isIndexHidden(const QModelIndex&) const;
    void selectionChanged(const QItemSelection&,const QItemSelection&);
    void currentChanged(const QModelIndex&,const QModelIndex&);
    void keyboardSearch(const QString&);
    void reset();
    void doItemsLayout();
    void selectAll();
    void dataChanged(const QModelIndex&,const QModelIndex&);
    void rowsInserted(const QModelIndex&,int,int);
    void rowsAboutToBeRemoved(const QModelIndex&,int,int);
    void updateEditorData();
    void updateEditorGeometries();
    void verticalScrollbarValueChanged(int);
    void horizontalScrollbarValueChanged(int);
    void closeEditor(QWidget *,QAbstractItemDelegate::EndEditHint);
    void commitData(QWidget *);
    void editorDestroyed(QObject *);
    bool edit(const QModelIndex&,QAbstractItemView::EditTrigger,QEvent *);
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex&,const QEvent *) const;
    void startDrag(Qt::DropActions);
    bool event(QEvent *);
    bool viewportEvent(QEvent *);
    void mousePressEvent(QMouseEvent *);
    void mouseMoveEvent(QMouseEvent *);
    void mouseReleaseEvent(QMouseEvent *);
    void mouseDoubleClickEvent(QMouseEvent *);
    void dragEnterEvent(QDragEnterEvent *);
    void dragMoveEvent(QDragMoveEvent *);
    void dragLeaveEvent(QDragLeaveEvent *);
    void dropEvent(QDropEvent *);
    void focusInEvent(QFocusEvent *);
    void focusOutEvent(QFocusEvent *);
    void keyPressEvent(QKeyEvent *);
    void resizeEvent(QResizeEvent *);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    void inputMethodEvent(QInputMethodEvent *);
    QSize minimumSizeHint() const;
    QSize sizeHint() const;
    void wheelEvent(QWheelEvent *);
    void contextMenuEvent(QContextMenuEvent *);
    void changeEvent(QEvent *);
    int devType() const;
    void setVisible(bool);
    int heightForWidth(int) const;
    QPaintEngine * paintEngine() const;
    void keyReleaseEvent(QKeyEvent *);
    void enterEvent(QEvent *);
    void leaveEvent(QEvent *);
    void moveEvent(QMoveEvent *);
    void closeEvent(QCloseEvent *);
    void tabletEvent(QTabletEvent *);
    void actionEvent(QActionEvent *);
    void showEvent(QShowEvent *);
    void hideEvent(QHideEvent *);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void enabledChange(bool);
    void paletteChange(const QPalette&);
    void fontChange(const QFont&);
    void windowActivationChange(bool);
    void languageChange();
    bool eventFilter(QObject *,QEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTableView(const sipQTableView &);
    sipQTableView &operator = (const sipQTableView &);

    char sipPyMethods[87];
};

sipQTableView::sipQTableView(QWidget *a0): QTableView(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTableView::~sipQTableView()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTableView::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QTableView);
}

int sipQTableView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTableView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QTableView,_c,_id,_a);

    return _id;
}

void *sipQTableView::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QTableView,_clname)) ? this : QTableView::qt_metacast(_clname);
}

void sipQTableView::setModel(QAbstractItemModel *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_setModel);

    if (!meth)
    {
        QTableView::setModel(a0);
        return;
    }

    extern void sipVH_QtGui_36(sip_gilstate_t,PyObject *,QAbstractItemModel *);

    sipVH_QtGui_36(sipGILState,meth,a0);
}

void sipQTableView::setRootIndex(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_setRootIndex);

    if (!meth)
    {
        QTableView::setRootIndex(a0);
        return;
    }

    typedef void (*sipVH_QtCore_51)(sip_gilstate_t,PyObject *,const QModelIndex&);

    ((sipVH_QtCore_51)(sipModuleAPI_QtGui_QtCore->em_virthandlers[51]))(sipGILState,meth,a0);
}

void sipQTableView::setSelectionModel(QItemSelectionModel *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_setSelectionModel);

    if (!meth)
    {
        QTableView::setSelectionModel(a0);
        return;
    }

    extern void sipVH_QtGui_37(sip_gilstate_t,PyObject *,QItemSelectionModel *);

    sipVH_QtGui_37(sipGILState,meth,a0);
}

QRect sipQTableView::visualRect(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_visualRect);

    if (!meth)
        return QTableView::visualRect(a0);

    extern QRect sipVH_QtGui_56(sip_gilstate_t,PyObject *,const QModelIndex&);

    return sipVH_QtGui_56(sipGILState,meth,a0);
}

void sipQTableView::scrollTo(const QModelIndex& a0,QAbstractItemView::ScrollHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_scrollTo);

    if (!meth)
    {
        QTableView::scrollTo(a0,a1);
        return;
    }

    extern void sipVH_QtGui_55(sip_gilstate_t,PyObject *,const QModelIndex&,QAbstractItemView::ScrollHint);

    sipVH_QtGui_55(sipGILState,meth,a0,a1);
}

QModelIndex sipQTableView::indexAt(const QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_indexAt);

    if (!meth)
        return QTableView::indexAt(a0);

    extern QModelIndex sipVH_QtGui_54(sip_gilstate_t,PyObject *,const QPoint&);

    return sipVH_QtGui_54(sipGILState,meth,a0);
}

void sipQTableView::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!meth)
    {
        QTableView::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtGui_32(sip_gilstate_t,PyObject *,int,int);

    sipVH_QtGui_32(sipGILState,meth,a0,a1);
}

QStyleOptionViewItem sipQTableView::viewOptions() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_viewOptions);

    if (!meth)
        return QTableView::viewOptions();

    extern QStyleOptionViewItem sipVH_QtGui_71(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_71(sipGILState,meth);
}

void sipQTableView::paintEvent(QPaintEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_paintEvent);

    if (!meth)
    {
        QTableView::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t,PyObject *,QPaintEvent *);

    sipVH_QtGui_3(sipGILState,meth,a0);
}

void sipQTableView::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QTableView::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

int sipQTableView::horizontalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_horizontalOffset);

    if (!meth)
        return QTableView::horizontalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

int sipQTableView::verticalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_verticalOffset);

    if (!meth)
        return QTableView::verticalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

QModelIndex sipQTableView::moveCursor(QAbstractItemView::CursorAction a0,Qt::KeyboardModifiers a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_moveCursor);

    if (!meth)
        return QTableView::moveCursor(a0,a1);

    extern QModelIndex sipVH_QtGui_52(sip_gilstate_t,PyObject *,QAbstractItemView::CursorAction,Qt::KeyboardModifiers);

    return sipVH_QtGui_52(sipGILState,meth,a0,a1);
}

void sipQTableView::setSelection(const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_setSelection);

    if (!meth)
    {
        QTableView::setSelection(a0,a1);
        return;
    }

    extern void sipVH_QtGui_51(sip_gilstate_t,PyObject *,const QRect&,QItemSelectionModel::SelectionFlags);

    sipVH_QtGui_51(sipGILState,meth,a0,a1);
}

QRegion sipQTableView::visualRegionForSelection(const QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_visualRegionForSelection);

    if (!meth)
        return QTableView::visualRegionForSelection(a0);

    extern QRegion sipVH_QtGui_50(sip_gilstate_t,PyObject *,const QItemSelection&);

    return sipVH_QtGui_50(sipGILState,meth,a0);
}

QModelIndexList sipQTableView::selectedIndexes() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_selectedIndexes);

    if (!meth)
        return QTableView::selectedIndexes();

    extern QList<QModelIndex> sipVH_QtGui_49(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_49(sipGILState,meth);
}

void sipQTableView::updateGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_updateGeometries);

    if (!meth)
    {
        QTableView::updateGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

int sipQTableView::sizeHintForRow(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_sizeHintForRow);

    if (!meth)
        return QTableView::sizeHintForRow(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

int sipQTableView::sizeHintForColumn(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_sizeHintForColumn);

    if (!meth)
        return QTableView::sizeHintForColumn(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

void sipQTableView::verticalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_verticalScrollbarAction);

    if (!meth)
    {
        QTableView::verticalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState,meth,a0);
}

void sipQTableView::horizontalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_horizontalScrollbarAction);

    if (!meth)
    {
        QTableView::horizontalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState,meth,a0);
}

bool sipQTableView::isIndexHidden(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_isIndexHidden);

    if (!meth)
        return QTableView::isIndexHidden(a0);

    typedef bool (*sipVH_QtCore_42)(sip_gilstate_t,PyObject *,const QModelIndex&);

    return ((sipVH_QtCore_42)(sipModuleAPI_QtGui_QtCore->em_virthandlers[42]))(sipGILState,meth,a0);
}

void sipQTableView::selectionChanged(const QItemSelection& a0,const QItemSelection& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_selectionChanged);

    if (!meth)
    {
        QTableView::selectionChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_46(sip_gilstate_t,PyObject *,const QItemSelection&,const QItemSelection&);

    sipVH_QtGui_46(sipGILState,meth,a0,a1);
}

void sipQTableView::currentChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_currentChanged);

    if (!meth)
    {
        QTableView::currentChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_45(sip_gilstate_t,PyObject *,const QModelIndex&,const QModelIndex&);

    sipVH_QtGui_45(sipGILState,meth,a0,a1);
}

void sipQTableView::keyboardSearch(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_keyboardSearch);

    if (!meth)
    {
        QAbstractItemView::keyboardSearch(a0);
        return;
    }

    typedef void (*sipVH_QtCore_33)(sip_gilstate_t,PyObject *,const QString&);

    ((sipVH_QtCore_33)(sipModuleAPI_QtGui_QtCore->em_virthandlers[33]))(sipGILState,meth,a0);
}

void sipQTableView::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_reset);

    if (!meth)
    {
        QAbstractItemView::reset();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQTableView::doItemsLayout()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_doItemsLayout);

    if (!meth)
    {
        QAbstractItemView::doItemsLayout();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQTableView::selectAll()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_selectAll);

    if (!meth)
    {
        QAbstractItemView::selectAll();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQTableView::dataChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_dataChanged);

    if (!meth)
    {
        QAbstractItemView::dataChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_45(sip_gilstate_t,PyObject *,const QModelIndex&,const QModelIndex&);

    sipVH_QtGui_45(sipGILState,meth,a0,a1);
}

void sipQTableView::rowsInserted(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_rowsInserted);

    if (!meth)
    {
        QAbstractItemView::rowsInserted(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_53(sip_gilstate_t,PyObject *,const QModelIndex&,int,int);

    sipVH_QtGui_53(sipGILState,meth,a0,a1,a2);
}

void sipQTableView::rowsAboutToBeRemoved(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_rowsAboutToBeRemoved);

    if (!meth)
    {
        QAbstractItemView::rowsAboutToBeRemoved(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_53(sip_gilstate_t,PyObject *,const QModelIndex&,int,int);

    sipVH_QtGui_53(sipGILState,meth,a0,a1,a2);
}

void sipQTableView::updateEditorData()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_updateEditorData);

    if (!meth)
    {
        QAbstractItemView::updateEditorData();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQTableView::updateEditorGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_updateEditorGeometries);

    if (!meth)
    {
        QAbstractItemView::updateEditorGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQTableView::verticalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_verticalScrollbarValueChanged);

    if (!meth)
    {
        QAbstractItemView::verticalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState,meth,a0);
}

void sipQTableView::horizontalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_horizontalScrollbarValueChanged);

    if (!meth)
    {
        QAbstractItemView::horizontalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState,meth,a0);
}

void sipQTableView::closeEditor(QWidget *a0,QAbstractItemDelegate::EndEditHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_closeEditor);

    if (!meth)
    {
        QAbstractItemView::closeEditor(a0,a1);
        return;
    }

    extern void sipVH_QtGui_236(sip_gilstate_t,PyObject *,QWidget *,QAbstractItemDelegate::EndEditHint);

    sipVH_QtGui_236(sipGILState,meth,a0,a1);
}

void sipQTableView::commitData(QWidget *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_commitData);

    if (!meth)
    {
        QAbstractItemView::commitData(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t,PyObject *,QWidget *);

    sipVH_QtGui_7(sipGILState,meth,a0);
}

void sipQTableView::editorDestroyed(QObject *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_editorDestroyed);

    if (!meth)
    {
        QAbstractItemView::editorDestroyed(a0);
        return;
    }

    extern void sipVH_QtGui_235(sip_gilstate_t,PyObject *,QObject *);

    sipVH_QtGui_235(sipGILState,meth,a0);
}

bool sipQTableView::edit(const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent *a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_edit);

    if (!meth)
        return QAbstractItemView::edit(a0,a1,a2);

    extern bool sipVH_QtGui_234(sip_gilstate_t,PyObject *,const QModelIndex&,QAbstractItemView::EditTrigger,QEvent *);

    return sipVH_QtGui_234(sipGILState,meth,a0,a1,a2);
}

QItemSelectionModel::SelectionFlags sipQTableView::selectionCommand(const QModelIndex& a0,const QEvent *a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_selectionCommand);

    if (!meth)
        return QAbstractItemView::selectionCommand(a0,a1);

    extern QItemSelectionModel::SelectionFlags sipVH_QtGui_233(sip_gilstate_t,PyObject *,const QModelIndex&,const QEvent *);

    return sipVH_QtGui_233(sipGILState,meth,a0,a1);
}

void sipQTableView::startDrag(Qt::DropActions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_startDrag);

    if (!meth)
    {
        QAbstractItemView::startDrag(a0);
        return;
    }

    extern void sipVH_QtGui_153(sip_gilstate_t,PyObject *,Qt::DropActions);

    sipVH_QtGui_153(sipGILState,meth,a0);
}

bool sipQTableView::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QAbstractItemView::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQTableView::viewportEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_viewportEvent);

    if (!meth)
        return QAbstractItemView::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

void sipQTableView::mousePressEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_mousePressEvent);

    if (!meth)
    {
        QAbstractItemView::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQTableView::mouseMoveEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!meth)
    {
        QAbstractItemView::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQTableView::mouseReleaseEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!meth)
    {
        QAbstractItemView::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQTableView::mouseDoubleClickEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!meth)
    {
        QAbstractItemView::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQTableView::dragEnterEvent(QDragEnterEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!meth)
    {
        QAbstractItemView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t,PyObject *,QDragEnterEvent *);

    sipVH_QtGui_18(sipGILState,meth,a0);
}

void sipQTableView::dragMoveEvent(QDragMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!meth)
    {
        QAbstractItemView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t,PyObject *,QDragMoveEvent *);

    sipVH_QtGui_17(sipGILState,meth,a0);
}

void sipQTableView::dragLeaveEvent(QDragLeaveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!meth)
    {
        QAbstractItemView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t,PyObject *,QDragLeaveEvent *);

    sipVH_QtGui_16(sipGILState,meth,a0);
}

void sipQTableView::dropEvent(QDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_dropEvent);

    if (!meth)
    {
        QAbstractItemView::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t,PyObject *,QDropEvent *);

    sipVH_QtGui_15(sipGILState,meth,a0);
}

void sipQTableView::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_focusInEvent);

    if (!meth)
    {
        QAbstractItemView::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

void sipQTableView::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_focusOutEvent);

    if (!meth)
    {
        QAbstractItemView::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

void sipQTableView::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_keyPressEvent);

    if (!meth)
    {
        QAbstractItemView::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQTableView::resizeEvent(QResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_resizeEvent);

    if (!meth)
    {
        QAbstractItemView::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t,PyObject *,QResizeEvent *);

    sipVH_QtGui_2(sipGILState,meth,a0);
}

QVariant sipQTableView::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[55]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!meth)
        return QAbstractItemView::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t,PyObject *,Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState,meth,a0);
}

bool sipQTableView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!meth)
        return QAbstractItemView::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_11(sip_gilstate_t,PyObject *,bool);

    return sipVH_QtGui_11(sipGILState,meth,a0);
}

void sipQTableView::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[57],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!meth)
    {
        QAbstractItemView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t,PyObject *,QInputMethodEvent *);

    sipVH_QtGui_13(sipGILState,meth,a0);
}

QSize sipQTableView::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[58]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!meth)
        return QAbstractScrollArea::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_4(sipGILState,meth);
}

QSize sipQTableView::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[59]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QAbstractScrollArea::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_4(sipGILState,meth);
}

void sipQTableView::wheelEvent(QWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[60],sipPySelf,NULL,sipName_wheelEvent);

    if (!meth)
    {
        QAbstractScrollArea::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t,PyObject *,QWheelEvent *);

    sipVH_QtGui_5(sipGILState,meth,a0);
}

void sipQTableView::contextMenuEvent(QContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[61],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!meth)
    {
        QAbstractScrollArea::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t,PyObject *,QContextMenuEvent *);

    sipVH_QtGui_21(sipGILState,meth,a0);
}

void sipQTableView::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[62],sipPySelf,NULL,sipName_changeEvent);

    if (!meth)
    {
        QFrame::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

int sipQTableView::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[63]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

void sipQTableView::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[64],sipPySelf,NULL,sipName_setVisible);

    if (!meth)
    {
        QWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

int sipQTableView::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[65]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QWidget::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

QPaintEngine * sipQTableView::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[66]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QWidget::paintEngine();

    extern QPaintEngine * sipVH_QtGui_27(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_27(sipGILState,meth);
}

void sipQTableView::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[67],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!meth)
    {
        QWidget::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQTableView::enterEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[68],sipPySelf,NULL,sipName_enterEvent);

    if (!meth)
    {
        QWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQTableView::leaveEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[69],sipPySelf,NULL,sipName_leaveEvent);

    if (!meth)
    {
        QWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQTableView::moveEvent(QMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[70],sipPySelf,NULL,sipName_moveEvent);

    if (!meth)
    {
        QWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t,PyObject *,QMoveEvent *);

    sipVH_QtGui_23(sipGILState,meth,a0);
}

void sipQTableView::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[71],sipPySelf,NULL,sipName_closeEvent);

    if (!meth)
    {
        QWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t,PyObject *,QCloseEvent *);

    sipVH_QtGui_22(sipGILState,meth,a0);
}

void sipQTableView::tabletEvent(QTabletEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[72],sipPySelf,NULL,sipName_tabletEvent);

    if (!meth)
    {
        QWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t,PyObject *,QTabletEvent *);

    sipVH_QtGui_20(sipGILState,meth,a0);
}

void sipQTableView::actionEvent(QActionEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[73],sipPySelf,NULL,sipName_actionEvent);

    if (!meth)
    {
        QWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t,PyObject *,QActionEvent *);

    sipVH_QtGui_19(sipGILState,meth,a0);
}

void sipQTableView::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[74],sipPySelf,NULL,sipName_showEvent);

    if (!meth)
    {
        QWidget::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t,PyObject *,QShowEvent *);

    sipVH_QtGui_1(sipGILState,meth,a0);
}

void sipQTableView::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[75],sipPySelf,NULL,sipName_hideEvent);

    if (!meth)
    {
        QWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t,PyObject *,QHideEvent *);

    sipVH_QtGui_0(sipGILState,meth,a0);
}

int sipQTableView::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[76]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QWidget::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t,PyObject *,QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState,meth,a0);
}

void sipQTableView::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[77],sipPySelf,NULL,sipName_enabledChange);

    if (!meth)
    {
        QWidget::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQTableView::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[78],sipPySelf,NULL,sipName_paletteChange);

    if (!meth)
    {
        QWidget::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t,PyObject *,const QPalette&);

    sipVH_QtGui_10(sipGILState,meth,a0);
}

void sipQTableView::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[79],sipPySelf,NULL,sipName_fontChange);

    if (!meth)
    {
        QWidget::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t,PyObject *,const QFont&);

    sipVH_QtGui_9(sipGILState,meth,a0);
}

void sipQTableView::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[80],sipPySelf,NULL,sipName_windowActivationChange);

    if (!meth)
    {
        QWidget::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQTableView::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[81],sipPySelf,NULL,sipName_languageChange);

    if (!meth)
    {
        QWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

bool sipQTableView::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[82],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQTableView::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[83],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQTableView::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[84],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQTableView::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[85],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQTableView::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[86],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QTableView_setModel, "QTableView.setModel(QAbstractItemModel)");

extern "C" {static PyObject *meth_QTableView_setModel(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemModel * a0;
        PyObject *a0Keep;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QTableView, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTableView::setModel(a0) : sipCpp->setModel(a0));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, 37, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setModel, doc_QTableView_setModel);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setRootIndex, "QTableView.setRootIndex(QModelIndex)");

extern "C" {static PyObject *meth_QTableView_setRootIndex(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setRootIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTableView, &sipCpp, sipType_QModelIndex, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTableView::setRootIndex(*a0) : sipCpp->setRootIndex(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setRootIndex, doc_QTableView_setRootIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setSelectionModel, "QTableView.setSelectionModel(QItemSelectionModel)");

extern "C" {static PyObject *meth_QTableView_setSelectionModel(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setSelectionModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QItemSelectionModel * a0;
        PyObject *a0Keep;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QTableView, &sipCpp, &a0Keep, sipType_QItemSelectionModel, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTableView::setSelectionModel(a0) : sipCpp->setSelectionModel(a0));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, 38, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setSelectionModel, doc_QTableView_setSelectionModel);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_horizontalHeader, "QTableView.horizontalHeader() -> QHeaderView");

extern "C" {static PyObject *meth_QTableView_horizontalHeader(PyObject *, PyObject *);}
static PyObject *meth_QTableView_horizontalHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableView, &sipCpp))
        {
            QHeaderView *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->horizontalHeader();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QHeaderView,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_horizontalHeader, doc_QTableView_horizontalHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_verticalHeader, "QTableView.verticalHeader() -> QHeaderView");

extern "C" {static PyObject *meth_QTableView_verticalHeader(PyObject *, PyObject *);}
static PyObject *meth_QTableView_verticalHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableView, &sipCpp))
        {
            QHeaderView *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->verticalHeader();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QHeaderView,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_verticalHeader, doc_QTableView_verticalHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setHorizontalHeader, "QTableView.setHorizontalHeader(QHeaderView)");

extern "C" {static PyObject *meth_QTableView_setHorizontalHeader(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setHorizontalHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHeaderView * a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QTableView, &sipCpp, sipType_QHeaderView, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHorizontalHeader(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setHorizontalHeader, doc_QTableView_setHorizontalHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setVerticalHeader, "QTableView.setVerticalHeader(QHeaderView)");

extern "C" {static PyObject *meth_QTableView_setVerticalHeader(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setVerticalHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHeaderView * a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QTableView, &sipCpp, sipType_QHeaderView, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setVerticalHeader(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setVerticalHeader, doc_QTableView_setVerticalHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_rowViewportPosition, "QTableView.rowViewportPosition(int) -> int");

extern "C" {static PyObject *meth_QTableView_rowViewportPosition(PyObject *, PyObject *);}
static PyObject *meth_QTableView_rowViewportPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rowViewportPosition(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_rowViewportPosition, doc_QTableView_rowViewportPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setRowHeight, "QTableView.setRowHeight(int, int)");

extern "C" {static PyObject *meth_QTableView_setRowHeight(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setRowHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRowHeight(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setRowHeight, doc_QTableView_setRowHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_rowHeight, "QTableView.rowHeight(int) -> int");

extern "C" {static PyObject *meth_QTableView_rowHeight(PyObject *, PyObject *);}
static PyObject *meth_QTableView_rowHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rowHeight(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_rowHeight, doc_QTableView_rowHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_rowAt, "QTableView.rowAt(int) -> int");

extern "C" {static PyObject *meth_QTableView_rowAt(PyObject *, PyObject *);}
static PyObject *meth_QTableView_rowAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rowAt(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_rowAt, doc_QTableView_rowAt);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_columnViewportPosition, "QTableView.columnViewportPosition(int) -> int");

extern "C" {static PyObject *meth_QTableView_columnViewportPosition(PyObject *, PyObject *);}
static PyObject *meth_QTableView_columnViewportPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->columnViewportPosition(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_columnViewportPosition, doc_QTableView_columnViewportPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setColumnWidth, "QTableView.setColumnWidth(int, int)");

extern "C" {static PyObject *meth_QTableView_setColumnWidth(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setColumnWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColumnWidth(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setColumnWidth, doc_QTableView_setColumnWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_columnWidth, "QTableView.columnWidth(int) -> int");

extern "C" {static PyObject *meth_QTableView_columnWidth(PyObject *, PyObject *);}
static PyObject *meth_QTableView_columnWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->columnWidth(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_columnWidth, doc_QTableView_columnWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_columnAt, "QTableView.columnAt(int) -> int");

extern "C" {static PyObject *meth_QTableView_columnAt(PyObject *, PyObject *);}
static PyObject *meth_QTableView_columnAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->columnAt(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_columnAt, doc_QTableView_columnAt);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_isRowHidden, "QTableView.isRowHidden(int) -> bool");

extern "C" {static PyObject *meth_QTableView_isRowHidden(PyObject *, PyObject *);}
static PyObject *meth_QTableView_isRowHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRowHidden(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_isRowHidden, doc_QTableView_isRowHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setRowHidden, "QTableView.setRowHidden(int, bool)");

extern "C" {static PyObject *meth_QTableView_setRowHidden(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setRowHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bool a1;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRowHidden(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setRowHidden, doc_QTableView_setRowHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_isColumnHidden, "QTableView.isColumnHidden(int) -> bool");

extern "C" {static PyObject *meth_QTableView_isColumnHidden(PyObject *, PyObject *);}
static PyObject *meth_QTableView_isColumnHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isColumnHidden(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_isColumnHidden, doc_QTableView_isColumnHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setColumnHidden, "QTableView.setColumnHidden(int, bool)");

extern "C" {static PyObject *meth_QTableView_setColumnHidden(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setColumnHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bool a1;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColumnHidden(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setColumnHidden, doc_QTableView_setColumnHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_showGrid, "QTableView.showGrid() -> bool");

extern "C" {static PyObject *meth_QTableView_showGrid(PyObject *, PyObject *);}
static PyObject *meth_QTableView_showGrid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->showGrid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_showGrid, doc_QTableView_showGrid);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setShowGrid, "QTableView.setShowGrid(bool)");

extern "C" {static PyObject *meth_QTableView_setShowGrid(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setShowGrid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setShowGrid(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setShowGrid, doc_QTableView_setShowGrid);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_gridStyle, "QTableView.gridStyle() -> Qt.PenStyle");

extern "C" {static PyObject *meth_QTableView_gridStyle(PyObject *, PyObject *);}
static PyObject *meth_QTableView_gridStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableView, &sipCpp))
        {
            Qt::PenStyle sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->gridStyle();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_PenStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_gridStyle, doc_QTableView_gridStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setGridStyle, "QTableView.setGridStyle(Qt.PenStyle)");

extern "C" {static PyObject *meth_QTableView_setGridStyle(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setGridStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::PenStyle a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTableView, &sipCpp, sipType_Qt_PenStyle, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setGridStyle(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setGridStyle, doc_QTableView_setGridStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_visualRect, "QTableView.visualRect(QModelIndex) -> QRect");

extern "C" {static PyObject *meth_QTableView_visualRect(PyObject *, PyObject *);}
static PyObject *meth_QTableView_visualRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTableView, &sipCpp, sipType_QModelIndex, &a0))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect((sipSelfWasArg ? sipCpp->QTableView::visualRect(*a0) : sipCpp->visualRect(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_visualRect, doc_QTableView_visualRect);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_scrollTo, "QTableView.scrollTo(QModelIndex, QAbstractItemView.ScrollHint hint=QAbstractItemView.EnsureVisible)");

extern "C" {static PyObject *meth_QTableView_scrollTo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableView_scrollTo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QAbstractItemView::ScrollHint a1 = QAbstractItemView::EnsureVisible;
        QTableView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_hint,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QTableView, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemView_ScrollHint, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTableView::scrollTo(*a0,a1) : sipCpp->scrollTo(*a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_scrollTo, doc_QTableView_scrollTo);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_indexAt, "QTableView.indexAt(QPoint) -> QModelIndex");

extern "C" {static PyObject *meth_QTableView_indexAt(PyObject *, PyObject *);}
static PyObject *meth_QTableView_indexAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPoint * a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTableView, &sipCpp, sipType_QPoint, &a0))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QTableView::indexAt(*a0) : sipCpp->indexAt(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_indexAt, doc_QTableView_indexAt);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_selectRow, "QTableView.selectRow(int)");

extern "C" {static PyObject *meth_QTableView_selectRow(PyObject *, PyObject *);}
static PyObject *meth_QTableView_selectRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->selectRow(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_selectRow, doc_QTableView_selectRow);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_selectColumn, "QTableView.selectColumn(int)");

extern "C" {static PyObject *meth_QTableView_selectColumn(PyObject *, PyObject *);}
static PyObject *meth_QTableView_selectColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->selectColumn(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_selectColumn, doc_QTableView_selectColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_hideRow, "QTableView.hideRow(int)");

extern "C" {static PyObject *meth_QTableView_hideRow(PyObject *, PyObject *);}
static PyObject *meth_QTableView_hideRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->hideRow(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_hideRow, doc_QTableView_hideRow);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_hideColumn, "QTableView.hideColumn(int)");

extern "C" {static PyObject *meth_QTableView_hideColumn(PyObject *, PyObject *);}
static PyObject *meth_QTableView_hideColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->hideColumn(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_hideColumn, doc_QTableView_hideColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_showRow, "QTableView.showRow(int)");

extern "C" {static PyObject *meth_QTableView_showRow(PyObject *, PyObject *);}
static PyObject *meth_QTableView_showRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->showRow(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_showRow, doc_QTableView_showRow);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_showColumn, "QTableView.showColumn(int)");

extern "C" {static PyObject *meth_QTableView_showColumn(PyObject *, PyObject *);}
static PyObject *meth_QTableView_showColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->showColumn(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_showColumn, doc_QTableView_showColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_resizeRowToContents, "QTableView.resizeRowToContents(int)");

extern "C" {static PyObject *meth_QTableView_resizeRowToContents(PyObject *, PyObject *);}
static PyObject *meth_QTableView_resizeRowToContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resizeRowToContents(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_resizeRowToContents, doc_QTableView_resizeRowToContents);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_resizeRowsToContents, "QTableView.resizeRowsToContents()");

extern "C" {static PyObject *meth_QTableView_resizeRowsToContents(PyObject *, PyObject *);}
static PyObject *meth_QTableView_resizeRowsToContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resizeRowsToContents();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_resizeRowsToContents, doc_QTableView_resizeRowsToContents);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_resizeColumnToContents, "QTableView.resizeColumnToContents(int)");

extern "C" {static PyObject *meth_QTableView_resizeColumnToContents(PyObject *, PyObject *);}
static PyObject *meth_QTableView_resizeColumnToContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resizeColumnToContents(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_resizeColumnToContents, doc_QTableView_resizeColumnToContents);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_resizeColumnsToContents, "QTableView.resizeColumnsToContents()");

extern "C" {static PyObject *meth_QTableView_resizeColumnsToContents(PyObject *, PyObject *);}
static PyObject *meth_QTableView_resizeColumnsToContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resizeColumnsToContents();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_resizeColumnsToContents, doc_QTableView_resizeColumnsToContents);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_sortByColumn, "QTableView.sortByColumn(int)\n"
    "QTableView.sortByColumn(int, Qt.SortOrder)");

extern "C" {static PyObject *meth_QTableView_sortByColumn(PyObject *, PyObject *);}
static PyObject *meth_QTableView_sortByColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sortByColumn(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        Qt::SortOrder a1;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QTableView, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sortByColumn(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_sortByColumn, doc_QTableView_sortByColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_rowMoved, "QTableView.rowMoved(int, int, int)");

extern "C" {static PyObject *meth_QTableView_rowMoved(PyObject *, PyObject *);}
static PyObject *meth_QTableView_rowMoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->rowMoved(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_rowMoved, doc_QTableView_rowMoved);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_columnMoved, "QTableView.columnMoved(int, int, int)");

extern "C" {static PyObject *meth_QTableView_columnMoved(PyObject *, PyObject *);}
static PyObject *meth_QTableView_columnMoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->columnMoved(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_columnMoved, doc_QTableView_columnMoved);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_rowResized, "QTableView.rowResized(int, int, int)");

extern "C" {static PyObject *meth_QTableView_rowResized(PyObject *, PyObject *);}
static PyObject *meth_QTableView_rowResized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->rowResized(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_rowResized, doc_QTableView_rowResized);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_columnResized, "QTableView.columnResized(int, int, int)");

extern "C" {static PyObject *meth_QTableView_columnResized(PyObject *, PyObject *);}
static PyObject *meth_QTableView_columnResized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->columnResized(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_columnResized, doc_QTableView_columnResized);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_rowCountChanged, "QTableView.rowCountChanged(int, int)");

extern "C" {static PyObject *meth_QTableView_rowCountChanged(PyObject *, PyObject *);}
static PyObject *meth_QTableView_rowCountChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->rowCountChanged(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_rowCountChanged, doc_QTableView_rowCountChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_columnCountChanged, "QTableView.columnCountChanged(int, int)");

extern "C" {static PyObject *meth_QTableView_columnCountChanged(PyObject *, PyObject *);}
static PyObject *meth_QTableView_columnCountChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->columnCountChanged(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_columnCountChanged, doc_QTableView_columnCountChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_scrollContentsBy, "QTableView.scrollContentsBy(int, int)");

extern "C" {static PyObject *meth_QTableView_scrollContentsBy(PyObject *, PyObject *);}
static PyObject *meth_QTableView_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTableView::scrollContentsBy(a0,a1) : sipCpp->scrollContentsBy(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_scrollContentsBy, doc_QTableView_scrollContentsBy);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_viewOptions, "QTableView.viewOptions() -> QStyleOptionViewItem");

extern "C" {static PyObject *meth_QTableView_viewOptions(PyObject *, PyObject *);}
static PyObject *meth_QTableView_viewOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTableView, &sipCpp))
        {
            QStyleOptionViewItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStyleOptionViewItem((sipSelfWasArg ? sipCpp->QTableView::viewOptions() : sipCpp->viewOptions()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStyleOptionViewItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_viewOptions, doc_QTableView_viewOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_paintEvent, "QTableView.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QTableView_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QTableView_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent * a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTableView, &sipCpp, sipType_QPaintEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTableView::paintEvent(a0) : sipCpp->paintEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_paintEvent, doc_QTableView_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_timerEvent, "QTableView.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QTableView_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QTableView_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTableView, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTableView::timerEvent(a0) : sipCpp->timerEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_timerEvent, doc_QTableView_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_horizontalOffset, "QTableView.horizontalOffset() -> int");

extern "C" {static PyObject *meth_QTableView_horizontalOffset(PyObject *, PyObject *);}
static PyObject *meth_QTableView_horizontalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTableView, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTableView::horizontalOffset() : sipCpp->horizontalOffset());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_horizontalOffset, doc_QTableView_horizontalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_verticalOffset, "QTableView.verticalOffset() -> int");

extern "C" {static PyObject *meth_QTableView_verticalOffset(PyObject *, PyObject *);}
static PyObject *meth_QTableView_verticalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTableView, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTableView::verticalOffset() : sipCpp->verticalOffset());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_verticalOffset, doc_QTableView_verticalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_moveCursor, "QTableView.moveCursor(QAbstractItemView.CursorAction, Qt.KeyboardModifiers) -> QModelIndex");

extern "C" {static PyObject *meth_QTableView_moveCursor(PyObject *, PyObject *);}
static PyObject *meth_QTableView_moveCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemView::CursorAction a0;
        Qt::KeyboardModifiers * a1;
        int a1State = 0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1", &sipSelf, sipType_QTableView, &sipCpp, sipType_QAbstractItemView_CursorAction, &a0, sipType_Qt_KeyboardModifiers, &a1, &a1State))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QTableView::moveCursor(a0,*a1) : sipCpp->moveCursor(a0,*a1)));
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_Qt_KeyboardModifiers,a1State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_moveCursor, doc_QTableView_moveCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setSelection, "QTableView.setSelection(QRect, QItemSelectionModel.SelectionFlags)");

extern "C" {static PyObject *meth_QTableView_setSelection(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect * a0;
        QItemSelectionModel::SelectionFlags * a1;
        int a1State = 0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QTableView, &sipCpp, sipType_QRect, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTableView::setSelection(*a0,*a1) : sipCpp->setSelection(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setSelection, doc_QTableView_setSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_visualRegionForSelection, "QTableView.visualRegionForSelection(QItemSelection) -> QRegion");

extern "C" {static PyObject *meth_QTableView_visualRegionForSelection(PyObject *, PyObject *);}
static PyObject *meth_QTableView_visualRegionForSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection * a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QTableView, &sipCpp, sipType_QItemSelection, &a0))
        {
            QRegion *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRegion((sipSelfWasArg ? sipCpp->QTableView::visualRegionForSelection(*a0) : sipCpp->visualRegionForSelection(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_visualRegionForSelection, doc_QTableView_visualRegionForSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_selectedIndexes, "QTableView.selectedIndexes() -> list-of-QModelIndex");

extern "C" {static PyObject *meth_QTableView_selectedIndexes(PyObject *, PyObject *);}
static PyObject *meth_QTableView_selectedIndexes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTableView, &sipCpp))
        {
            QModelIndexList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndexList((sipSelfWasArg ? sipCpp->QTableView::selectedIndexes() : sipCpp->selectedIndexes()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_selectedIndexes, doc_QTableView_selectedIndexes);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_updateGeometries, "QTableView.updateGeometries()");

extern "C" {static PyObject *meth_QTableView_updateGeometries(PyObject *, PyObject *);}
static PyObject *meth_QTableView_updateGeometries(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTableView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTableView::updateGeometries() : sipCpp->updateGeometries());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_updateGeometries, doc_QTableView_updateGeometries);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_sizeHintForRow, "QTableView.sizeHintForRow(int) -> int");

extern "C" {static PyObject *meth_QTableView_sizeHintForRow(PyObject *, PyObject *);}
static PyObject *meth_QTableView_sizeHintForRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTableView::sizeHintForRow(a0) : sipCpp->sizeHintForRow(a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_sizeHintForRow, doc_QTableView_sizeHintForRow);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_sizeHintForColumn, "QTableView.sizeHintForColumn(int) -> int");

extern "C" {static PyObject *meth_QTableView_sizeHintForColumn(PyObject *, PyObject *);}
static PyObject *meth_QTableView_sizeHintForColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTableView::sizeHintForColumn(a0) : sipCpp->sizeHintForColumn(a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_sizeHintForColumn, doc_QTableView_sizeHintForColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_verticalScrollbarAction, "QTableView.verticalScrollbarAction(int)");

extern "C" {static PyObject *meth_QTableView_verticalScrollbarAction(PyObject *, PyObject *);}
static PyObject *meth_QTableView_verticalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTableView::verticalScrollbarAction(a0) : sipCpp->verticalScrollbarAction(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_verticalScrollbarAction, doc_QTableView_verticalScrollbarAction);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_horizontalScrollbarAction, "QTableView.horizontalScrollbarAction(int)");

extern "C" {static PyObject *meth_QTableView_horizontalScrollbarAction(PyObject *, PyObject *);}
static PyObject *meth_QTableView_horizontalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTableView::horizontalScrollbarAction(a0) : sipCpp->horizontalScrollbarAction(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_horizontalScrollbarAction, doc_QTableView_horizontalScrollbarAction);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_isIndexHidden, "QTableView.isIndexHidden(QModelIndex) -> bool");

extern "C" {static PyObject *meth_QTableView_isIndexHidden(PyObject *, PyObject *);}
static PyObject *meth_QTableView_isIndexHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QTableView, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTableView::isIndexHidden(*a0) : sipCpp->isIndexHidden(*a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_isIndexHidden, doc_QTableView_isIndexHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setSortingEnabled, "QTableView.setSortingEnabled(bool)");

extern "C" {static PyObject *meth_QTableView_setSortingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setSortingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSortingEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setSortingEnabled, doc_QTableView_setSortingEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_isSortingEnabled, "QTableView.isSortingEnabled() -> bool");

extern "C" {static PyObject *meth_QTableView_isSortingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTableView_isSortingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSortingEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_isSortingEnabled, doc_QTableView_isSortingEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setSpan, "QTableView.setSpan(int, int, int, int)");

extern "C" {static PyObject *meth_QTableView_setSpan(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSpan(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setSpan, doc_QTableView_setSpan);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_rowSpan, "QTableView.rowSpan(int, int) -> int");

extern "C" {static PyObject *meth_QTableView_rowSpan(PyObject *, PyObject *);}
static PyObject *meth_QTableView_rowSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rowSpan(a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_rowSpan, doc_QTableView_rowSpan);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_columnSpan, "QTableView.columnSpan(int, int) -> int");

extern "C" {static PyObject *meth_QTableView_columnSpan(PyObject *, PyObject *);}
static PyObject *meth_QTableView_columnSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->columnSpan(a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_columnSpan, doc_QTableView_columnSpan);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setWordWrap, "QTableView.setWordWrap(bool)");

extern "C" {static PyObject *meth_QTableView_setWordWrap(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setWordWrap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWordWrap(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setWordWrap, doc_QTableView_setWordWrap);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_wordWrap, "QTableView.wordWrap() -> bool");

extern "C" {static PyObject *meth_QTableView_wordWrap(PyObject *, PyObject *);}
static PyObject *meth_QTableView_wordWrap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wordWrap();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_wordWrap, doc_QTableView_wordWrap);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setCornerButtonEnabled, "QTableView.setCornerButtonEnabled(bool)");

extern "C" {static PyObject *meth_QTableView_setCornerButtonEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setCornerButtonEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCornerButtonEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setCornerButtonEnabled, doc_QTableView_setCornerButtonEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_isCornerButtonEnabled, "QTableView.isCornerButtonEnabled() -> bool");

extern "C" {static PyObject *meth_QTableView_isCornerButtonEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTableView_isCornerButtonEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isCornerButtonEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_isCornerButtonEnabled, doc_QTableView_isCornerButtonEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_clearSpans, "QTableView.clearSpans()");

extern "C" {static PyObject *meth_QTableView_clearSpans(PyObject *, PyObject *);}
static PyObject *meth_QTableView_clearSpans(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearSpans();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_clearSpans, doc_QTableView_clearSpans);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_selectionChanged, "QTableView.selectionChanged(QItemSelection, QItemSelection)");

extern "C" {static PyObject *meth_QTableView_selectionChanged(PyObject *, PyObject *);}
static PyObject *meth_QTableView_selectionChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection * a0;
        const QItemSelection * a1;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QTableView, &sipCpp, sipType_QItemSelection, &a0, sipType_QItemSelection, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTableView::selectionChanged(*a0,*a1) : sipCpp->selectionChanged(*a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_selectionChanged, doc_QTableView_selectionChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_currentChanged, "QTableView.currentChanged(QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QTableView_currentChanged(PyObject *, PyObject *);}
static PyObject *meth_QTableView_currentChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        const QModelIndex * a1;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QTableView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTableView::currentChanged(*a0,*a1) : sipCpp->currentChanged(*a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_currentChanged, doc_QTableView_currentChanged);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTableView(void *, const sipTypeDef *);}
static void *cast_QTableView(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTableView)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractItemView)->ctd_cast((QAbstractItemView *)(QTableView *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTableView(void *, int);}
static void release_QTableView(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTableView *>(sipCppV);
    else
        delete reinterpret_cast<QTableView *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTableView(sipSimpleWrapper *);}
static void dealloc_QTableView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTableView *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTableView(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QTableView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QTableView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTableView *sipCpp = 0;

    {
        QWidget * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTableView(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTableView[] = {{5, 255, 1}};


static PyMethodDef methods_QTableView[] = {
    {SIP_MLNAME_CAST(sipName_clearSpans), meth_QTableView_clearSpans, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_clearSpans)},
    {SIP_MLNAME_CAST(sipName_columnAt), meth_QTableView_columnAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_columnAt)},
    {SIP_MLNAME_CAST(sipName_columnCountChanged), meth_QTableView_columnCountChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_columnCountChanged)},
    {SIP_MLNAME_CAST(sipName_columnMoved), meth_QTableView_columnMoved, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_columnMoved)},
    {SIP_MLNAME_CAST(sipName_columnResized), meth_QTableView_columnResized, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_columnResized)},
    {SIP_MLNAME_CAST(sipName_columnSpan), meth_QTableView_columnSpan, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_columnSpan)},
    {SIP_MLNAME_CAST(sipName_columnViewportPosition), meth_QTableView_columnViewportPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_columnViewportPosition)},
    {SIP_MLNAME_CAST(sipName_columnWidth), meth_QTableView_columnWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_columnWidth)},
    {SIP_MLNAME_CAST(sipName_currentChanged), meth_QTableView_currentChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_currentChanged)},
    {SIP_MLNAME_CAST(sipName_gridStyle), meth_QTableView_gridStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_gridStyle)},
    {SIP_MLNAME_CAST(sipName_hideColumn), meth_QTableView_hideColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_hideColumn)},
    {SIP_MLNAME_CAST(sipName_hideRow), meth_QTableView_hideRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_hideRow)},
    {SIP_MLNAME_CAST(sipName_horizontalHeader), meth_QTableView_horizontalHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_horizontalHeader)},
    {SIP_MLNAME_CAST(sipName_horizontalOffset), meth_QTableView_horizontalOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_horizontalOffset)},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarAction), meth_QTableView_horizontalScrollbarAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_horizontalScrollbarAction)},
    {SIP_MLNAME_CAST(sipName_indexAt), meth_QTableView_indexAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_indexAt)},
    {SIP_MLNAME_CAST(sipName_isColumnHidden), meth_QTableView_isColumnHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_isColumnHidden)},
    {SIP_MLNAME_CAST(sipName_isCornerButtonEnabled), meth_QTableView_isCornerButtonEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_isCornerButtonEnabled)},
    {SIP_MLNAME_CAST(sipName_isIndexHidden), meth_QTableView_isIndexHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_isIndexHidden)},
    {SIP_MLNAME_CAST(sipName_isRowHidden), meth_QTableView_isRowHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_isRowHidden)},
    {SIP_MLNAME_CAST(sipName_isSortingEnabled), meth_QTableView_isSortingEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_isSortingEnabled)},
    {SIP_MLNAME_CAST(sipName_moveCursor), meth_QTableView_moveCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_moveCursor)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QTableView_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_paintEvent)},
    {SIP_MLNAME_CAST(sipName_resizeColumnToContents), meth_QTableView_resizeColumnToContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_resizeColumnToContents)},
    {SIP_MLNAME_CAST(sipName_resizeColumnsToContents), meth_QTableView_resizeColumnsToContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_resizeColumnsToContents)},
    {SIP_MLNAME_CAST(sipName_resizeRowToContents), meth_QTableView_resizeRowToContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_resizeRowToContents)},
    {SIP_MLNAME_CAST(sipName_resizeRowsToContents), meth_QTableView_resizeRowsToContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_resizeRowsToContents)},
    {SIP_MLNAME_CAST(sipName_rowAt), meth_QTableView_rowAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_rowAt)},
    {SIP_MLNAME_CAST(sipName_rowCountChanged), meth_QTableView_rowCountChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_rowCountChanged)},
    {SIP_MLNAME_CAST(sipName_rowHeight), meth_QTableView_rowHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_rowHeight)},
    {SIP_MLNAME_CAST(sipName_rowMoved), meth_QTableView_rowMoved, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_rowMoved)},
    {SIP_MLNAME_CAST(sipName_rowResized), meth_QTableView_rowResized, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_rowResized)},
    {SIP_MLNAME_CAST(sipName_rowSpan), meth_QTableView_rowSpan, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_rowSpan)},
    {SIP_MLNAME_CAST(sipName_rowViewportPosition), meth_QTableView_rowViewportPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_rowViewportPosition)},
    {SIP_MLNAME_CAST(sipName_scrollContentsBy), meth_QTableView_scrollContentsBy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_scrollContentsBy)},
    {SIP_MLNAME_CAST(sipName_scrollTo), (PyCFunction)meth_QTableView_scrollTo, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTableView_scrollTo)},
    {SIP_MLNAME_CAST(sipName_selectColumn), meth_QTableView_selectColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_selectColumn)},
    {SIP_MLNAME_CAST(sipName_selectRow), meth_QTableView_selectRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_selectRow)},
    {SIP_MLNAME_CAST(sipName_selectedIndexes), meth_QTableView_selectedIndexes, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_selectedIndexes)},
    {SIP_MLNAME_CAST(sipName_selectionChanged), meth_QTableView_selectionChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_selectionChanged)},
    {SIP_MLNAME_CAST(sipName_setColumnHidden), meth_QTableView_setColumnHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setColumnHidden)},
    {SIP_MLNAME_CAST(sipName_setColumnWidth), meth_QTableView_setColumnWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setColumnWidth)},
    {SIP_MLNAME_CAST(sipName_setCornerButtonEnabled), meth_QTableView_setCornerButtonEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setCornerButtonEnabled)},
    {SIP_MLNAME_CAST(sipName_setGridStyle), meth_QTableView_setGridStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setGridStyle)},
    {SIP_MLNAME_CAST(sipName_setHorizontalHeader), meth_QTableView_setHorizontalHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setHorizontalHeader)},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QTableView_setModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setModel)},
    {SIP_MLNAME_CAST(sipName_setRootIndex), meth_QTableView_setRootIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setRootIndex)},
    {SIP_MLNAME_CAST(sipName_setRowHeight), meth_QTableView_setRowHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setRowHeight)},
    {SIP_MLNAME_CAST(sipName_setRowHidden), meth_QTableView_setRowHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setRowHidden)},
    {SIP_MLNAME_CAST(sipName_setSelection), meth_QTableView_setSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setSelection)},
    {SIP_MLNAME_CAST(sipName_setSelectionModel), meth_QTableView_setSelectionModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setSelectionModel)},
    {SIP_MLNAME_CAST(sipName_setShowGrid), meth_QTableView_setShowGrid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setShowGrid)},
    {SIP_MLNAME_CAST(sipName_setSortingEnabled), meth_QTableView_setSortingEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setSortingEnabled)},
    {SIP_MLNAME_CAST(sipName_setSpan), meth_QTableView_setSpan, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setSpan)},
    {SIP_MLNAME_CAST(sipName_setVerticalHeader), meth_QTableView_setVerticalHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setVerticalHeader)},
    {SIP_MLNAME_CAST(sipName_setWordWrap), meth_QTableView_setWordWrap, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setWordWrap)},
    {SIP_MLNAME_CAST(sipName_showColumn), meth_QTableView_showColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_showColumn)},
    {SIP_MLNAME_CAST(sipName_showGrid), meth_QTableView_showGrid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_showGrid)},
    {SIP_MLNAME_CAST(sipName_showRow), meth_QTableView_showRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_showRow)},
    {SIP_MLNAME_CAST(sipName_sizeHintForColumn), meth_QTableView_sizeHintForColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_sizeHintForColumn)},
    {SIP_MLNAME_CAST(sipName_sizeHintForRow), meth_QTableView_sizeHintForRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_sizeHintForRow)},
    {SIP_MLNAME_CAST(sipName_sortByColumn), meth_QTableView_sortByColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_sortByColumn)},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QTableView_timerEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_timerEvent)},
    {SIP_MLNAME_CAST(sipName_updateGeometries), meth_QTableView_updateGeometries, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_updateGeometries)},
    {SIP_MLNAME_CAST(sipName_verticalHeader), meth_QTableView_verticalHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_verticalHeader)},
    {SIP_MLNAME_CAST(sipName_verticalOffset), meth_QTableView_verticalOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_verticalOffset)},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarAction), meth_QTableView_verticalScrollbarAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_verticalScrollbarAction)},
    {SIP_MLNAME_CAST(sipName_viewOptions), meth_QTableView_viewOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_viewOptions)},
    {SIP_MLNAME_CAST(sipName_visualRect), meth_QTableView_visualRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_visualRect)},
    {SIP_MLNAME_CAST(sipName_visualRegionForSelection), meth_QTableView_visualRegionForSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_visualRegionForSelection)},
    {SIP_MLNAME_CAST(sipName_wordWrap), meth_QTableView_wordWrap, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_wordWrap)}
};

PyDoc_STRVAR(doc_QTableView, "\1QTableView(QWidget parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QTableView = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QTableView,
        {0}
    },
    {
        sipNameNr_QTableView,
        {0, 0, 1},
        71, methods_QTableView,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTableView,
    -1,
    -1,
    supers_QTableView,
    0,
    init_QTableView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTableView,
    0,
    0,
    0,
    release_QTableView,
    cast_QTableView,
    0,
    0,
    0
},
    &QTableView::staticMetaObject,
    0,
    0
};

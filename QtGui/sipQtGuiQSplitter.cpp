/*
 * Interface wrapper code.
 *
 * Generated by SIP snapshot-4.10.1-637497440cb5 on Sat Apr 24 19:01:03 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qsplitter.sip"
#include <qsplitter.h>
#line 39 "sipQtGuiQSplitter.cpp"

#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 43 "sipQtGuiQSplitter.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 46 "sipQtGuiQSplitter.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 49 "sipQtGuiQSplitter.cpp"
#line 428 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 52 "sipQtGuiQSplitter.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 55 "sipQtGuiQSplitter.cpp"
#line 98 "/home/maemo/python-qt4-4.7/sip/QtGui/qsplitter.sip"
#include <qsplitter.h>
#line 58 "sipQtGuiQSplitter.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 61 "sipQtGuiQSplitter.cpp"
#line 632 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 64 "sipQtGuiQSplitter.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 67 "sipQtGuiQSplitter.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 70 "sipQtGuiQSplitter.cpp"
#line 399 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 73 "sipQtGuiQSplitter.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 76 "sipQtGuiQSplitter.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qframe.sip"
#include <qframe.h>
#line 79 "sipQtGuiQSplitter.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 82 "sipQtGuiQSplitter.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 85 "sipQtGuiQSplitter.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 88 "sipQtGuiQSplitter.cpp"
#line 45 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 91 "sipQtGuiQSplitter.cpp"
#line 39 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 94 "sipQtGuiQSplitter.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 97 "sipQtGuiQSplitter.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 100 "sipQtGuiQSplitter.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 103 "sipQtGuiQSplitter.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 106 "sipQtGuiQSplitter.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 109 "sipQtGuiQSplitter.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 112 "sipQtGuiQSplitter.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 115 "sipQtGuiQSplitter.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 118 "sipQtGuiQSplitter.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 121 "sipQtGuiQSplitter.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 124 "sipQtGuiQSplitter.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 127 "sipQtGuiQSplitter.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 130 "sipQtGuiQSplitter.cpp"
#line 520 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 539 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 135 "sipQtGuiQSplitter.cpp"
#line 478 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 138 "sipQtGuiQSplitter.cpp"
#line 466 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "sipQtGuiQSplitter.cpp"
#line 565 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "sipQtGuiQSplitter.cpp"
#line 619 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "sipQtGuiQSplitter.cpp"
#line 590 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "sipQtGuiQSplitter.cpp"
#line 607 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "sipQtGuiQSplitter.cpp"
#line 675 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "sipQtGuiQSplitter.cpp"
#line 301 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "sipQtGuiQSplitter.cpp"
#line 490 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "sipQtGuiQSplitter.cpp"
#line 442 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "sipQtGuiQSplitter.cpp"
#line 414 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "sipQtGuiQSplitter.cpp"
#line 379 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "sipQtGuiQSplitter.cpp"
#line 350 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "sipQtGuiQSplitter.cpp"
#line 279 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "sipQtGuiQSplitter.cpp"
#line 238 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "sipQtGuiQSplitter.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 183 "sipQtGuiQSplitter.cpp"
#line 68 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 186 "sipQtGuiQSplitter.cpp"
#line 42 "/home/maemo/python-qt4-4.7/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 189 "sipQtGuiQSplitter.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 192 "sipQtGuiQSplitter.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 195 "sipQtGuiQSplitter.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 198 "sipQtGuiQSplitter.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 201 "sipQtGuiQSplitter.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 204 "sipQtGuiQSplitter.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 207 "sipQtGuiQSplitter.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 210 "sipQtGuiQSplitter.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 213 "sipQtGuiQSplitter.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 216 "sipQtGuiQSplitter.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 219 "sipQtGuiQSplitter.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 222 "sipQtGuiQSplitter.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 225 "sipQtGuiQSplitter.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 228 "sipQtGuiQSplitter.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 231 "sipQtGuiQSplitter.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 234 "sipQtGuiQSplitter.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 237 "sipQtGuiQSplitter.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 240 "sipQtGuiQSplitter.cpp"


class sipQSplitter : public QSplitter
{
public:
    sipQSplitter(QWidget *);
    sipQSplitter(Qt::Orientation,QWidget *);
    virtual ~sipQSplitter();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QSize sizeHint() const;
    QSize minimumSizeHint() const;
    QSplitterHandle * createHandle();
    void childEvent(QChildEvent *);
    bool event(QEvent *);
    void resizeEvent(QResizeEvent *);
    void changeEvent(QEvent *);
    void paintEvent(QPaintEvent *);
    int devType() const;
    void setVisible(bool);
    int heightForWidth(int) const;
    QPaintEngine * paintEngine() const;
    void mousePressEvent(QMouseEvent *);
    void mouseReleaseEvent(QMouseEvent *);
    void mouseDoubleClickEvent(QMouseEvent *);
    void mouseMoveEvent(QMouseEvent *);
    void wheelEvent(QWheelEvent *);
    void keyPressEvent(QKeyEvent *);
    void keyReleaseEvent(QKeyEvent *);
    void focusInEvent(QFocusEvent *);
    void focusOutEvent(QFocusEvent *);
    void enterEvent(QEvent *);
    void leaveEvent(QEvent *);
    void moveEvent(QMoveEvent *);
    void closeEvent(QCloseEvent *);
    void contextMenuEvent(QContextMenuEvent *);
    void tabletEvent(QTabletEvent *);
    void actionEvent(QActionEvent *);
    void dragEnterEvent(QDragEnterEvent *);
    void dragMoveEvent(QDragMoveEvent *);
    void dragLeaveEvent(QDragLeaveEvent *);
    void dropEvent(QDropEvent *);
    void showEvent(QShowEvent *);
    void hideEvent(QHideEvent *);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void inputMethodEvent(QInputMethodEvent *);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    void enabledChange(bool);
    void paletteChange(const QPalette&);
    void fontChange(const QFont&);
    void windowActivationChange(bool);
    void languageChange();
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSplitter(const sipQSplitter &);
    sipQSplitter &operator = (const sipQSplitter &);

    char sipPyMethods[48];
};

sipQSplitter::sipQSplitter(QWidget *a0): QSplitter(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSplitter::sipQSplitter(Qt::Orientation a0,QWidget *a1): QSplitter(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSplitter::~sipQSplitter()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQSplitter::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QSplitter);
}

int sipQSplitter::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QSplitter::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QSplitter,_c,_id,_a);

    return _id;
}

void *sipQSplitter::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QSplitter,_clname)) ? this : QSplitter::qt_metacast(_clname);
}

QSize sipQSplitter::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QSplitter::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_4(sipGILState,meth);
}

QSize sipQSplitter::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!meth)
        return QSplitter::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_4(sipGILState,meth);
}

QSplitterHandle * sipQSplitter::createHandle()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_createHandle);

    if (!meth)
        return QSplitter::createHandle();

    extern QSplitterHandle * sipVH_QtGui_107(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_107(sipGILState,meth);
}

void sipQSplitter::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QSplitter::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

bool sipQSplitter::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QSplitter::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

void sipQSplitter::resizeEvent(QResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_resizeEvent);

    if (!meth)
    {
        QSplitter::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t,PyObject *,QResizeEvent *);

    sipVH_QtGui_2(sipGILState,meth,a0);
}

void sipQSplitter::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_changeEvent);

    if (!meth)
    {
        QSplitter::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQSplitter::paintEvent(QPaintEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_paintEvent);

    if (!meth)
    {
        QFrame::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t,PyObject *,QPaintEvent *);

    sipVH_QtGui_3(sipGILState,meth,a0);
}

int sipQSplitter::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

void sipQSplitter::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_setVisible);

    if (!meth)
    {
        QWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

int sipQSplitter::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QWidget::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

QPaintEngine * sipQSplitter::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QWidget::paintEngine();

    extern QPaintEngine * sipVH_QtGui_27(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_27(sipGILState,meth);
}

void sipQSplitter::mousePressEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_mousePressEvent);

    if (!meth)
    {
        QWidget::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQSplitter::mouseReleaseEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!meth)
    {
        QWidget::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQSplitter::mouseDoubleClickEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!meth)
    {
        QWidget::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQSplitter::mouseMoveEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!meth)
    {
        QWidget::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQSplitter::wheelEvent(QWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_wheelEvent);

    if (!meth)
    {
        QWidget::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t,PyObject *,QWheelEvent *);

    sipVH_QtGui_5(sipGILState,meth,a0);
}

void sipQSplitter::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_keyPressEvent);

    if (!meth)
    {
        QWidget::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQSplitter::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!meth)
    {
        QWidget::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQSplitter::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_focusInEvent);

    if (!meth)
    {
        QWidget::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

void sipQSplitter::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_focusOutEvent);

    if (!meth)
    {
        QWidget::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

void sipQSplitter::enterEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_enterEvent);

    if (!meth)
    {
        QWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQSplitter::leaveEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_leaveEvent);

    if (!meth)
    {
        QWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQSplitter::moveEvent(QMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_moveEvent);

    if (!meth)
    {
        QWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t,PyObject *,QMoveEvent *);

    sipVH_QtGui_23(sipGILState,meth,a0);
}

void sipQSplitter::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_closeEvent);

    if (!meth)
    {
        QWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t,PyObject *,QCloseEvent *);

    sipVH_QtGui_22(sipGILState,meth,a0);
}

void sipQSplitter::contextMenuEvent(QContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!meth)
    {
        QWidget::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t,PyObject *,QContextMenuEvent *);

    sipVH_QtGui_21(sipGILState,meth,a0);
}

void sipQSplitter::tabletEvent(QTabletEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_tabletEvent);

    if (!meth)
    {
        QWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t,PyObject *,QTabletEvent *);

    sipVH_QtGui_20(sipGILState,meth,a0);
}

void sipQSplitter::actionEvent(QActionEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_actionEvent);

    if (!meth)
    {
        QWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t,PyObject *,QActionEvent *);

    sipVH_QtGui_19(sipGILState,meth,a0);
}

void sipQSplitter::dragEnterEvent(QDragEnterEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!meth)
    {
        QWidget::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t,PyObject *,QDragEnterEvent *);

    sipVH_QtGui_18(sipGILState,meth,a0);
}

void sipQSplitter::dragMoveEvent(QDragMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!meth)
    {
        QWidget::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t,PyObject *,QDragMoveEvent *);

    sipVH_QtGui_17(sipGILState,meth,a0);
}

void sipQSplitter::dragLeaveEvent(QDragLeaveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!meth)
    {
        QWidget::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t,PyObject *,QDragLeaveEvent *);

    sipVH_QtGui_16(sipGILState,meth,a0);
}

void sipQSplitter::dropEvent(QDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_dropEvent);

    if (!meth)
    {
        QWidget::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t,PyObject *,QDropEvent *);

    sipVH_QtGui_15(sipGILState,meth,a0);
}

void sipQSplitter::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_showEvent);

    if (!meth)
    {
        QWidget::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t,PyObject *,QShowEvent *);

    sipVH_QtGui_1(sipGILState,meth,a0);
}

void sipQSplitter::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_hideEvent);

    if (!meth)
    {
        QWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t,PyObject *,QHideEvent *);

    sipVH_QtGui_0(sipGILState,meth,a0);
}

int sipQSplitter::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QWidget::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t,PyObject *,QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState,meth,a0);
}

void sipQSplitter::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!meth)
    {
        QWidget::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t,PyObject *,QInputMethodEvent *);

    sipVH_QtGui_13(sipGILState,meth,a0);
}

QVariant sipQSplitter::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!meth)
        return QWidget::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t,PyObject *,Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState,meth,a0);
}

bool sipQSplitter::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!meth)
        return QWidget::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_11(sip_gilstate_t,PyObject *,bool);

    return sipVH_QtGui_11(sipGILState,meth,a0);
}

void sipQSplitter::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_enabledChange);

    if (!meth)
    {
        QWidget::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQSplitter::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_paletteChange);

    if (!meth)
    {
        QWidget::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t,PyObject *,const QPalette&);

    sipVH_QtGui_10(sipGILState,meth,a0);
}

void sipQSplitter::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_fontChange);

    if (!meth)
    {
        QWidget::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t,PyObject *,const QFont&);

    sipVH_QtGui_9(sipGILState,meth,a0);
}

void sipQSplitter::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_windowActivationChange);

    if (!meth)
    {
        QWidget::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQSplitter::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_languageChange);

    if (!meth)
    {
        QWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

bool sipQSplitter::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQSplitter::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQSplitter::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQSplitter::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQSplitter::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QSplitter_addWidget, "QSplitter.addWidget(QWidget)");

extern "C" {static PyObject *meth_QSplitter_addWidget(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_addWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget * a0;
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QSplitter, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addWidget(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_addWidget, doc_QSplitter_addWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_insertWidget, "QSplitter.insertWidget(int, QWidget)");

extern "C" {static PyObject *meth_QSplitter_insertWidget(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_insertWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWidget * a1;
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QSplitter, &sipCpp, &a0, sipType_QWidget, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertWidget(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_insertWidget, doc_QSplitter_insertWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_setOrientation, "QSplitter.setOrientation(Qt.Orientation)");

extern "C" {static PyObject *meth_QSplitter_setOrientation(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_setOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Orientation a0;
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSplitter, &sipCpp, sipType_Qt_Orientation, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOrientation(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_setOrientation, doc_QSplitter_setOrientation);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_orientation, "QSplitter.orientation() -> Qt.Orientation");

extern "C" {static PyObject *meth_QSplitter_orientation(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_orientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSplitter, &sipCpp))
        {
            Qt::Orientation sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->orientation();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_Orientation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_orientation, doc_QSplitter_orientation);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_setChildrenCollapsible, "QSplitter.setChildrenCollapsible(bool)");

extern "C" {static PyObject *meth_QSplitter_setChildrenCollapsible(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_setChildrenCollapsible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSplitter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setChildrenCollapsible(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_setChildrenCollapsible, doc_QSplitter_setChildrenCollapsible);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_childrenCollapsible, "QSplitter.childrenCollapsible() -> bool");

extern "C" {static PyObject *meth_QSplitter_childrenCollapsible(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_childrenCollapsible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSplitter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->childrenCollapsible();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_childrenCollapsible, doc_QSplitter_childrenCollapsible);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_setCollapsible, "QSplitter.setCollapsible(int, bool)");

extern "C" {static PyObject *meth_QSplitter_setCollapsible(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_setCollapsible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bool a1;
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QSplitter, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCollapsible(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_setCollapsible, doc_QSplitter_setCollapsible);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_isCollapsible, "QSplitter.isCollapsible(int) -> bool");

extern "C" {static PyObject *meth_QSplitter_isCollapsible(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_isCollapsible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSplitter, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isCollapsible(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_isCollapsible, doc_QSplitter_isCollapsible);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_setOpaqueResize, "QSplitter.setOpaqueResize(bool opaque=True)");

extern "C" {static PyObject *meth_QSplitter_setOpaqueResize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSplitter_setOpaqueResize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        QSplitter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_opaque,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|b", &sipSelf, sipType_QSplitter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOpaqueResize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_setOpaqueResize, doc_QSplitter_setOpaqueResize);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_opaqueResize, "QSplitter.opaqueResize() -> bool");

extern "C" {static PyObject *meth_QSplitter_opaqueResize(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_opaqueResize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSplitter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->opaqueResize();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_opaqueResize, doc_QSplitter_opaqueResize);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_refresh, "QSplitter.refresh()");

extern "C" {static PyObject *meth_QSplitter_refresh(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_refresh(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSplitter, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->refresh();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_refresh, doc_QSplitter_refresh);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_sizeHint, "QSplitter.sizeHint() -> QSize");

extern "C" {static PyObject *meth_QSplitter_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSplitter, &sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QSplitter::sizeHint() : sipCpp->sizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_sizeHint, doc_QSplitter_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_minimumSizeHint, "QSplitter.minimumSizeHint() -> QSize");

extern "C" {static PyObject *meth_QSplitter_minimumSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_minimumSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSplitter, &sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QSplitter::minimumSizeHint() : sipCpp->minimumSizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_minimumSizeHint, doc_QSplitter_minimumSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_sizes, "QSplitter.sizes() -> list-of-int");

extern "C" {static PyObject *meth_QSplitter_sizes(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_sizes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSplitter, &sipCpp))
        {
            QList<int> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<int>(sipCpp->sizes());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_1800,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_sizes, doc_QSplitter_sizes);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_setSizes, "QSplitter.setSizes(list-of-int)");

extern "C" {static PyObject *meth_QSplitter_setSizes(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_setSizes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<int> * a0;
        int a0State = 0;
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSplitter, &sipCpp, sipType_QList_1800,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSizes(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<int> *>(a0),sipType_QList_1800,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_setSizes, doc_QSplitter_setSizes);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_saveState, "QSplitter.saveState() -> QByteArray");

extern "C" {static PyObject *meth_QSplitter_saveState(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_saveState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSplitter, &sipCpp))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->saveState());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_saveState, doc_QSplitter_saveState);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_restoreState, "QSplitter.restoreState(QByteArray) -> bool");

extern "C" {static PyObject *meth_QSplitter_restoreState(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_restoreState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSplitter, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->restoreState(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_restoreState, doc_QSplitter_restoreState);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_handleWidth, "QSplitter.handleWidth() -> int");

extern "C" {static PyObject *meth_QSplitter_handleWidth(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_handleWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSplitter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->handleWidth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_handleWidth, doc_QSplitter_handleWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_setHandleWidth, "QSplitter.setHandleWidth(int)");

extern "C" {static PyObject *meth_QSplitter_setHandleWidth(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_setHandleWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSplitter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHandleWidth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_setHandleWidth, doc_QSplitter_setHandleWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_indexOf, "QSplitter.indexOf(QWidget) -> int");

extern "C" {static PyObject *meth_QSplitter_indexOf(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_indexOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget * a0;
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSplitter, &sipCpp, sipType_QWidget, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOf(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_indexOf, doc_QSplitter_indexOf);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_widget, "QSplitter.widget(int) -> QWidget");

extern "C" {static PyObject *meth_QSplitter_widget(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_widget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSplitter, &sipCpp, &a0))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->widget(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_widget, doc_QSplitter_widget);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_count, "QSplitter.count() -> int");

extern "C" {static PyObject *meth_QSplitter_count(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSplitter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_count, doc_QSplitter_count);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_getRange, "QSplitter.getRange(int) -> (int, int)");

extern "C" {static PyObject *meth_QSplitter_getRange(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_getRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSplitter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->getRange(a0,&a1,&a2);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(ii)",a1,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_getRange, doc_QSplitter_getRange);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_handle, "QSplitter.handle(int) -> QSplitterHandle");

extern "C" {static PyObject *meth_QSplitter_handle(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_handle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSplitter, &sipCpp, &a0))
        {
            QSplitterHandle *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->handle(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QSplitterHandle,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_handle, doc_QSplitter_handle);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_setStretchFactor, "QSplitter.setStretchFactor(int, int)");

extern "C" {static PyObject *meth_QSplitter_setStretchFactor(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_setStretchFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QSplitter, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStretchFactor(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_setStretchFactor, doc_QSplitter_setStretchFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_createHandle, "QSplitter.createHandle() -> QSplitterHandle");

extern "C" {static PyObject *meth_QSplitter_createHandle(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_createHandle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSplitter, &sipCpp))
        {
            QSplitterHandle *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSplitter::createHandle() : sipCpp->createHandle());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QSplitterHandle,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_createHandle, doc_QSplitter_createHandle);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_childEvent, "QSplitter.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QSplitter_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QSplitter, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QSplitter::childEvent(a0) : sipCpp->childEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_childEvent, doc_QSplitter_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_event, "QSplitter.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QSplitter_event(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QSplitter, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSplitter::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_event, doc_QSplitter_event);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_resizeEvent, "QSplitter.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QSplitter_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent * a0;
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QSplitter, &sipCpp, sipType_QResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QSplitter::resizeEvent(a0) : sipCpp->resizeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_resizeEvent, doc_QSplitter_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_changeEvent, "QSplitter.changeEvent(QEvent)");

extern "C" {static PyObject *meth_QSplitter_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QSplitter, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QSplitter::changeEvent(a0) : sipCpp->changeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_changeEvent, doc_QSplitter_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_moveSplitter, "QSplitter.moveSplitter(int, int)");

extern "C" {static PyObject *meth_QSplitter_moveSplitter(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_moveSplitter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QSplitter, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveSplitter(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_moveSplitter, doc_QSplitter_moveSplitter);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_setRubberBand, "QSplitter.setRubberBand(int)");

extern "C" {static PyObject *meth_QSplitter_setRubberBand(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_setRubberBand(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QSplitter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRubberBand(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_setRubberBand, doc_QSplitter_setRubberBand);

    return NULL;
}


PyDoc_STRVAR(doc_QSplitter_closestLegalPosition, "QSplitter.closestLegalPosition(int, int) -> int");

extern "C" {static PyObject *meth_QSplitter_closestLegalPosition(PyObject *, PyObject *);}
static PyObject *meth_QSplitter_closestLegalPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QSplitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QSplitter, &sipCpp, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->closestLegalPosition(a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSplitter, sipName_closestLegalPosition, doc_QSplitter_closestLegalPosition);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSplitter(void *, const sipTypeDef *);}
static void *cast_QSplitter(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSplitter)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QFrame)->ctd_cast((QFrame *)(QSplitter *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSplitter(void *, int);}
static void release_QSplitter(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSplitter *>(sipCppV);
    else
        delete reinterpret_cast<QSplitter *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QSplitter(sipSimpleWrapper *);}
static void dealloc_QSplitter(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSplitter *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSplitter(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QSplitter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QSplitter(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSplitter *sipCpp = 0;

    {
        QWidget * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSplitter(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        Qt::Orientation a0;
        QWidget * a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_Qt_Orientation, &a0, sipType_QWidget, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSplitter(a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSplitter[] = {{141, 255, 1}};


static PyMethodDef methods_QSplitter[] = {
    {SIP_MLNAME_CAST(sipName_addWidget), meth_QSplitter_addWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_addWidget)},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QSplitter_changeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_changeEvent)},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QSplitter_childEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_childEvent)},
    {SIP_MLNAME_CAST(sipName_childrenCollapsible), meth_QSplitter_childrenCollapsible, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_childrenCollapsible)},
    {SIP_MLNAME_CAST(sipName_closestLegalPosition), meth_QSplitter_closestLegalPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_closestLegalPosition)},
    {SIP_MLNAME_CAST(sipName_count), meth_QSplitter_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_count)},
    {SIP_MLNAME_CAST(sipName_createHandle), meth_QSplitter_createHandle, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_createHandle)},
    {SIP_MLNAME_CAST(sipName_event), meth_QSplitter_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_event)},
    {SIP_MLNAME_CAST(sipName_getRange), meth_QSplitter_getRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_getRange)},
    {SIP_MLNAME_CAST(sipName_handle), meth_QSplitter_handle, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_handle)},
    {SIP_MLNAME_CAST(sipName_handleWidth), meth_QSplitter_handleWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_handleWidth)},
    {SIP_MLNAME_CAST(sipName_indexOf), meth_QSplitter_indexOf, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_indexOf)},
    {SIP_MLNAME_CAST(sipName_insertWidget), meth_QSplitter_insertWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_insertWidget)},
    {SIP_MLNAME_CAST(sipName_isCollapsible), meth_QSplitter_isCollapsible, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_isCollapsible)},
    {SIP_MLNAME_CAST(sipName_minimumSizeHint), meth_QSplitter_minimumSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_minimumSizeHint)},
    {SIP_MLNAME_CAST(sipName_moveSplitter), meth_QSplitter_moveSplitter, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_moveSplitter)},
    {SIP_MLNAME_CAST(sipName_opaqueResize), meth_QSplitter_opaqueResize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_opaqueResize)},
    {SIP_MLNAME_CAST(sipName_orientation), meth_QSplitter_orientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_orientation)},
    {SIP_MLNAME_CAST(sipName_refresh), meth_QSplitter_refresh, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_refresh)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QSplitter_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_restoreState), meth_QSplitter_restoreState, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_restoreState)},
    {SIP_MLNAME_CAST(sipName_saveState), meth_QSplitter_saveState, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_saveState)},
    {SIP_MLNAME_CAST(sipName_setChildrenCollapsible), meth_QSplitter_setChildrenCollapsible, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_setChildrenCollapsible)},
    {SIP_MLNAME_CAST(sipName_setCollapsible), meth_QSplitter_setCollapsible, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_setCollapsible)},
    {SIP_MLNAME_CAST(sipName_setHandleWidth), meth_QSplitter_setHandleWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_setHandleWidth)},
    {SIP_MLNAME_CAST(sipName_setOpaqueResize), (PyCFunction)meth_QSplitter_setOpaqueResize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSplitter_setOpaqueResize)},
    {SIP_MLNAME_CAST(sipName_setOrientation), meth_QSplitter_setOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_setOrientation)},
    {SIP_MLNAME_CAST(sipName_setRubberBand), meth_QSplitter_setRubberBand, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_setRubberBand)},
    {SIP_MLNAME_CAST(sipName_setSizes), meth_QSplitter_setSizes, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_setSizes)},
    {SIP_MLNAME_CAST(sipName_setStretchFactor), meth_QSplitter_setStretchFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_setStretchFactor)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QSplitter_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_sizeHint)},
    {SIP_MLNAME_CAST(sipName_sizes), meth_QSplitter_sizes, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_sizes)},
    {SIP_MLNAME_CAST(sipName_widget), meth_QSplitter_widget, METH_VARARGS, SIP_MLDOC_CAST(doc_QSplitter_widget)}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QSplitter[] = {
    {"splitterMoved(int,int)", "\1QSplitter.splitterMoved(int, int)", 0},
    {0, 0, 0}
};

PyDoc_STRVAR(doc_QSplitter, "\1QSplitter(QWidget parent=None)\n"
    "QSplitter(Qt.Orientation, QWidget parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QSplitter = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QSplitter,
        {0}
    },
    {
        sipNameNr_QSplitter,
        {0, 0, 1},
        33, methods_QSplitter,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSplitter,
    -1,
    -1,
    supers_QSplitter,
    0,
    init_QSplitter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSplitter,
    0,
    0,
    0,
    release_QSplitter,
    cast_QSplitter,
    0,
    0,
    0
},
    &QSplitter::staticMetaObject,
    0,
    pyqt4_signals_QSplitter
};

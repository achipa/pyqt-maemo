/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10-snapshot-20100108 on Tue Feb 16 16:28:38 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtHelp.h"

#line 64 "/home/maemo/python-qt4-4.7/sip/QtHelp/qhelpsearchengine.sip"
#include <qhelpsearchengine.h>
#line 39 "sipQtHelpQHelpSearchEngine.cpp"

#line 39 "/home/maemo/python-qt4-4.7/sip/QtHelp/qhelpenginecore.sip"
#include <qhelpenginecore.h>
#line 43 "sipQtHelpQHelpSearchEngine.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 46 "sipQtHelpQHelpSearchEngine.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 49 "sipQtHelpQHelpSearchEngine.cpp"
#line 39 "/home/maemo/python-qt4-4.7/sip/QtHelp/qhelpsearchengine.sip"
#include <qhelpsearchengine.h>
#line 52 "sipQtHelpQHelpSearchEngine.cpp"
#line 205 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#include <qpair.h>
#line 56 "sipQtHelpQHelpSearchEngine.cpp"
#line 83 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 59 "sipQtHelpQHelpSearchEngine.cpp"
#line 39 "/home/maemo/python-qt4-4.7/sip/QtHelp/qhelpsearchresultwidget.sip"
#include <qhelpsearchresultwidget.h>
#line 62 "sipQtHelpQHelpSearchEngine.cpp"
#line 39 "/home/maemo/python-qt4-4.7/sip/QtHelp/qhelpsearchquerywidget.sip"
#include <qhelpsearchquerywidget.h>
#line 65 "sipQtHelpQHelpSearchEngine.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68 "sipQtHelpQHelpSearchEngine.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71 "sipQtHelpQHelpSearchEngine.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 74 "sipQtHelpQHelpSearchEngine.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 77 "sipQtHelpQHelpSearchEngine.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 80 "sipQtHelpQHelpSearchEngine.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 83 "sipQtHelpQHelpSearchEngine.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 86 "sipQtHelpQHelpSearchEngine.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 89 "sipQtHelpQHelpSearchEngine.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 92 "sipQtHelpQHelpSearchEngine.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 95 "sipQtHelpQHelpSearchEngine.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 98 "sipQtHelpQHelpSearchEngine.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 101 "sipQtHelpQHelpSearchEngine.cpp"


class sipQHelpSearchEngine : public QHelpSearchEngine
{
public:
    sipQHelpSearchEngine(QHelpEngineCore *,QObject *);
    virtual ~sipQHelpSearchEngine();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQHelpSearchEngine(const sipQHelpSearchEngine &);
    sipQHelpSearchEngine &operator = (const sipQHelpSearchEngine &);

    char sipPyMethods[7];
};

sipQHelpSearchEngine::sipQHelpSearchEngine(QHelpEngineCore *a0,QObject *a1): QHelpSearchEngine(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQHelpSearchEngine::~sipQHelpSearchEngine()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQHelpSearchEngine::metaObject() const
{
    return sip_QtHelp_qt_metaobject(sipPySelf,sipType_QHelpSearchEngine);
}

int sipQHelpSearchEngine::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QHelpSearchEngine::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtHelp_qt_metacall(sipPySelf,sipType_QHelpSearchEngine,_c,_id,_a);

    return _id;
}

void *sipQHelpSearchEngine::qt_metacast(const char *_clname)
{
    return (sip_QtHelp_qt_metacast && sip_QtHelp_qt_metacast(sipPySelf,sipType_QHelpSearchEngine,_clname)) ? this : QHelpSearchEngine::qt_metacast(_clname);
}

bool sipQHelpSearchEngine::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtHelp_QtCore->em_virthandlers[12]))(sipGILState,meth,a0);
}

bool sipQHelpSearchEngine::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtHelp_QtCore->em_virthandlers[20]))(sipGILState,meth,a0,a1);
}

void sipQHelpSearchEngine::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_QtHelp_QtCore->em_virthandlers[3]))(sipGILState,meth,a0);
}

void sipQHelpSearchEngine::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_QtHelp_QtCore->em_virthandlers[19]))(sipGILState,meth,a0);
}

void sipQHelpSearchEngine::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtHelp_QtCore->em_virthandlers[18]))(sipGILState,meth,a0);
}

void sipQHelpSearchEngine::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtHelp_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQHelpSearchEngine::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtHelp_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QHelpSearchEngine_query, "QHelpSearchEngine.query() -> list-of-QHelpSearchQuery");

extern "C" {static PyObject *meth_QHelpSearchEngine_query(PyObject *, PyObject *);}
static PyObject *meth_QHelpSearchEngine_query(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHelpSearchEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpSearchEngine, &sipCpp))
        {
            QList<QHelpSearchQuery> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QHelpSearchQuery>(sipCpp->query());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QHelpSearchQuery,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpSearchEngine, sipName_query, doc_QHelpSearchEngine_query);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpSearchEngine_queryWidget, "QHelpSearchEngine.queryWidget() -> QHelpSearchQueryWidget");

extern "C" {static PyObject *meth_QHelpSearchEngine_queryWidget(PyObject *, PyObject *);}
static PyObject *meth_QHelpSearchEngine_queryWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHelpSearchEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpSearchEngine, &sipCpp))
        {
            QHelpSearchQueryWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->queryWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QHelpSearchQueryWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpSearchEngine, sipName_queryWidget, doc_QHelpSearchEngine_queryWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpSearchEngine_resultWidget, "QHelpSearchEngine.resultWidget() -> QHelpSearchResultWidget");

extern "C" {static PyObject *meth_QHelpSearchEngine_resultWidget(PyObject *, PyObject *);}
static PyObject *meth_QHelpSearchEngine_resultWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHelpSearchEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpSearchEngine, &sipCpp))
        {
            QHelpSearchResultWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->resultWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QHelpSearchResultWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpSearchEngine, sipName_resultWidget, doc_QHelpSearchEngine_resultWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpSearchEngine_hitsCount, "QHelpSearchEngine.hitsCount() -> int");

extern "C" {static PyObject *meth_QHelpSearchEngine_hitsCount(PyObject *, PyObject *);}
static PyObject *meth_QHelpSearchEngine_hitsCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHelpSearchEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpSearchEngine, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hitsCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpSearchEngine, sipName_hitsCount, doc_QHelpSearchEngine_hitsCount);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpSearchEngine_hits, "QHelpSearchEngine.hits(int, int) -> list-of-tuple-of-QString-QString");

extern "C" {static PyObject *meth_QHelpSearchEngine_hits(PyObject *, PyObject *);}
static PyObject *meth_QHelpSearchEngine_hits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QHelpSearchEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QHelpSearchEngine, &sipCpp, &a0, &a1))
        {
            QList<QPair<QString,QString> > *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QPair<QString,QString> >(sipCpp->hits(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0600QPair_0100QString_0100QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpSearchEngine, sipName_hits, doc_QHelpSearchEngine_hits);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpSearchEngine_reindexDocumentation, "QHelpSearchEngine.reindexDocumentation()");

extern "C" {static PyObject *meth_QHelpSearchEngine_reindexDocumentation(PyObject *, PyObject *);}
static PyObject *meth_QHelpSearchEngine_reindexDocumentation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHelpSearchEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpSearchEngine, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->reindexDocumentation();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpSearchEngine, sipName_reindexDocumentation, doc_QHelpSearchEngine_reindexDocumentation);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpSearchEngine_cancelIndexing, "QHelpSearchEngine.cancelIndexing()");

extern "C" {static PyObject *meth_QHelpSearchEngine_cancelIndexing(PyObject *, PyObject *);}
static PyObject *meth_QHelpSearchEngine_cancelIndexing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHelpSearchEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpSearchEngine, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->cancelIndexing();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpSearchEngine, sipName_cancelIndexing, doc_QHelpSearchEngine_cancelIndexing);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpSearchEngine_search, "QHelpSearchEngine.search(list-of-QHelpSearchQuery)");

extern "C" {static PyObject *meth_QHelpSearchEngine_search(PyObject *, PyObject *);}
static PyObject *meth_QHelpSearchEngine_search(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QHelpSearchQuery> * a0;
        int a0State = 0;
        QHelpSearchEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHelpSearchEngine, &sipCpp, sipType_QList_0100QHelpSearchQuery,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->search(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QHelpSearchQuery> *>(a0),sipType_QList_0100QHelpSearchQuery,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpSearchEngine, sipName_search, doc_QHelpSearchEngine_search);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpSearchEngine_cancelSearching, "QHelpSearchEngine.cancelSearching()");

extern "C" {static PyObject *meth_QHelpSearchEngine_cancelSearching(PyObject *, PyObject *);}
static PyObject *meth_QHelpSearchEngine_cancelSearching(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHelpSearchEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpSearchEngine, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->cancelSearching();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpSearchEngine, sipName_cancelSearching, doc_QHelpSearchEngine_cancelSearching);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QHelpSearchEngine(void *, const sipTypeDef *);}
static void *cast_QHelpSearchEngine(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QHelpSearchEngine)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QHelpSearchEngine *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHelpSearchEngine(void *, int);}
static void release_QHelpSearchEngine(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQHelpSearchEngine *>(sipCppV);
    else
        delete reinterpret_cast<QHelpSearchEngine *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QHelpSearchEngine(sipSimpleWrapper *);}
static void dealloc_QHelpSearchEngine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQHelpSearchEngine *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QHelpSearchEngine(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QHelpSearchEngine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QHelpSearchEngine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQHelpSearchEngine *sipCpp = 0;

    {
        QHelpEngineCore * a0;
        QObject * a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|JH", sipType_QHelpEngineCore, &a0, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQHelpSearchEngine(a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QHelpSearchEngine[] = {{111, 0, 1}};


static PyMethodDef methods_QHelpSearchEngine[] = {
    {SIP_MLNAME_CAST(sipName_cancelIndexing), meth_QHelpSearchEngine_cancelIndexing, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpSearchEngine_cancelIndexing)},
    {SIP_MLNAME_CAST(sipName_cancelSearching), meth_QHelpSearchEngine_cancelSearching, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpSearchEngine_cancelSearching)},
    {SIP_MLNAME_CAST(sipName_hits), meth_QHelpSearchEngine_hits, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpSearchEngine_hits)},
    {SIP_MLNAME_CAST(sipName_hitsCount), meth_QHelpSearchEngine_hitsCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpSearchEngine_hitsCount)},
    {SIP_MLNAME_CAST(sipName_query), meth_QHelpSearchEngine_query, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpSearchEngine_query)},
    {SIP_MLNAME_CAST(sipName_queryWidget), meth_QHelpSearchEngine_queryWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpSearchEngine_queryWidget)},
    {SIP_MLNAME_CAST(sipName_reindexDocumentation), meth_QHelpSearchEngine_reindexDocumentation, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpSearchEngine_reindexDocumentation)},
    {SIP_MLNAME_CAST(sipName_resultWidget), meth_QHelpSearchEngine_resultWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpSearchEngine_resultWidget)},
    {SIP_MLNAME_CAST(sipName_search), meth_QHelpSearchEngine_search, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpSearchEngine_search)}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QHelpSearchEngine[] = {
    {"searchingFinished(int)", "\1QHelpSearchEngine.searchingFinished(int)", 0},
    {"searchingStarted()", "\1QHelpSearchEngine.searchingStarted()", 0},
    {"indexingFinished()", "\1QHelpSearchEngine.indexingFinished()", 0},
    {"indexingStarted()", "\1QHelpSearchEngine.indexingStarted()", 0},
    {0, 0, 0}
};

PyDoc_STRVAR(doc_QHelpSearchEngine, "\1QHelpSearchEngine(QHelpEngineCore, QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_QtHelp_QHelpSearchEngine = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QHelpSearchEngine,
        {0}
    },
    {
        sipNameNr_QHelpSearchEngine,
        {0, 0, 1},
        9, methods_QHelpSearchEngine,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QHelpSearchEngine,
    -1,
    -1,
    supers_QHelpSearchEngine,
    0,
    init_QHelpSearchEngine,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QHelpSearchEngine,
    0,
    0,
    0,
    release_QHelpSearchEngine,
    cast_QHelpSearchEngine,
    0,
    0,
    0
},
    &QHelpSearchEngine::staticMetaObject,
    0,
    pyqt4_signals_QHelpSearchEngine
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10-snapshot-20100108 on Tue Feb 16 16:28:38 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtHelp.h"

#line 60 "/home/maemo/python-qt4-4.7/sip/QtHelp/qhelpcontentwidget.sip"
#include <qhelpcontentwidget.h>
#line 39 "sipQtHelpQHelpContentModel.cpp"

#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 43 "sipQtHelpQHelpContentModel.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 46 "sipQtHelpQHelpContentModel.cpp"
#line 39 "/home/maemo/python-qt4-4.7/sip/QtHelp/qhelpcontentwidget.sip"
#include <qhelpcontentwidget.h>
#line 49 "sipQtHelpQHelpContentModel.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 52 "sipQtHelpQHelpContentModel.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 55 "sipQtHelpQHelpContentModel.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 58 "sipQtHelpQHelpContentModel.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 61 "sipQtHelpQHelpContentModel.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 64 "sipQtHelpQHelpContentModel.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 67 "sipQtHelpQHelpContentModel.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 70 "sipQtHelpQHelpContentModel.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 73 "sipQtHelpQHelpContentModel.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 76 "sipQtHelpQHelpContentModel.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 79 "sipQtHelpQHelpContentModel.cpp"
#line 149 "/home/maemo/python-qt4-4.7/sip/QtCore/qmap.sip"
#include <qmap.h>
#line 82 "sipQtHelpQHelpContentModel.cpp"
#line 131 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 85 "sipQtHelpQHelpContentModel.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 88 "sipQtHelpQHelpContentModel.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 91 "sipQtHelpQHelpContentModel.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 94 "sipQtHelpQHelpContentModel.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 97 "sipQtHelpQHelpContentModel.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 100 "sipQtHelpQHelpContentModel.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 103 "sipQtHelpQHelpContentModel.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 106 "sipQtHelpQHelpContentModel.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 109 "sipQtHelpQHelpContentModel.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 112 "sipQtHelpQHelpContentModel.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 115 "sipQtHelpQHelpContentModel.cpp"


PyDoc_STRVAR(doc_QHelpContentModel_createContents, "QHelpContentModel.createContents(QString)");

extern "C" {static PyObject *meth_QHelpContentModel_createContents(PyObject *, PyObject *);}
static PyObject *meth_QHelpContentModel_createContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QHelpContentModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHelpContentModel, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->createContents(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpContentModel, sipName_createContents, doc_QHelpContentModel_createContents);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpContentModel_contentItemAt, "QHelpContentModel.contentItemAt(QModelIndex) -> QHelpContentItem");

extern "C" {static PyObject *meth_QHelpContentModel_contentItemAt(PyObject *, PyObject *);}
static PyObject *meth_QHelpContentModel_contentItemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex * a0;
        QHelpContentModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QHelpContentModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QHelpContentItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contentItemAt(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QHelpContentItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpContentModel, sipName_contentItemAt, doc_QHelpContentModel_contentItemAt);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpContentModel_data, "QHelpContentModel.data(QModelIndex, int) -> QVariant");

extern "C" {static PyObject *meth_QHelpContentModel_data(PyObject *, PyObject *);}
static PyObject *meth_QHelpContentModel_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        int a1;
        QHelpContentModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9i", &sipSelf, sipType_QHelpContentModel, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QHelpContentModel::data(*a0,a1) : sipCpp->data(*a0,a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpContentModel, sipName_data, doc_QHelpContentModel_data);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpContentModel_index, "QHelpContentModel.index(int, int, QModelIndex parent=QModelIndex()) -> QModelIndex");

extern "C" {static PyObject *meth_QHelpContentModel_index(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHelpContentModel_index(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex * a2 = &a2def;
        QHelpContentModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QHelpContentModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QHelpContentModel::index(a0,a1,*a2) : sipCpp->index(a0,a1,*a2)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpContentModel, sipName_index, doc_QHelpContentModel_index);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpContentModel_parent, "QHelpContentModel.parent(QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QHelpContentModel_parent(PyObject *, PyObject *);}
static PyObject *meth_QHelpContentModel_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QHelpContentModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QHelpContentModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QHelpContentModel::parent(*a0) : sipCpp->parent(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpContentModel, sipName_parent, doc_QHelpContentModel_parent);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpContentModel_rowCount, "QHelpContentModel.rowCount(QModelIndex parent=QModelIndex()) -> int");

extern "C" {static PyObject *meth_QHelpContentModel_rowCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHelpContentModel_rowCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex& a0def = QModelIndex();
        const QModelIndex * a0 = &a0def;
        QHelpContentModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QHelpContentModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QHelpContentModel::rowCount(*a0) : sipCpp->rowCount(*a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpContentModel, sipName_rowCount, doc_QHelpContentModel_rowCount);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpContentModel_columnCount, "QHelpContentModel.columnCount(QModelIndex parent=QModelIndex()) -> int");

extern "C" {static PyObject *meth_QHelpContentModel_columnCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHelpContentModel_columnCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex& a0def = QModelIndex();
        const QModelIndex * a0 = &a0def;
        QHelpContentModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QHelpContentModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QHelpContentModel::columnCount(*a0) : sipCpp->columnCount(*a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpContentModel, sipName_columnCount, doc_QHelpContentModel_columnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpContentModel_isCreatingContents, "QHelpContentModel.isCreatingContents() -> bool");

extern "C" {static PyObject *meth_QHelpContentModel_isCreatingContents(PyObject *, PyObject *);}
static PyObject *meth_QHelpContentModel_isCreatingContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHelpContentModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpContentModel, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isCreatingContents();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpContentModel, sipName_isCreatingContents, doc_QHelpContentModel_isCreatingContents);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QHelpContentModel(void *, const sipTypeDef *);}
static void *cast_QHelpContentModel(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QHelpContentModel)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractItemModel)->ctd_cast((QAbstractItemModel *)(QHelpContentModel *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHelpContentModel(void *, int);}
static void release_QHelpContentModel(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QHelpContentModel *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QHelpContentModel(sipSimpleWrapper *);}
static void dealloc_QHelpContentModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QHelpContentModel(sipSelf->u.cppPtr,0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QHelpContentModel[] = {{9, 0, 1}};


static PyMethodDef methods_QHelpContentModel[] = {
    {SIP_MLNAME_CAST(sipName_columnCount), (PyCFunction)meth_QHelpContentModel_columnCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHelpContentModel_columnCount)},
    {SIP_MLNAME_CAST(sipName_contentItemAt), meth_QHelpContentModel_contentItemAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpContentModel_contentItemAt)},
    {SIP_MLNAME_CAST(sipName_createContents), meth_QHelpContentModel_createContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpContentModel_createContents)},
    {SIP_MLNAME_CAST(sipName_data), meth_QHelpContentModel_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpContentModel_data)},
    {SIP_MLNAME_CAST(sipName_index), (PyCFunction)meth_QHelpContentModel_index, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHelpContentModel_index)},
    {SIP_MLNAME_CAST(sipName_isCreatingContents), meth_QHelpContentModel_isCreatingContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpContentModel_isCreatingContents)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QHelpContentModel_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpContentModel_parent)},
    {SIP_MLNAME_CAST(sipName_rowCount), (PyCFunction)meth_QHelpContentModel_rowCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHelpContentModel_rowCount)}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QHelpContentModel[] = {
    {"contentsCreated()", "\1QHelpContentModel.contentsCreated()", 0},
    {"contentsCreationStarted()", "\1QHelpContentModel.contentsCreationStarted()", 0},
    {0, 0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtHelp_QHelpContentModel = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QHelpContentModel,
        {0}
    },
    {
        sipNameNr_QHelpContentModel,
        {0, 0, 1},
        8, methods_QHelpContentModel,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QHelpContentModel,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QHelpContentModel,
    0,
    0,
    0,
    release_QHelpContentModel,
    cast_QHelpContentModel,
    0,
    0,
    0
},
    &QHelpContentModel::staticMetaObject,
    0,
    pyqt4_signals_QHelpContentModel
};

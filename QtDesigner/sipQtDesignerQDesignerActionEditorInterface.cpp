/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10-snapshot-20100108 on Tue Feb 16 16:32:14 2010
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDesigner.h"

#line 37 "/home/maemo/python-qt4-4.7/sip/QtDesigner/abstractactioneditor.sip"
#include <abstractactioneditor.h>
#line 39 "sipQtDesignerQDesignerActionEditorInterface.cpp"

#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 43 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 46 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtDesigner/abstractformwindow.sip"
#include <abstractformwindow.h>
#line 49 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 52 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtDesigner/abstractformeditor.sip"
#include <abstractformeditor.h>
#line 55 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 39 "/home/maemo/python-qt4-4.7/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 58 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 61 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 64 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 67 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 70 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 73 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 76 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 79 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 43 "/home/maemo/python-qt4-4.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 82 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 85 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 88 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 91 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 94 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 97 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 100 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 103 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 106 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 520 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 539 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 111 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 114 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 478 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 117 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 466 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 120 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 565 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 123 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 619 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 126 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 590 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 129 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 607 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 132 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 675 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 135 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 301 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 138 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 490 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 442 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 428 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 414 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 399 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 379 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 350 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 279 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 238 "/home/maemo/python-qt4-4.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 168 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 68 "/home/maemo/python-qt4-4.7/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 171 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 42 "/home/maemo/python-qt4-4.7/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 174 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 177 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 180 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 183 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 186 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 189 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 192 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 195 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 198 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 201 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 318 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 204 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 305 "/home/maemo/python-qt4-4.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 207 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 40 "/home/maemo/python-qt4-4.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 210 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 38 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 213 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 125 "/home/maemo/python-qt4-4.7/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 216 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 219 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 41 "/home/maemo/python-qt4-4.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 222 "sipQtDesignerQDesignerActionEditorInterface.cpp"
#line 37 "/home/maemo/python-qt4-4.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 225 "sipQtDesignerQDesignerActionEditorInterface.cpp"


class sipQDesignerActionEditorInterface : public QDesignerActionEditorInterface
{
public:
    sipQDesignerActionEditorInterface(QWidget *,Qt::WindowFlags);
    virtual ~sipQDesignerActionEditorInterface();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QDesignerFormEditorInterface * core() const;
    void manageAction(QAction *);
    void unmanageAction(QAction *);
    void setFormWindow(QDesignerFormWindowInterface *);
    int devType() const;
    void setVisible(bool);
    QSize sizeHint() const;
    QSize minimumSizeHint() const;
    int heightForWidth(int) const;
    QPaintEngine * paintEngine() const;
    bool event(QEvent *);
    void mousePressEvent(QMouseEvent *);
    void mouseReleaseEvent(QMouseEvent *);
    void mouseDoubleClickEvent(QMouseEvent *);
    void mouseMoveEvent(QMouseEvent *);
    void wheelEvent(QWheelEvent *);
    void keyPressEvent(QKeyEvent *);
    void keyReleaseEvent(QKeyEvent *);
    void focusInEvent(QFocusEvent *);
    void focusOutEvent(QFocusEvent *);
    void enterEvent(QEvent *);
    void leaveEvent(QEvent *);
    void paintEvent(QPaintEvent *);
    void moveEvent(QMoveEvent *);
    void resizeEvent(QResizeEvent *);
    void closeEvent(QCloseEvent *);
    void contextMenuEvent(QContextMenuEvent *);
    void tabletEvent(QTabletEvent *);
    void actionEvent(QActionEvent *);
    void dragEnterEvent(QDragEnterEvent *);
    void dragMoveEvent(QDragMoveEvent *);
    void dragLeaveEvent(QDragLeaveEvent *);
    void dropEvent(QDropEvent *);
    void showEvent(QShowEvent *);
    void hideEvent(QHideEvent *);
    void changeEvent(QEvent *);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void inputMethodEvent(QInputMethodEvent *);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    void enabledChange(bool);
    void paletteChange(const QPalette&);
    void fontChange(const QFont&);
    void windowActivationChange(bool);
    void languageChange();
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDesignerActionEditorInterface(const sipQDesignerActionEditorInterface &);
    sipQDesignerActionEditorInterface &operator = (const sipQDesignerActionEditorInterface &);

    char sipPyMethods[51];
};

sipQDesignerActionEditorInterface::sipQDesignerActionEditorInterface(QWidget *a0,Qt::WindowFlags a1): QDesignerActionEditorInterface(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDesignerActionEditorInterface::~sipQDesignerActionEditorInterface()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQDesignerActionEditorInterface::metaObject() const
{
    return sip_QtDesigner_qt_metaobject(sipPySelf,sipType_QDesignerActionEditorInterface);
}

int sipQDesignerActionEditorInterface::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QDesignerActionEditorInterface::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtDesigner_qt_metacall(sipPySelf,sipType_QDesignerActionEditorInterface,_c,_id,_a);

    return _id;
}

void *sipQDesignerActionEditorInterface::qt_metacast(const char *_clname)
{
    return (sip_QtDesigner_qt_metacast && sip_QtDesigner_qt_metacast(sipPySelf,sipType_QDesignerActionEditorInterface,_clname)) ? this : QDesignerActionEditorInterface::qt_metacast(_clname);
}

QDesignerFormEditorInterface * sipQDesignerActionEditorInterface::core() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_core);

    if (!meth)
        return QDesignerActionEditorInterface::core();

    extern QDesignerFormEditorInterface * sipVH_QtDesigner_14(sip_gilstate_t,PyObject *);

    return sipVH_QtDesigner_14(sipGILState,meth);
}

void sipQDesignerActionEditorInterface::manageAction(QAction *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_QDesignerActionEditorInterface,sipName_manageAction);

    if (!meth)
        return;

    extern void sipVH_QtDesigner_41(sip_gilstate_t,PyObject *,QAction *);

    sipVH_QtDesigner_41(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::unmanageAction(QAction *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,sipName_QDesignerActionEditorInterface,sipName_unmanageAction);

    if (!meth)
        return;

    extern void sipVH_QtDesigner_41(sip_gilstate_t,PyObject *,QAction *);

    sipVH_QtDesigner_41(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::setFormWindow(QDesignerFormWindowInterface *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,sipName_QDesignerActionEditorInterface,sipName_setFormWindow);

    if (!meth)
        return;

    extern void sipVH_QtDesigner_15(sip_gilstate_t,PyObject *,QDesignerFormWindowInterface *);

    sipVH_QtDesigner_15(sipGILState,meth,a0);
}

int sipQDesignerActionEditorInterface::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QWidget::devType();

    typedef int (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtDesigner_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

void sipQDesignerActionEditorInterface::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_setVisible);

    if (!meth)
    {
        QWidget::setVisible(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_7)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[7]))(sipGILState,meth,a0);
}

QSize sipQDesignerActionEditorInterface::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QWidget::sizeHint();

    typedef QSize (*sipVH_QtGui_4)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtGui_4)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[4]))(sipGILState,meth);
}

QSize sipQDesignerActionEditorInterface::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!meth)
        return QWidget::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_4)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtGui_4)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[4]))(sipGILState,meth);
}

int sipQDesignerActionEditorInterface::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QWidget::heightForWidth(a0);

    typedef int (*sipVH_QtGui_29)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[29]))(sipGILState,meth,a0);
}

QPaintEngine * sipQDesignerActionEditorInterface::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QWidget::paintEngine();

    typedef QPaintEngine * (*sipVH_QtGui_28)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[28]))(sipGILState,meth);
}

bool sipQDesignerActionEditorInterface::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QWidget::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtDesigner_QtCore->em_virthandlers[12]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::mousePressEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_mousePressEvent);

    if (!meth)
    {
        QWidget::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_27)(sip_gilstate_t,PyObject *,QMouseEvent *);

    ((sipVH_QtGui_27)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[27]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::mouseReleaseEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!meth)
    {
        QWidget::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_27)(sip_gilstate_t,PyObject *,QMouseEvent *);

    ((sipVH_QtGui_27)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[27]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::mouseDoubleClickEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!meth)
    {
        QWidget::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_27)(sip_gilstate_t,PyObject *,QMouseEvent *);

    ((sipVH_QtGui_27)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[27]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::mouseMoveEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!meth)
    {
        QWidget::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_27)(sip_gilstate_t,PyObject *,QMouseEvent *);

    ((sipVH_QtGui_27)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[27]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::wheelEvent(QWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_wheelEvent);

    if (!meth)
    {
        QWidget::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t,PyObject *,QWheelEvent *);

    ((sipVH_QtGui_5)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[5]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_keyPressEvent);

    if (!meth)
    {
        QWidget::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t,PyObject *,QKeyEvent *);

    ((sipVH_QtGui_26)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[26]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!meth)
    {
        QWidget::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t,PyObject *,QKeyEvent *);

    ((sipVH_QtGui_26)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[26]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_focusInEvent);

    if (!meth)
    {
        QWidget::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_25)(sip_gilstate_t,PyObject *,QFocusEvent *);

    ((sipVH_QtGui_25)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_focusOutEvent);

    if (!meth)
    {
        QWidget::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_25)(sip_gilstate_t,PyObject *,QFocusEvent *);

    ((sipVH_QtGui_25)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::enterEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_enterEvent);

    if (!meth)
    {
        QWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtDesigner_QtCore->em_virthandlers[18]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::leaveEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_leaveEvent);

    if (!meth)
    {
        QWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtDesigner_QtCore->em_virthandlers[18]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::paintEvent(QPaintEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_paintEvent);

    if (!meth)
    {
        QWidget::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t,PyObject *,QPaintEvent *);

    ((sipVH_QtGui_3)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[3]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::moveEvent(QMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_moveEvent);

    if (!meth)
    {
        QWidget::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_24)(sip_gilstate_t,PyObject *,QMoveEvent *);

    ((sipVH_QtGui_24)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::resizeEvent(QResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_resizeEvent);

    if (!meth)
    {
        QWidget::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t,PyObject *,QResizeEvent *);

    ((sipVH_QtGui_2)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[2]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_closeEvent);

    if (!meth)
    {
        QWidget::closeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_23)(sip_gilstate_t,PyObject *,QCloseEvent *);

    ((sipVH_QtGui_23)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[23]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::contextMenuEvent(QContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!meth)
    {
        QWidget::contextMenuEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_22)(sip_gilstate_t,PyObject *,QContextMenuEvent *);

    ((sipVH_QtGui_22)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[22]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::tabletEvent(QTabletEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_tabletEvent);

    if (!meth)
    {
        QWidget::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_21)(sip_gilstate_t,PyObject *,QTabletEvent *);

    ((sipVH_QtGui_21)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[21]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::actionEvent(QActionEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_actionEvent);

    if (!meth)
    {
        QWidget::actionEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_20)(sip_gilstate_t,PyObject *,QActionEvent *);

    ((sipVH_QtGui_20)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[20]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::dragEnterEvent(QDragEnterEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!meth)
    {
        QWidget::dragEnterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_19)(sip_gilstate_t,PyObject *,QDragEnterEvent *);

    ((sipVH_QtGui_19)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[19]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::dragMoveEvent(QDragMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!meth)
    {
        QWidget::dragMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_18)(sip_gilstate_t,PyObject *,QDragMoveEvent *);

    ((sipVH_QtGui_18)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[18]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::dragLeaveEvent(QDragLeaveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!meth)
    {
        QWidget::dragLeaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_17)(sip_gilstate_t,PyObject *,QDragLeaveEvent *);

    ((sipVH_QtGui_17)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::dropEvent(QDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_dropEvent);

    if (!meth)
    {
        QWidget::dropEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_16)(sip_gilstate_t,PyObject *,QDropEvent *);

    ((sipVH_QtGui_16)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[16]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_showEvent);

    if (!meth)
    {
        QWidget::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_1)(sip_gilstate_t,PyObject *,QShowEvent *);

    ((sipVH_QtGui_1)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[1]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_hideEvent);

    if (!meth)
    {
        QWidget::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t,PyObject *,QHideEvent *);

    ((sipVH_QtGui_0)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[0]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_changeEvent);

    if (!meth)
    {
        QWidget::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtDesigner_QtCore->em_virthandlers[18]))(sipGILState,meth,a0);
}

int sipQDesignerActionEditorInterface::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QWidget::metric(a0);

    typedef int (*sipVH_QtGui_15)(sip_gilstate_t,PyObject *,QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_15)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[15]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!meth)
    {
        QWidget::inputMethodEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_14)(sip_gilstate_t,PyObject *,QInputMethodEvent *);

    ((sipVH_QtGui_14)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[14]))(sipGILState,meth,a0);
}

QVariant sipQDesignerActionEditorInterface::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!meth)
        return QWidget::inputMethodQuery(a0);

    typedef QVariant (*sipVH_QtGui_13)(sip_gilstate_t,PyObject *,Qt::InputMethodQuery);

    return ((sipVH_QtGui_13)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[13]))(sipGILState,meth,a0);
}

bool sipQDesignerActionEditorInterface::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!meth)
        return QWidget::focusNextPrevChild(a0);

    typedef bool (*sipVH_QtGui_12)(sip_gilstate_t,PyObject *,bool);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[12]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_enabledChange);

    if (!meth)
    {
        QWidget::enabledChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_7)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[7]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_paletteChange);

    if (!meth)
    {
        QWidget::paletteChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_11)(sip_gilstate_t,PyObject *,const QPalette&);

    ((sipVH_QtGui_11)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[11]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_fontChange);

    if (!meth)
    {
        QWidget::fontChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_10)(sip_gilstate_t,PyObject *,const QFont&);

    ((sipVH_QtGui_10)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[10]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_windowActivationChange);

    if (!meth)
    {
        QWidget::windowActivationChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_7)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[7]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_languageChange);

    if (!meth)
    {
        QWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_5)(sipModuleAPI_QtDesigner_QtCore->em_virthandlers[5]))(sipGILState,meth);
}

bool sipQDesignerActionEditorInterface::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtDesigner_QtCore->em_virthandlers[20]))(sipGILState,meth,a0,a1);
}

void sipQDesignerActionEditorInterface::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_QtDesigner_QtCore->em_virthandlers[3]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_QtDesigner_QtCore->em_virthandlers[19]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtDesigner_QtCore->em_virthandlers[18]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtDesigner_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQDesignerActionEditorInterface::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtDesigner_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}


PyDoc_STRVAR(doc_QDesignerActionEditorInterface_core, "QDesignerActionEditorInterface.core() -> QDesignerFormEditorInterface");

extern "C" {static PyObject *meth_QDesignerActionEditorInterface_core(PyObject *, PyObject *);}
static PyObject *meth_QDesignerActionEditorInterface_core(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDesignerActionEditorInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerActionEditorInterface, &sipCpp))
        {
            QDesignerFormEditorInterface *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDesignerActionEditorInterface::core() : sipCpp->core());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDesignerFormEditorInterface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerActionEditorInterface, sipName_core, doc_QDesignerActionEditorInterface_core);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerActionEditorInterface_manageAction, "QDesignerActionEditorInterface.manageAction(QAction)");

extern "C" {static PyObject *meth_QDesignerActionEditorInterface_manageAction(PyObject *, PyObject *);}
static PyObject *meth_QDesignerActionEditorInterface_manageAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAction * a0;
        QDesignerActionEditorInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDesignerActionEditorInterface, &sipCpp, sipType_QAction, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerActionEditorInterface, sipName_manageAction);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->manageAction(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerActionEditorInterface, sipName_manageAction, doc_QDesignerActionEditorInterface_manageAction);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerActionEditorInterface_unmanageAction, "QDesignerActionEditorInterface.unmanageAction(QAction)");

extern "C" {static PyObject *meth_QDesignerActionEditorInterface_unmanageAction(PyObject *, PyObject *);}
static PyObject *meth_QDesignerActionEditorInterface_unmanageAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAction * a0;
        QDesignerActionEditorInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDesignerActionEditorInterface, &sipCpp, sipType_QAction, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerActionEditorInterface, sipName_unmanageAction);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->unmanageAction(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerActionEditorInterface, sipName_unmanageAction, doc_QDesignerActionEditorInterface_unmanageAction);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerActionEditorInterface_setFormWindow, "QDesignerActionEditorInterface.setFormWindow(QDesignerFormWindowInterface)");

extern "C" {static PyObject *meth_QDesignerActionEditorInterface_setFormWindow(PyObject *, PyObject *);}
static PyObject *meth_QDesignerActionEditorInterface_setFormWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QDesignerFormWindowInterface * a0;
        QDesignerActionEditorInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDesignerActionEditorInterface, &sipCpp, sipType_QDesignerFormWindowInterface, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerActionEditorInterface, sipName_setFormWindow);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFormWindow(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerActionEditorInterface, sipName_setFormWindow, doc_QDesignerActionEditorInterface_setFormWindow);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDesignerActionEditorInterface(void *, const sipTypeDef *);}
static void *cast_QDesignerActionEditorInterface(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QDesignerActionEditorInterface)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QWidget)->ctd_cast((QWidget *)(QDesignerActionEditorInterface *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDesignerActionEditorInterface(void *, int);}
static void release_QDesignerActionEditorInterface(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQDesignerActionEditorInterface *>(sipCppV);
    else
        delete reinterpret_cast<QDesignerActionEditorInterface *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDesignerActionEditorInterface(sipSimpleWrapper *);}
static void dealloc_QDesignerActionEditorInterface(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQDesignerActionEditorInterface *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QDesignerActionEditorInterface(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QDesignerActionEditorInterface(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QDesignerActionEditorInterface(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQDesignerActionEditorInterface *sipCpp = 0;

    {
        QWidget * a0;
        Qt::WindowFlags a1def = 0;
        Qt::WindowFlags * a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|J1", sipType_QWidget, &a0, sipOwner, sipType_Qt_WindowFlags, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDesignerActionEditorInterface(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_Qt_WindowFlags,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDesignerActionEditorInterface[] = {{679, 1, 1}};


static PyMethodDef methods_QDesignerActionEditorInterface[] = {
    {SIP_MLNAME_CAST(sipName_core), meth_QDesignerActionEditorInterface_core, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerActionEditorInterface_core)},
    {SIP_MLNAME_CAST(sipName_manageAction), meth_QDesignerActionEditorInterface_manageAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerActionEditorInterface_manageAction)},
    {SIP_MLNAME_CAST(sipName_setFormWindow), meth_QDesignerActionEditorInterface_setFormWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerActionEditorInterface_setFormWindow)},
    {SIP_MLNAME_CAST(sipName_unmanageAction), meth_QDesignerActionEditorInterface_unmanageAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerActionEditorInterface_unmanageAction)}
};

PyDoc_STRVAR(doc_QDesignerActionEditorInterface, "\1QDesignerActionEditorInterface(QWidget, Qt.WindowFlags flags=0)");


pyqt4ClassTypeDef sipTypeDef_QtDesigner_QDesignerActionEditorInterface = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QDesignerActionEditorInterface,
        {0}
    },
    {
        sipNameNr_QDesignerActionEditorInterface,
        {0, 0, 1},
        4, methods_QDesignerActionEditorInterface,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDesignerActionEditorInterface,
    -1,
    -1,
    supers_QDesignerActionEditorInterface,
    0,
    init_QDesignerActionEditorInterface,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDesignerActionEditorInterface,
    0,
    0,
    0,
    release_QDesignerActionEditorInterface,
    cast_QDesignerActionEditorInterface,
    0,
    0,
    0
},
    &QDesignerActionEditorInterface::staticMetaObject,
    0,
    0
};
